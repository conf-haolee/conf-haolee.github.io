{"meta":{"title":"cvhao's library","subtitle":"","description":"haolees blogs","author":"haolee","url":"http://example.com","root":"/"},"pages":[{"title":"archives","date":"2023-04-09T03:31:38.000Z","updated":"2023-04-09T03:31:38.847Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-04-09T03:31:22.000Z","updated":"2023-04-09T03:31:22.625Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2024-09-23T10:50:43.266Z","updated":"2024-09-23T10:50:19.851Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"李浩同学 学习经历：广西师范大学 软件工程学硕（2022-2025） 研究方向：机器视觉 实习经历：曾在两家机器视觉公司分别实习半年和一年。 项目经历： 工业密封圈视觉计数 conf-haolee&#x2F;VisionCounting O型圈缺陷检测 conf-haolee&#x2F;O-ringDefectDetection 个人简介：致力于通过机器视觉算法和技术让机器“看见”和“理解”世界。 生活爱好：羽毛球，摄影，弹吉他"},{"title":"catagories","date":"2023-04-09T03:30:58.000Z","updated":"2023-04-09T03:30:58.674Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"视频学习资料","date":"2023-04-12T12:33:07.000Z","updated":"2024-09-04T00:35:56.063Z","comments":true,"path":"notes/index.html","permalink":"http://example.com/notes/index.html","excerpt":"","text":"一 专业知识（计算机基础）101 计算机应用基础102 操作系统103 计算机组成原理104 计算机网络105 数据结构与算法106 编程基础C&#x2F;C++ 黑马程序员 入门视频 【宝藏 C++侯捷老师全系列八部曲】 python 107 人工智能机器学习【斯坦福大学】CS229 机器学习 · 2018年（完结·中英字幕·机翻） 深度学习PyTorch深度学习快速入门教程（绝对通俗易懂！）【小土堆】 计算机视觉【经典课程】计算机视觉-CS231n [斯坦福|高清|中文字幕] 计算机视觉与深度学习 北京邮电大学 鲁鹏 清晰版合集（完整版） YOLOv5 最速上手 ✦ 40分钟带你训练自定义模型 python openCv 【李超】慕课网 OpenCV入门到进阶_实战三大典型项目-慕课网 (imooc.com) NLP二 工作需要（机器视觉）微软基础类库 MFC【20W播放】新版MFC编程全套精品视频 跨平台C++应用开发框架 Qt爱编程的大丙 Qt 手撕Qt5图形视图项目实战，GraphicsView框架结构分析。场景坐标QGraphicsScene类。视图坐标QGraphicsView类。 C# 三 个人兴趣吉他指弹 羽毛球单打精彩合集 经典电影资源 经典影视"},{"title":"书单与网站分享","date":"2023-04-12T12:39:43.000Z","updated":"2024-09-27T19:24:54.794Z","comments":true,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":"这里汇总了一些我读过的有价值的书籍资料，以网盘形式免费恭喜那个，方便以后回顾。 一 专业知识408 -1计算机组成原理408-2 计算机网络【计算机网络 谢希仁】 数据结构与算法 408-3 数据结构本站简介 | labuladong 的算法笔记 大话数据结构 408-4 操作系统深入理解计算机系统 编程语言基础C&#x2F;C++ C++ 改善程序与设计的55个具体做法 第3版 ([美] Scott Meyers 侯捷 Python 机器学习：机器学习 西瓜书 【统计学习方法】 深度学习：李沐：动手学深度学习《动手学深度学习》 — 动手学深度学习 2.0.0 documentation (d2l.ai) 计算机视觉：数字图像处理 &lt;数字图像处理 第四版冈萨雷斯&gt; &lt;局部不变性特征与描述&gt; 机器视觉领域&lt;halcon 图像处理&gt; &lt;python opencv图像处理&gt; 三 课余兴趣&lt;给青年的十二封信 (朱光潜) &gt; &lt;数学之美&gt; &lt;浪潮之巅&gt; &lt;乔布斯传&gt; &lt;娱乐至死&gt; 书籍来源： zlibrary"}],"posts":[{"title":"Linux 常用命令速查","slug":"03 【编程学习】/2021-10-31-Linux-常用命令速查","date":"2024-10-14T10:07:19.594Z","updated":"2024-10-14T13:07:21.857Z","comments":true,"path":"2024/10/14/03 【编程学习】/2021-10-31-Linux-常用命令速查/","link":"","permalink":"http://example.com/2024/10/14/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/2021-10-31-Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/","excerpt":"1mv old_name new_name #mv：移动或重命名文件或目录","text":"1mv old_name new_name #mv：移动或重命名文件或目录 Linux 常用命令速查系统操作命令 序号 命令 作用 补充 1 ls 列出当前目录中的文件和子目录 2 pwd 显示当前工作目录的路径 3 cd /path/to/directory cd：切换工作目录 4 mkdir 创建新目录 5 rmdir directory_name rmdir：删除空目录 6 rm file_name rm -r directory_name *# 递归删除目录及其内容* rm：删除文件或目录 7 cp source_file destinationcp -r source_directory destination # 递归复制目录及其内容 cp：复制文件或目录 8 mv old_name new_name mv：移动或重命名文件或目录 9 touch file_name touch：创建空文件或更新文件的时间戳 10 cat file_name cat：连接和显示文件内容 11 more&#x2F;less：逐页显示文本文件内容 12 head&#x2F;tail：显示文件的前几行或后几行 13 grep：在文件中搜索指定文本 14 ps：显示当前运行的进程 15 kill：终止进程 16 17 18 19 20 2 文件操作命令 序号 命令 作用 补充 1 ifconfigip addr show ifconfig&#x2F;ip：查看和配置网络接口信息 2 3 ping：测试与主机的连通性 ping：测试与主机的连通性 4 5 wget&#x2F;curl：从网络下载文件 3 网络设置命令 序号 命令 作用 补充 1 ifconfigip addr show 查看和配置网络接口信息 2 ping host_name_or_ip 测试与主机的连通性 3 wget URLcurl -O URL 从网络下载文件 4 ssh username@remote_host 远程登录到其他计算机 5 scp local_file remote_user@remote_host:/remote/directory 安全地将文件从本地复制到远程主机，或从远程主机复制到本地 6 iptables -A INPUT -p tcp --dport 80 -j ACCEPT # 允许HTTP流量ufw enable # 启用Uncomplicated Firewall 用于配置防火墙规则 7 netstat -tuln # 显示所有TCP和UDP端口ss -tuln # 使用Socket Stat查看网络连接 显示网络连接信息 8 nc -vz host_name_or_ip port # 测试主机的端口是否可达 用于网络连接测试和数据传输 9 nmcli connection show # 显示网络连接信息 用于管理网络连接的命令行工具 引用 https://blog.csdn.net/wzk4869/article/details/132855372 Linux 命令行速查表","categories":[{"name":"速查手册","slug":"速查手册","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"404智能视觉实验室新生指南","slug":"404 智能视觉实验室新生指南","date":"2024-09-26T16:51:48.207Z","updated":"2024-09-28T05:25:24.117Z","comments":true,"path":"2024/09/27/404 智能视觉实验室新生指南/","link":"","permalink":"http://example.com/2024/09/27/404%20%E6%99%BA%E8%83%BD%E8%A7%86%E8%A7%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%96%B0%E7%94%9F%E6%8C%87%E5%8D%97/","excerpt":"加密文章，输入密码方可查看","text":" 请输入密码查看文章。","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"404实验室","slug":"404实验室","permalink":"http://example.com/tags/404%E5%AE%9E%E9%AA%8C%E5%AE%A4/"}]},{"title":"blender小零件下落场景自动生成python实现","slug":"blender小零件下落场景自动生成python实现","date":"2024-09-26T16:49:56.246Z","updated":"2024-09-26T16:53:27.528Z","comments":true,"path":"2024/09/27/blender小零件下落场景自动生成python实现/","link":"","permalink":"http://example.com/2024/09/27/blender%E5%B0%8F%E9%9B%B6%E4%BB%B6%E4%B8%8B%E8%90%BD%E5%9C%BA%E6%99%AF%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90python%E5%AE%9E%E7%8E%B0/","excerpt":"1import bpy","text":"1import bpy blender小零件下落场景自动生成python实现 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import bpy# 清除默认场景中的所有对象bpy.ops.object.select_all(action=&#x27;DESELECT&#x27;)bpy.ops.object.select_all(action=&#x27;SELECT&#x27;)bpy.ops.object.delete()# new circlebpy.ops.mesh.primitive_torus_add(align=&#x27;WORLD&#x27;, location=(0, 0, 10), rotation=(0, 0, 0), major_radius=1, minor_radius=0.25, abso_major_rad=1.25, abso_minor_rad=0.75)bpy.ops.object.shade_smooth()# add modifier simple Deform#bpy.context.space_data.context = &#x27;MODIFIER&#x27;#bpy.ops.object.modifier_add(type=&#x27;SIMPLE_DEFORM&#x27;)#bpy.context.object.modifiers[&quot;简易形变&quot;].deform_axis = &#x27;X&#x27;#bpy.context.object.modifiers[&quot;简易形变&quot;].angle = 0.174533 # rad(10)# new camerabpy.ops.object.camera_add(enter_editmode=False, align=&#x27;VIEW&#x27;, location=(6, 0, 6), rotation=(1.5708, 0, 1.5708), scale=(1, 1, 1))# add a planebpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align=&#x27;WORLD&#x27;, location=(0, 0, 8), scale=(1, 1, 1))bpy.context.object.scale[0] = -0.6bpy.context.object.scale[1] = -2bpy.context.object.scale[2] = -4.3# set particle systemfor particle in bpy.data.particles: bpy.data.particles.remove(particle)bpy.ops.object.particle_system_add()bpy.data.particles[-1].count = 100bpy.data.particles[-1].frame_end = 50bpy.data.particles[-1].render_type = &#x27;OBJECT&#x27;bpy.data.particles[-1].instance_object = bpy.data.objects[2] # circle bpy.data.particles[-1].use_rotations = Truebpy.data.particles[-1].rotation_factor_random = 0.6# clear all materialsfor material in bpy.data.materials: bpy.data.materials.remove(material) # create material bpy.ops.material.new()light_material = bpy.data.materials[-1]light_material.node_tree.nodes[&quot;原理化BSDF&quot;].inputs[27].default_value = 9# new a lightbpy.ops.mesh.primitive_plane_add(enter_editmode=False, align=&#x27;WORLD&#x27;, location=(-3, 0, 6), rotation=(3.14159, -1.5708, 0), scale=(2.4, 4.0, 1.0))bpy.context.object.scale[0] = 2.4bpy.context.object.scale[1] = 4# apply light_materialbpy.context.active_object.data.materials.append(light_material)scene = bpy.context.scenescene.render.resolution_x = 1920 # 输出图片的长宽scene.render.resolution_y = 1080scene.render.image_settings.file_format = &#x27;BMP&#x27; # 保存格式为BMPscene.render.fps = 6 # fps = 6bpy.context.scene.frame_start = 10 # frame_startbpy.context.scene.frame_end = 50# scene.render.image_settings.color_mode = &#x27;RGB&#x27; # 设置图片具有RGB三个通道# scene.render.image_settings.color_depth = &#x27;8&#x27; # 使用8位的颜色# scene.display_settings.display_device = &#x27;sRGB&#x27; # 显示时使用sRGB格式编码# scene.sequencer_colorspace_settings.name = &#x27;sRGB&#x27; # 保存时使用sRGB格式编码scene.camera = bpy.data.objects[&#x27;摄像机&#x27;]for frame_i in range(10,50): bpy.context.scene.frame_set(frame_i) # 逐帧渲染图片保存 bpy.ops.render.render() save_bmp = &quot;D:/GXNU/blenderToBmp/&quot; + str(frame_i) + &quot;.bmp&quot; bpy.data.images[&quot;Render Result&quot;].save_render(save_bmp)","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"blender","slug":"blender","permalink":"http://example.com/tags/blender/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"WSL 微软 linux子系统介绍与简易指南","slug":"WSL-微软-linux子系统介绍与简易指南","date":"2024-09-24T17:48:45.161Z","updated":"2024-09-27T19:14:22.773Z","comments":true,"path":"2024/09/25/WSL-微软-linux子系统介绍与简易指南/","link":"","permalink":"http://example.com/2024/09/25/WSL-%E5%BE%AE%E8%BD%AF-linux%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%AE%80%E6%98%93%E6%8C%87%E5%8D%97/","excerpt":"","text":"WSL 待补充","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"WSL","slug":"WSL","permalink":"http://example.com/tags/WSL/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"显卡基础知识介绍","slug":"显卡基础知识介绍#TODO","date":"2024-09-24T17:27:09.929Z","updated":"2024-10-10T12:52:14.370Z","comments":true,"path":"2024/09/25/显卡基础知识介绍#TODO/","link":"","permalink":"http://example.com/2024/09/25/%E6%98%BE%E5%8D%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D#TODO/","excerpt":"RTX 4090 , A100, A800，V00","text":"RTX 4090 , A100, A800，V00 显卡基础介绍快速查看显卡使用情况： nvidia-smi","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[]},{"title":"计算机视觉的常见任务","slug":"计算机视觉的常见任务","date":"2024-09-22T14:50:51.361Z","updated":"2024-09-26T16:56:57.311Z","comments":true,"path":"2024/09/22/计算机视觉的常见任务/","link":"","permalink":"http://example.com/2024/09/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BB%BB%E5%8A%A1/","excerpt":"常见的图像识别任务包括图像分类(Image Classification)、目标检测(Object Detection)、语义分割(Semantic Segmentation)和实例分割(Instance Segmentation)。","text":"常见的图像识别任务包括图像分类(Image Classification)、目标检测(Object Detection)、语义分割(Semantic Segmentation)和实例分割(Instance Segmentation)。 计算机视觉的常见任务 a 图像分类经典数据集 MNIST数据集 ImageNet数据集 CIFAR-10&#x2F;100数据集 b 目标检测c 语义分割d 实例分割","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"树莓派4b快速上手","slug":"03 【编程学习】/树莓派4b快速上手","date":"2024-09-21T08:38:51.937Z","updated":"2024-09-21T08:45:57.972Z","comments":true,"path":"2024/09/21/03 【编程学习】/树莓派4b快速上手/","link":"","permalink":"http://example.com/2024/09/21/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/","excerpt":"","text":"树莓派4B 快速使用手册01 组装树莓派4B散热片及九层亚克力外壳的正确打开方式_树莓派散热片怎么贴-CSDN博客 02 烧录系统使用SD卡读卡器插入连接电脑，然后去树莓派官网下载树莓派操作系统程序Raspberry Pi Imager Raspberry Pi OS – Raspberry Pi 03 开启wifi 和SSHstep1：开启ssh ： 在SD卡磁盘根目录下创建 文本文件，命名为ssh(删除后缀名)。 开启ssh step2：配置网络： 创建wpa_supplicant.conf文件， 文件中内容参考： 1234567891011121314151617181920接口设置ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1国家码设置country=CN网络信息配置network=&#123; ssid=&quot;NTest&quot; # wifi账号 psk=&quot;12345678&quot; # wifi密码，一般要&gt;8个字符 key_mgmt=WPA-PSK # 密钥管理算法，通常家用路由都是WPA-PSK，企业路由是WPA-EAP # 如果要连接的wifi是没有密码的，需要配置为：key_mgmt=NONE disabled=1 # 使能 # 其他参数： scan_ssid=1 # 对于隐藏的SSID，需要配置此参数 priority=1 # 优先级，如果有多个wifi需要保存，在不同network字典中可以配置不同的优先级，数字越小，优先级越高&#125;network=&#123; ssid=&quot;River_Test&quot; psk=&quot;12345678&quot;&#125; 04 通过路由器查看接入的树莓派ip地址，ssh 连接在windows 命令行终端 1ssh user@ip 系统默认的用户名为：pi 密码是： raspberry 遇到的问题关于树莓派在interface options中找不到camera的情况_树莓派interface没有相机-CSDN博客 测试相机命令 1libcamera-hello -t 0","categories":[{"name":"速查手册","slug":"速查手册","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"}],"tags":[{"name":"Rasberry Pi","slug":"Rasberry-Pi","permalink":"http://example.com/tags/Rasberry-Pi/"}]},{"title":"经典神经网络的分析与总结","slug":"经典神经图像分析与总结","date":"2024-09-12T02:32:50.457Z","updated":"2024-09-27T18:34:46.095Z","comments":true,"path":"2024/09/12/经典神经图像分析与总结/","link":"","permalink":"http://example.com/2024/09/12/%E7%BB%8F%E5%85%B8%E7%A5%9E%E7%BB%8F%E5%9B%BE%E5%83%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%BB%E7%BB%93/","excerpt":"经典图像分类 神经网络总结 在CNN网络结构的演化上，出现过许多优秀的CNN网络，CNN的经典结构始于1998年的LeNet，成于2012年历史性的AlexNet，从此盛于图像相关领域。","text":"经典图像分类 神经网络总结 在CNN网络结构的演化上，出现过许多优秀的CNN网络，CNN的经典结构始于1998年的LeNet，成于2012年历史性的AlexNet，从此盛于图像相关领域。 发展历史：Lenet –&gt; Alexnet –&gt; ZFnet –&gt; VGG –&gt; NIN –&gt; GoogLeNet –&gt;ResNet–&gt; DenseNet –&gt;ResNeXt —&gt; EfficientNet Alexnet –2012ImageNet图像识别竞赛一骑绝尘 AlexNet——验证了深度卷积神经网络的高效性 主体贡献 提出了一种卷积层加全连接层的卷积神经网络结构 首次使用ReLU函数做为神经网络的激活函数 首次提出Dropout正则化来控制过拟合 使用加入动量的小批量梯度下降算法加速了训练过程的收敛； 使用数据增强策略极大地抑制了训练过程的过拟合； 利用了GPU的并行计算能力，加速了网络的训练与推断。 VGG","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Lenet","slug":"Lenet","permalink":"http://example.com/tags/Lenet/"},{"name":"Alexnet","slug":"Alexnet","permalink":"http://example.com/tags/Alexnet/"},{"name":"VGG","slug":"VGG","permalink":"http://example.com/tags/VGG/"},{"name":"GoogleNet","slug":"GoogleNet","permalink":"http://example.com/tags/GoogleNet/"},{"name":"ResNet","slug":"ResNet","permalink":"http://example.com/tags/ResNet/"}]},{"title":"留学见闻录-- 教育理念对创新的影响","slug":"02 【生活】读书笔记/留学见闻录---教育理念对创新的影响","date":"2024-09-12T02:12:46.333Z","updated":"2024-09-19T04:12:34.304Z","comments":true,"path":"2024/09/12/02 【生活】读书笔记/留学见闻录---教育理念对创新的影响/","link":"","permalink":"http://example.com/2024/09/12/02%20%E3%80%90%E7%94%9F%E6%B4%BB%E3%80%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%95%99%E5%AD%A6%E8%A7%81%E9%97%BB%E5%BD%95---%E6%95%99%E8%82%B2%E7%90%86%E5%BF%B5%E5%AF%B9%E5%88%9B%E6%96%B0%E7%9A%84%E5%BD%B1%E5%93%8D/","excerpt":"PBL和Logbook才是英美乃至西方教育体系真正的精华所在，其他都是旁支末节，建议国内尽早引进。","text":"PBL和Logbook才是英美乃至西方教育体系真正的精华所在，其他都是旁支末节，建议国内尽早引进。 https://m.huxiu.com/article/516917.html?f=pc_new_share_article_wechat 留学见闻录– 教育理念对创新的影响PBL，全名“problem base learning（问题导向型学习法）”，PBL在本科是最常见的。 但是PBL不写实验报告，取而代之的是写Logbook（工作记录本），这个Logbook这里先不提，一会儿重点介绍，它和PBL是西方工科教育的精华所在。 东亚国家普遍很擅长渐进型创新，但是原创型创新非常弱，弱到可以用零来形容。三星手机就是非常典型的代表，今天把手机屏幕做大一点，明天把摄像头像素加大一点，后天改善下电池的续航能力，大后天把手机厚度掏薄一点，顺便把重量做轻一点。 苹果和三星可以说是两种创新模式的典型代表，三星这么多年来，能拿的出手的原创型创新据我了解目前只有一个，就是折叠屏。相比之下苹果的原创就强很多，面部识别，指纹识别，全面屏，蓝牙耳机等等都是他第一个率先应用在手机上的。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"","slug":"密封圈视觉计数研究方向的思考20240910","date":"2024-09-10T12:22:34.155Z","updated":"2024-09-10T12:22:34.155Z","comments":true,"path":"2024/09/10/密封圈视觉计数研究方向的思考20240910/","link":"","permalink":"http://example.com/2024/09/10/%E5%AF%86%E5%B0%81%E5%9C%88%E8%A7%86%E8%A7%89%E8%AE%A1%E6%95%B0%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91%E7%9A%84%E6%80%9D%E8%80%8320240910/","excerpt":"","text":"密封圈视觉计数研究方向的思考2024&#x2F;09&#x2F;10数据集的处理第一步： 绿色橡胶圈 最普通款 5类 每类110张图片 第二步： 扩大数据量 （blender数据仿真生成，程序手工组合数据） 550张数据 第三步 增加不同的密封圈类型的数据 和传统方法做对比做一个离散图分布 一个橡胶圈面积数量分布 2-5个橡胶圈的面积数量分布","categories":[],"tags":[]},{"title":"机器学习基础知识","slug":"机器学习基础知识","date":"2024-09-10T11:20:17.110Z","updated":"2024-09-12T02:30:37.415Z","comments":true,"path":"2024/09/10/机器学习基础知识/","link":"","permalink":"http://example.com/2024/09/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"机器学习基础 机器学习的关键组件： 可以用来学习的数据（data）； 如何转换数据的模型（model）； 一个目标函数（objective function），用来量化模型的有效性； 调整模型参数以优化目标函数的算法（algorithm）。 数据 机器学习， 一种数据驱动的方法 模型 目标函数 损失函数： 交叉熵损失 优化算法： SGD、 带动量的SGD以及ADAM 卷积 池化 下采样","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}]},{"title":"Blender 仿真快速入门","slug":"03 【编程学习】/Blender-仿真快速入门","date":"2024-09-08T16:00:51.172Z","updated":"2024-09-08T16:02:05.776Z","comments":true,"path":"2024/09/09/03 【编程学习】/Blender-仿真快速入门/","link":"","permalink":"http://example.com/2024/09/09/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/Blender-%E4%BB%BF%E7%9C%9F%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","excerpt":"Blender是一款免费开源三维图形图像软件，提供从建模、动画、材质、渲染、到音频处理、视频剪辑等一系列动画短片制作解决方案。","text":"Blender是一款免费开源三维图形图像软件，提供从建模、动画、材质、渲染、到音频处理、视频剪辑等一系列动画短片制作解决方案。 Blender 仿真快速入门01 快捷键使用 02 blender python安装1pip install bpy pip 失败时，尝试离线安装 1pip install bpy-4.1.0-cp311-cp311-win_amd64.whl &amp;&amp; bpy_post_install 下载地址：https://pypi.tuna.tsinghua.edu.cn/simple/bpy/ 注意在指定python环境下下载 Blender Python 简易参考 - 知乎 (zhihu.com)","categories":[{"name":"速查手册","slug":"速查手册","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"}],"tags":[]},{"title":"mes通信","slug":"mes通信是什么#TODO","date":"2024-09-07T15:33:52.867Z","updated":"2024-09-23T10:47:57.950Z","comments":true,"path":"2024/09/07/mes通信是什么#TODO/","link":"","permalink":"http://example.com/2024/09/07/mes%E9%80%9A%E4%BF%A1%E6%98%AF%E4%BB%80%E4%B9%88#TODO/","excerpt":"MES系统全称 **“Manufacturing Execution System” **即制造执行系统。他是一套面向制造企业车间执行层的生产信息化管理系统。","text":"MES系统全称 **“Manufacturing Execution System” **即制造执行系统。他是一套面向制造企业车间执行层的生产信息化管理系统。 什么是mes？mes系统通信模块开发 待补充","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"写作--最高层次的思维锤炼","slug":"02 【生活】读书笔记/写作--最高层次的思维锤炼","date":"2024-08-14T04:07:44.354Z","updated":"2024-09-27T19:04:59.963Z","comments":true,"path":"2024/08/14/02 【生活】读书笔记/写作--最高层次的思维锤炼/","link":"","permalink":"http://example.com/2024/08/14/02%20%E3%80%90%E7%94%9F%E6%B4%BB%E3%80%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%86%99%E4%BD%9C--%E6%9C%80%E9%AB%98%E5%B1%82%E6%AC%A1%E7%9A%84%E6%80%9D%E7%BB%B4%E9%94%A4%E7%82%BC/","excerpt":"阅读使人充实，讨论使人机敏，写作使人精确。——[弗朗西斯·培根]","text":"阅读使人充实，讨论使人机敏，写作使人精确。——[弗朗西斯·培根] 写作——最高层次的思维锤炼 阅读使人充实，讨论使人机敏，写作使人精确。——[弗朗西斯·培根] 最高层次的思维锤炼，大学却没有好好教过你 “因为你来到高等教育学府，是为了发掘真实的自我，每当你为了图省事而放弃真我时，你也在腐化你自己，这可不是无所谓的小事，你的所思所想也会成为你品格的一部分，伴随你的一生，塑造着你的价值观和世界观，指导着你的行为举止。所以要注意用词准确，专注的训练自己，让自己尽可能准确的表达，没有技能什么比这更实用 更高级了。正因为如此，人文社科才如此重要。你可能会想，人文社科有啥好学的。但如果你毕业后，口才 思维 写作能力俱佳，那不管你去哪，你都是向着最高处进发的，而且还有可能惠及周围的人，这就是我给大家的建议。”","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"毕业后理想的生活","slug":"02 【生活】读书笔记/毕业后理想的生活","date":"2024-08-01T04:01:35.727Z","updated":"2024-09-27T18:54:30.435Z","comments":true,"path":"2024/08/01/02 【生活】读书笔记/毕业后理想的生活/","link":"","permalink":"http://example.com/2024/08/01/02%20%E3%80%90%E7%94%9F%E6%B4%BB%E3%80%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%AF%95%E4%B8%9A%E5%90%8E%E7%90%86%E6%83%B3%E7%9A%84%E7%94%9F%E6%B4%BB/","excerpt":"加密文章，输入密码方可查看","text":"cb4afab22cc7d56dbc63d3b0f77ff684c876f061e9fd20531b0052781681ded60f3d3d759c69d68444e058703c3ef647d4ebcc19280cd13e660e57c47702a38b9315261ca97e691665d0173d708fdf559287dc2933ef461dc9e5de03f2204c8eb379169e7df3d1906492455fbfe3e8f5159e3ad3925a84d1829b58ef0fdaa56052403fb8660fb2383affbf6b4c4b3086d61c846a67041de25da37942acc2b28f7d0bb07e2ec9fe80573ed7e41c90ba7bc43353a129664721f890678b05b404e0e87875c5fcb452954914b00e72c36a8fbcae7ab0aac3839e50b88e5c69d2fbf12beedb694262172456fa719d37d0ff17c5573d84bf0cbd0cedba7f90e04da502243df8845c8461ec0331a63e38d6055013faab7ffd6b1542061dbf9e4d3b989bce76119e0cb52313dcc33ff19ef791e20dcfafe329fa8be79ea7837ea078714fe3b4cfd59ae360c5793b335879914d33055c7b01d33b175629dce7f93534de196f3c191ecd9f3a3d9df34abad185d702da29299feac7fafa0c19652f6f72a0ec667fc45e1079660b7910df9a172cfe873215c3e62b2fbb41d7219e204e3cb9017ded6cc9d0db9168cded3623b085856bbff18a1b5d224d2d41620cd90c000ae2d7bff2d722af3ef6dd23a339311c4390c37bdf4321dfa332b23ff31662269712112b706fd2d3022fa6f4f7778dae1e107fc7033dd1e9622ff4c2ebd9090a80edc53b840d14c14878fe6607929522cb5bf28753701a47eff71999cde7c66a4636490dd03108d13467d04711ee41a5cdc53abd9d7bfd1fa3e1f11470c7a36f37331c90eb178de275ee39ef03e2a47d82d404612431a75b65e5609950e1fec14bae4d4c99c6a2a546d4e08312eb33d8080867c5d4b4d50ef111ba3a63344cbeef9bdcf90e659c3ca7dac3f08fe8ba5c37288f2c46cfd4b198e6dc628810e13660fdad61cc45ad0becb8ee7e50d4124d9a05bbc6106c55ad6ea125eab0043f92567b973076829c419e6fadf221f573087b20bd83ddb9b90f1966ffba0feb3280282a3954c3e0153d85b1fb58686e1b370b811ab45acba3387dfd25c01dffce24509cf488ee09f4c145d30b7ac04b4bbe67d11e6bbc4dd2ca6553d672e0734f5136caf6b8ee7bc091c6673d59ca2071b28a9b16bc706afffffc0735b0b5673296e1b7df54512f71a028c037ac396b0bab24afa5f8b251010526f7a3ae32cf3f2bd2cc9b508f7035180c44ff5c9b1a18ddbbc6dd650a25e24149c190b1cbbbdc1a0ca3b1f6688aa78d47ee05e186eed199b5eef1123d42db871b9061bbabf33cdb1066723ec5d466336ce543f439d5f45e05f23509e9ad8eef3d11f0656f8936526fea5d838f7563dfcc54c18b30530d507792f66c24804abaf635d44d84cad75eb1a2e22e30191c4aa3b483d583f56d4e699b626ff89265007cb97912583bd37faf6149edf0093fe4eafdd9a1297c84743156ada2c433957d6cabb75aa263c3b92fcfcc9043c845a8b647e4bdfd1e5e2509dd964052e63c724a05cae669dc4917c0f45417b7c94d7062107b2b24cfeef000482e1d052a4cb828e2dded51ddb934b64d8cbdee6f4c4e4ba3564c449746948ae82dc08e119f036dbd376fea53a64e756eef87739c3ebc7a0682199b0d06420d6865ad6a40f02718af599b5f9facacfbda671283cd8e9d756ac1189cf330c0a3ff96d42825d960f1586b59e9a9eb195a3cd06dc5e976e295dd9739b7fb5e851598578b01fa250b95314db39afab5639308042bf04e17e7a6cff0769a40c424cc4e302e5bf9c6530e0e308b07e129d14707caf37328b2698ea76ac8266e049093b76ad7531db311482eb580535c40447d7c 请输入密码查看文章。","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/tags/%E6%84%9F%E6%82%9F/"}]},{"title":"个人博客的完善计划","slug":"01 【工作】Logbook/个人博客的完善计划","date":"2024-07-30T02:34:06.105Z","updated":"2024-09-27T18:26:33.018Z","comments":true,"path":"2024/07/30/01 【工作】Logbook/个人博客的完善计划/","link":"","permalink":"http://example.com/2024/07/30/01%20%E3%80%90%E5%B7%A5%E4%BD%9C%E3%80%91Logbook/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%AE%8C%E5%96%84%E8%AE%A1%E5%88%92/","excerpt":"www.cvhao.top","text":"www.cvhao.top 个人博客的完善计划 更新域名 解决评论问题 修改用户头像 添加标题栏logo 完善搜索功能 2024/4/25 更新 修改文章内代码样式 添加夜间模式 2024/9/23 新增 分享30篇技术文档 字体样式修改，文章内容排版优化 添加图片加载不出时的提醒 添加网站404 提醒页面 文章加密设置 2024/9/28新增 参考： 主题配置 - Volantis","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"2025届计算机校招查漏补缺","slug":"计算机校招面经复习","date":"2024-07-29T14:13:27.000Z","updated":"2024-09-10T05:24:00.022Z","comments":true,"path":"2024/07/29/计算机校招面经复习/","link":"","permalink":"http://example.com/2024/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A0%A1%E6%8B%9B%E9%9D%A2%E7%BB%8F%E5%A4%8D%E4%B9%A0/","excerpt":"https://csdiy.wiki/","text":"https://csdiy.wiki/ 计算机校招查漏补缺CS自学指南，北大CS GitHub共享库 https://csdiy.wiki/ 小林coding 小林coding (xiaolincoding.com) 面试笔记 CS-Notes 面试笔记 (cyc2018.xyz)","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[]},{"title":"《神逻辑》破解逻辑缪误，分辨诡辩，反杀杠精","slug":"03 【编程学习】/《神逻辑》破解逻辑缪误，反杀杠精","date":"2024-07-03T08:01:02.000Z","updated":"2024-09-10T05:32:41.295Z","comments":true,"path":"2024/07/03/03 【编程学习】/《神逻辑》破解逻辑缪误，反杀杠精/","link":"","permalink":"http://example.com/2024/07/03/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/%E3%80%8A%E7%A5%9E%E9%80%BB%E8%BE%91%E3%80%8B%E7%A0%B4%E8%A7%A3%E9%80%BB%E8%BE%91%E7%BC%AA%E8%AF%AF%EF%BC%8C%E5%8F%8D%E6%9D%80%E6%9D%A0%E7%B2%BE/","excerpt":"预设谬误：为什么胖的人都比较懒？","text":"预设谬误：为什么胖的人都比较懒？ 破解逻辑缪误，分辨诡辩，反杀杠精【嘴笨的人进来学，如何一句话反杀杠精，破解有毒逻辑，见招拆招、以杠治杠】 https://www.bilibili.com/video/BV1t142127hk/?share_source=copy_web&amp;vd_source=2b642316ba0d5f71a2bf75410183788c 一 预设谬误同事：我发现领导总是针对你，是对你有意见吗？ 女友：我最近变胖了， 你还觉得我漂亮吗？ 预设前提 -&gt; 观点植入 质疑论据 忽略问题 回同事：你从哪看出来领导针对我了， 我倒觉得领导很照顾我。 回女友：你眼神不太好吧，我怎么看你廋了呢 隐藏的比较深的预设谬误： 为什么胖的人都比较懒？ 为什么有钱人都喜欢移居国外？ 二 稻草人谬误诡辩者通过歪曲，简化， 错误引用等手段把你的论点，包装成一个站不住脚，容易寄到的稻草人。 这种逻辑谬误操作简单，效果明显，简直是诡辩者的最爱。 例子 女网红被指蹭王婆流量，女网红则称这个世界对女性的恶意太大。 网友针对的是网红自己蹭流量这件事，女网红把蹭流量的原始论点曲解为性别歧视，然后想办法推翻去接后的新论点。 破解稻草人谬误可以顺应逻辑，用他们的方式打败他们。 示例 谬误 反击 你跟你女朋友说你工作太忙忘记回微信 她说她竟然还没你的工作重要 我这么努力工作都是为了养你啊 你说你用的是苹果收集 杠精说你不支持国产手机，你不爱国 你这么爱国，怎么不见你给国家多交税 你说经常吃外卖对身体不好 吃饭也能噎死人，你说干脆不吃好了 既然都要死，你还活着干嘛 三 轻率归纳 记者采访一个骑共享单车的人， 你多大？男生说四十多岁。 记者：广东说这边四十多岁的人，一般都开奔驰，宝马了你怎么还骑共享单车呢？ 反击： 四十多岁还有人去死了呢？你怎么不去死。 轻率归纳就是在没有充分证据的情况下，用一小部分以偏概全做出一般性，概括性的结论。 要推翻轻率归纳的逻辑谬误，你就得比对方更轻率， 用更小的群体甚至是极端个例来反杀他们。 示例 反击 读书无用，很多老板小学没毕业照样是老板 小学没毕业还有要饭的呢，你怎么不说 男人没一个好东西，被男朋友甩了吧 走路上还有可能被车撞，你怎么还出门 一个女孩头发染成这样，一看就不是正经人 一句人话你都不会说，一看你就不是人 四 诉诸无知诉诸无知性谬误：如果你个观点，你没办法证实，我就认为他是错的 子非鱼，安知鱼之乐。 子非吾，安非吾无不知鱼之乐 缺乏证据不能成为证伪的证据 在证据不足的情况下，谁证明谁就掉入了自证陷阱。 五 虚假两难谬误福尔摩斯说，当排除了所有可能性，只剩下一个时， 它就是真相，不管它看起来有多么不可能。 虚假两难的诡辩者，故意排除了其他选项，只保留两种情况，不管你选哪个都是坑。 反杀： 跳出来提出新的观点，或者根据他们的逻辑再设两难选项 示例 反击 女友说，连个包都不舍得给我买，是不是不爱我？ 如果买包就能得到爱情，会不会太草率？ 爱还有陪伴，关心和理解 父母说，才考九十八分是不是没认真学习？ 我就是好好学习才考的九十八分，不然就是68，58 了 同事说，三十多岁还没结婚，你是没人要吧？ 你这么早就结婚是怕自己没人要吧？ 六 诉诸主观情感 在诉诸主观情感的逻辑谬误中， 诡辩者往往预设动机合情的行为就是合理的这个错误的前提。他们可能不占理但他们会利用和煽动人的情绪，比如怜悯仇恨这些，让你觉得虽然自己有理但好像有点不道德。 道德绑架圣母biao 示例 反击 我都道歉了，你不要得理不饶人 知道自己不占理，你还有脸说 你这么有钱，就不能给灾区捐点 你这么好心，替我还房贷吧 你这么打年纪， 凑合凑合结婚得了 你这么大年纪，凑合凑合埋了得了 他还是个孩子，你就不能让着他点 我又不是他爹，凭什么让着他 你一个新人，天天到点就下班，你好意思吗？ 给这么点薪水还让我加班，你好意思吗？ 七 人身攻击清洁工看到一个人乱扔垃圾就上前提醒，这人说：我不仍你不就没事干了，你连扫地得工作都得丢。 反杀 火葬场的职工也闲着，你怎么不让他们也有点事干 治服人身攻击谬误的方法还得是人身攻击，这种逻辑谬误最直白也最不道德。 不管你论证的是什么，我就对人不对事 八 乱赋因果 示例 反击 这个字你都不认识，你肯定没上过大学吧 说出这种话，父母肯定没教你如何做人 早上出门看到黑猫，怪不得今天这么倒霉 我早上出门看到喜鹊，今天也没捡到钱啊 学霸每天喝牛奶， 所以喝牛奶你也能当学霸 我们班学霸姓赵，难不成我也得改姓 在没有足够证据的情况下推导结论，假因谬误 还有 后此谬误 以及相关性谬误。 九 滑坡谬误考不上好的小学意味着考不上好的初中，考不上好的初中意味着考不上好的高中，考不上好的高中意味着上不了好大学，人生就完了 诡辩者往往使用很长一串因果推论，看似没有毛病，实则在每个环节都夸大了因果强度，把可能导致的概率性事故故意说成是必然事件。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"回读《项脊轩志》记","slug":"02 【生活】读书笔记/回读《项脊轩志》记","date":"2024-05-21T08:39:25.000Z","updated":"2024-09-27T18:46:30.687Z","comments":true,"path":"2024/05/21/02 【生活】读书笔记/回读《项脊轩志》记/","link":"","permalink":"http://example.com/2024/05/21/02%20%E3%80%90%E7%94%9F%E6%B4%BB%E3%80%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%9B%9E%E8%AF%BB%E3%80%8A%E9%A1%B9%E8%84%8A%E8%BD%A9%E5%BF%97%E3%80%8B%E8%AE%B0/","excerpt":"加密文章，输入密码方可查看","text":"cb4afab22cc7d56dbc63d3b0f77ff68440736eab27c9245462500bf2a83ce7c1f4f57285174bc933c312755c55d3a95ce5d1a5a226d32f4e40ebc53d5a0077d6786598d8172afccbe3fa445d0995cb000d3001f10dcd44737f0a8a56eaab9f16e7141e7c4f663dafd54cfb65dfef834404c0f644e52ca5e596f293c0b4886fd64bd3ec80ade3e656e967db01e33c66542617a6e18d0ee186b45598d5fa0749ac72cfc35f308904218dbad7350ed7c5db59a68bf12f14418fb838827b27605c1c9527c0ae372d60b22299c24dd2db0d2c666d4eac484f662985fd67a355cea021c7b53bd81ad0bbf69ebf33a908e5cf6c627d721da5cc5bf56522d5573ffa957b378c91ad86117576c747a606abd82cce09aa3fa7db75c8dc0386b43f2ae1170414365dafb8e0c15f0db9bb47ab4220cf680375083c7d5b3b98d3ff714e6b721fc153b48af8d3cbcd019c02279b26e42400d8dd9034ff064a1767e6a15df1610b7ced203a36608d58c285152b7b64eeacfcac1626758257f6c1aeb22b1a34ac8dac97b011df8b47100eaf1f66d0b2c653901bf4f75ac7e65a6186ae89c6210168aabefb2cb7773b3cdd933649c12caa6dc75eb756f6a4b21d86fdc278e79e1656482b52ca5defe43346d73d367412b79f4b98475a8722c0d0494db49ca1f94ab617fdffa2bfb52e853da56ddc1c8654c9a7b41ca5f779b83a3881e807d1016284e0f6c587f7c4da766d6e36a7ea39170eef3a4e7ac1a6533670102fb7bc0a233db0f4d6fedfde38f93618691537fbf6d60b520ee3706eb608135b3590d1a36215acfd08d3cbb0a65f3c45e268ff19b03d7a7d8e1f95272d34eb7b755dcbc36d08ac1f5305a1d15809f2fb6ae4e9d2f938e4efb8961077238fbdd0d735391bb39f3e57b25ed8bdcdd42d289a960d177520d5180c665ae35a7384416ab04d23e01a455294707de4ec9a379446fd8abb16f7035da1e0240ed40b9e7929020f910acf2409b8553ebce30d608e39f1cdf8adcbc9fa2d35963981993d85365756441e1b276bf1034e2b52f6447eeb89bbb9df4be59db94f06fe67dba8b6c5395ec275476370efdc55b5f145a38e182498f7c8cc154f81cfb10ee300de50ff1a9777dd2408c688d35ca57ca82e2c24763ef7c3e1a425805c43edc1ffa101e083d14faaea11a4f8f4e91be4f396f741b800f604ac4c77c71b45630d4c2b6cba064f3b9f738f486cd04bdca4bf70b99a4662871b673d7bdfe4ff36bd459e991c0caa08387e9c2ac3b8ab6471d4397afd2bd6d08afc7ccf0ef73751c50c66ddb7a22fe5f9e7a155a895c64d6d4cca7b35a5ee366e17680da2d942d07a67e48afb6c52280ec544a60a3a6915fac93b26780885344c76387322f8ee8c62618132fb40b81a836180de309d18b09c9c4081a2243d7db553e8751a2ae90fde93f8f55fc134ff86ed42894b7ba296943876f35a64594974921add0bbb17812dd4afb9bad708db7eec3fda6aa6d971e1960e246e5ea4b552aa37a00f2b5f9b5b5d7ab8a35e3e79fa85eed44208c8ddceaa685ac46c6f19e57fdb978b0c02988c57c268f953bb3ebfcbe027a19f71bd8e02d120b2dbfa55d8c11abbad25b9a066bab72aef15d31cc473cf29774864517f235af9071bdcc533de8f79de49aa9cdf79d7c292eddaf8ebccdbbb2ac0cf21e4fc812c3bea7de5bf68c00c6c67f0fa5ed3ba8d4d4c5e55d0fa85bf11463e53cba77465f4c42c51fdd501349dd53fd71632d518533407a400bd1dea3f8d3d257d613d57c769b28790148955f82b651f54b8511d30af69b03b70f3a2736ee87839942f6d613ed3ce322d10e8cf9d959d025ec4bd952a7e961976aab9647615f08b2a67b057a41f99fa5b916e00e21865958b85b12b898199318dd2f7977a734c24551ecd920c0bee59db683cc5f77fd2348dae93e243b5641a9b80314908ba11e88d77975449361771e441e1f060e9cdf369253e969f4ee93ab03cf6134a96996dc65ffd6985fcc80f79f525c06151c316b9524c9b89caaa7e0a59df56f2ea8d17c6fda176955e3020d456257f6b67d4a23afa834f6c4a73680360a3abd09c6b2a851b65f4d1b22a1841f9210ce8312601a6784089f9200c352ed84d1a125212dad023db417cb598b9e163dff587ce2367d2932bad3d82a560265b51e49a4470039d064c7f66d13855d900c9fe3e04f5b3edf9cedc96cb6e561ab060780dd8495ac19f41011b8ae783cdaf0fc4871dceaffa2cd3dedfa02bc5e3a2037a487cdca2c9b1fde0a3287fe4f008a4da4c8cf0b530973641932ace2994e7f3403cabb9e4cd5ea55dafb6413af3e2c8c13fde19d278087c18c481499362720775ee42abd1140dcdb9a61477b943be52ee6255b0a18fbca81e6d660ae7205e2ab7f02f2f9be90852eb0bf718fbc3c430ea365d177d854136bace240b29bf99894cb618a908dd7e358bd7b68a1a19ff927e61d576eef6490449fffca4dbb385112303f55dee765ad12735ef982af117f36374c99591a4eed8d07d686bc8d617ef055cc6d6b15ccb8d8608ce907a6d27d492e8a4905da77ec872f68d7c47bd928369651a3c305335bd2f758712e3957f4f8b611105fb4ff4cc91998e491892a10f1c26a71f344f897470c4241c09c539aaeb96a7516f8f8805940021bdbfcd1e57cee218ebce9f8ab61310722eed2c1cdd5cc3397d8e2683fe3f52ff7950e70b0ecb652fb0e60759c4b663027b5836c10595117e38c719d761e69878efef256b2512014a3afca40a32e3eff3b7c708304ff6cb04db86594c913baa1209982650d92fa8dd697f431fc6deb7fc12adab86bb21437475fcec4d6e8ef157b3a4d0d5a791c627c30a1db9b269d55398af2fa48f002f12c2ac4d332a9876d19e9c0ee92889eb0465b2c91003f7cb158cdac39cb4f2769d87dee6daaf48002b3ae146 请输入密码查看文章。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/tags/%E6%84%9F%E6%82%9F/"}]},{"title":"人工智能时代 我们需要什么样的人才？","slug":"02 【生活】读书笔记/人工智能时代，我们需要什么样的人才","date":"2024-02-20T16:09:48.639Z","updated":"2024-09-10T05:16:49.238Z","comments":true,"path":"2024/02/21/02 【生活】读书笔记/人工智能时代，我们需要什么样的人才/","link":"","permalink":"http://example.com/2024/02/21/02%20%E3%80%90%E7%94%9F%E6%B4%BB%E3%80%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3%EF%BC%8C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA%E6%89%8D/","excerpt":"早睡早起，按时休息","text":"早睡早起，按时休息 人工智能时代 我们需要什么样的人才？人才教育第一点： 实事求是，不说假话。第二点： 见贤思齐，要有同理心，能见得别人好。第三点： 鼓励多元化的标准。鼓励生物多样性，无论是大树还是小草都应该能沐浴到对它来讲充沛的阳光。 第四点： 哪些能力是孩子应该注重培养的？ 语言能力。 逻辑能力 即兴的公众演讲和辩论 鼓励孩子们的想象力。须知 人类思维的边界就是宇宙的边界 ​ 鼓励多去提问。须知只要能问对问题，答案就有了一半。 多体验自然。 对年轻人： 极致的自律，才有极致的自由。 读书，学习，赚钱，规律的健身。早睡早起，孝敬父母，用炙热的心去爱人爱己。有同理心，用你毕生的精力去精通一个一个的专业领域，低级的欲望只需放纵即可获得，高级的欲望只有克制才能达到。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"latex入门手册","slug":"03 【编程学习】/Latex 简单入门","date":"2024-02-02T02:54:29.765Z","updated":"2024-09-10T05:42:15.336Z","comments":true,"path":"2024/02/02/03 【编程学习】/Latex 简单入门/","link":"","permalink":"http://example.com/2024/02/02/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/Latex%20%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/","excerpt":"Overleaf, Online LaTeX Editor","text":"Overleaf, Online LaTeX Editor Latex 入门安装mac安装 mactex MacTeX - TeX Users Group (tug.org) latex语法入门Learn LaTeX in 30 minutes - Overleaf, 在线LaTeX编辑器 Tex编辑工具推荐1 在线latex编辑工具 Overleaf, Online LaTeX Editor 2 vscode 添加latex插件 分享latex + Beamer 组会汇报模版以及开题报告模版 conf-haolee&#x2F;Latex-Beamer-: Beamer模板以及latex 使用 (github.com)","categories":[{"name":"速查手册","slug":"速查手册","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"}],"tags":[{"name":"latex","slug":"latex","permalink":"http://example.com/tags/latex/"}]},{"title":"文件与文件夹命名规范","slug":"01 【工作】Logbook/文件与文件夹命名规范","date":"2023-12-25T08:09:43.363Z","updated":"2024-09-23T04:58:08.629Z","comments":true,"path":"2023/12/25/01 【工作】Logbook/文件与文件夹命名规范/","link":"","permalink":"http://example.com/2023/12/25/01%20%E3%80%90%E5%B7%A5%E4%BD%9C%E3%80%91Logbook/%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E5%A4%B9%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/","excerpt":"MECE法则：相互独立、完全穷尽”，即所谓的 “无重复、无遗漏”","text":"MECE法则：相互独立、完全穷尽”，即所谓的 “无重复、无遗漏” 文件与文件夹命名规范1）文件命名规范命名结构：项目命名词（或项目编号）+文件命名词+文件作者+日期+版本号.文件后缀例如：2016年公司部门工作总结_营销部_大鹏_20170101_V1.0.doc文件名称由五部分组成： 第一部分为阐述文件主题，观其名知大意； 第二部分为文件所属类别，如在单位工作的写工作部分、学生人群可写班级等； 第三部分为文件创建者； 第四部分为当前文件的日期； 第五部分为文件阶段标识，用于版本管理。 待归档文件见下的临时文件命名： 按照用途简要描述如： 周六导师开会用，周五组会论文参阅资料，张三简历修改V1.0版本 2）文件夹命名规范命名结构：文件夹名称+开始日期+结束日期例如：Prj_PC PIS Project_20170101_ 第二个下划线后为空，等待工作结束后添加结束日期即可。文件夹的命名由三部分组成： 项目名称 项目开始日期 项目结束日期 3）GTD思想指导下的文件命名为了更好的整理自己的文件，可增加了几个特殊的符号，用于标识不同状态的文件：1、！（叹号）——标注重要的文件或者文件夹2、#（井号）——标注等待处理的文件或者文件夹3、@（@号）——标注正在处理的文件或者文件夹对那些处理完毕的文件，应该放在合适的文件夹当中，因此不作特殊符号的标注。这些符号的使用，是作为文件命名的首字应用，如此一个文件夹中，标注特殊符号的文件会排列在一块，查找和使用起来会比较方便。","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[]},{"title":"SSH远程连接快速上手","slug":"03 【编程学习】/SSH远程连接快速上手","date":"2023-09-21T10:02:25.850Z","updated":"2024-09-27T19:13:55.675Z","comments":true,"path":"2023/09/21/03 【编程学习】/SSH远程连接快速上手/","link":"","permalink":"http://example.com/2023/09/21/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/SSH%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/","excerpt":"ssh user@ip SSH 协议通过对网络数据进行加密和验证， 在不安全的网络环境中提供了安全的登录和其他安全网络服务。","text":"ssh user@ip SSH 协议通过对网络数据进行加密和验证， 在不安全的网络环境中提供了安全的登录和其他安全网络服务。 SSH 远程连接快速上手01 SSH 基础知识SSH(Secure Shell)是一种加密的网络通信协议。 SSH 的主要作用： 远程登录 数据传输 密钥认证 以及隧道传输、端口转发、回话管理。 通信模式： 服务器-客户端模式(Server-Client) 02 SSH别名登录使用别名登录方式, 需要打开～&#x2F;.ssh&#x2F;config， 追加以下内容： 123Host raspberrypi #这里是别名 HostName 192.169.31.48 #这里是服务器IP【注意这里开头空两格不是tab键】 User haolee #这里是用户名 raspberrypi是haolee@192.168.31.48的别名 03 SSH 远程免密连接 配置ssh 免密登录的原理： 把你本地的公钥添加到服务器的～&#x2F;.ssh&#x2F;authorized_keys文件里 【小知识】第6期 SSH免密登录的原理_哔哩哔哩_bilibili 什么叫SSH？原理详解，看这一篇就够了！-ssh的原理 (51cto.com) step1: 在本地生成密钥 ssh-keygen step2: 连接上服务器，进入 cd ~ 打开.ssh/authorized_keys，追加客户端下id-rsa.pub文件内容进去。 快捷命令: ssh-copy-id user@192.168.44.21 可能遇到的问题 解决：powershell无法使用ssh-copy-id命令 - octal_zhihao - 博客园 (cnblogs.com) 04 基于SSH命令行文件传输SCP 使用命令行实现文件传输， 使用一次命令传输一次 基本语法： scp [可选参数] source_file target_file 使用例子： 本地文件复制到远程： scp local_file remote_username@remote_ip:remote_file 远程目录复制到本地： scp -r remote_username@remote_ip:remote_dir local_dir 可选参数说明： -r : 递归复制整个目录 05 可视化客户端SSH连接&#x2F;FTP文件传输作用： 使用UI软件实现ssh 连接，文件传输，连接一次可以多次传输文件。 Windows软件： XFTP XShell Mac软件： Electerm Linux软件：Remmina 引用： SSH+免密登陆+VSCode远程开发+GitHub免密","categories":[{"name":"速查手册","slug":"速查手册","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"}],"tags":[]},{"title":"C++ 实现word读写","slug":"03 【编程学习】/C++ word读写方法总结","date":"2023-05-23T02:53:57.477Z","updated":"2024-09-22T15:33:04.610Z","comments":true,"path":"2023/05/23/03 【编程学习】/C++ word读写方法总结/","link":"","permalink":"http://example.com/2023/05/23/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/C++%20word%E8%AF%BB%E5%86%99%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/","excerpt":"C++(Qt) 和 Word、Excel、PDF 交互总结 - kevinlq - 博客园 (cnblogs.com)","text":"C++(Qt) 和 Word、Excel、PDF 交互总结 - kevinlq - 博客园 (cnblogs.com) 1. XML 模板替换 标签替换 事先编辑好一份 Word 模板，需要替换内容的地方预留好位置，然后使用特殊字段进行标记，后面使用代码进行全量替换即可完成 strAllContent.replace(&quot;$VALUE0&quot;, &quot;1&quot;); strAllContent.replace(&quot;$VALUE1&quot;, QString::fromLocal8Bit(&quot;法外狂徒张三&quot;)); strAllContent.replace(&quot;$VALUE2&quot;, QString::fromLocal8Bit(&quot;考试不合格&quot;)); strAllContent.replace(&quot;$VALUE3&quot;, &quot;2&quot;); strAllContent.replace(&quot;$VALUE4&quot;, QString::fromLocal8Bit(&quot;李四&quot;)); strAllContent.replace(&quot;$VALUE5&quot;, QString::fromLocal8Bit(&quot;合格&quot;)); ... 2. COM组件方式 原理：采用 Micro Soft公开的接口进行通讯，进行读写时会打开一个 Word 进程来交互 Microsoft 组件对象模型（COM）定义了一个二进制互操作性标准，用于创建在运行时交互的可重用软件库。 Qt 为我们提供了专门进行交互的类和接口，使用 Qt ActiveX框架就可以很好的完成交互工作 上手简单，但是写入导出较慢 3. HTML方式 原理：这种方式得益于 Word支持 HTML格式导出渲染显示，那么反向也可以支持，需要我们拼接 HTML格式内容，然后写入文件保存成 .doc格式 插入的图片是本地图片文件的链接，导出的 word文档拷贝到其它电脑图片无法显示 优点：跨平台，不仅限于 Windows平台，代码可扩展性比较好导出速度快、代码可扩展；缺点：字符串拼接 HTML 容易出错，缺失标签导出后无法显示；插入的图片是本地图片文件的链接，导出的 word文档拷贝到其它电脑图片无法显示 4. 第三方库开源库 DuckXhttps://github.com/amiremohamadi/DuckX缺文档，缺例子，复杂 没发现插入图片的方法 DocxFactory https://github.com/DocxFactory/DocxFactory缺例子文档，时间太久, 官方文档已经打不开 minidocx https://github.com/totravel/minidocx轻量化，项目比较完整，说明比较详细，但是不能插入图片 TO DO 可以尝试扩展 商业类库aspose.wordshttps://products.aspose.com/words/zh/cpp/edit/docx/免费的导出的文档有水印，付费使用 5. 使用python库间接实现曲线救国： 调用Python-docx库https://zhuanlan.zhihu.com/p/564081044 https://github.com/kevinlq/QtPythonDocx#%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85有文档，有教程，有可运行的项目 需要配置对用python 环境","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"DuckX","slug":"DuckX","permalink":"http://example.com/tags/DuckX/"},{"name":"minidocx","slug":"minidocx","permalink":"http://example.com/tags/minidocx/"},{"name":"Python-docx","slug":"Python-docx","permalink":"http://example.com/tags/Python-docx/"}]},{"title":"C++项目 实现word读写（二）","slug":"03 【编程学习】/C++项目 实现word读写（二）","date":"2023-05-23T02:53:57.477Z","updated":"2024-09-22T15:39:47.744Z","comments":true,"path":"2023/05/23/03 【编程学习】/C++项目 实现word读写（二）/","link":"","permalink":"http://example.com/2023/05/23/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/C++%E9%A1%B9%E7%9B%AE%20%E5%AE%9E%E7%8E%B0word%E8%AF%BB%E5%86%99%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"C++(Qt) 和 Word、Excel、PDF 交互总结 - kevinlq - 博客园 (cnblogs.com)","text":"C++(Qt) 和 Word、Excel、PDF 交互总结 - kevinlq - 博客园 (cnblogs.com) 使用Python—docx库https://zhuanlan.zhihu.com/p/564081044 https://github.com/kevinlq/QtPythonDocx#%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85 参考开源项目： 有文档，有教程，有可运行的项目 需要配置对用python 环境","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"DuckX","slug":"DuckX","permalink":"http://example.com/tags/DuckX/"},{"name":"minidocx","slug":"minidocx","permalink":"http://example.com/tags/minidocx/"},{"name":"Python-docx","slug":"Python-docx","permalink":"http://example.com/tags/Python-docx/"}]},{"title":"QXlnt 实现Excel读取Demo","slug":"03 【编程学习】/QXlnt 实现Excel读取","date":"2023-04-25T11:53:17.000Z","updated":"2024-09-22T15:40:13.793Z","comments":true,"path":"2023/04/25/03 【编程学习】/QXlnt 实现Excel读取/","link":"","permalink":"http://example.com/2023/04/25/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/QXlnt%20%E5%AE%9E%E7%8E%B0Excel%E8%AF%BB%E5%8F%96/","excerpt":"介绍： QXlnt 是一个基于xlnt库的帮助程序项目，允许在Qt中使用xlnt。 xlnt库时一个现代C++库，用于操作内存中的电子表格并从xlsx文件中读取&#x2F;写入 。","text":"介绍： QXlnt 是一个基于xlnt库的帮助程序项目，允许在Qt中使用xlnt。 xlnt库时一个现代C++库，用于操作内存中的电子表格并从xlsx文件中读取&#x2F;写入 。 1 导入Qxlnt xlnt两个文件夹 从官网下载Qxlnt 库使用 QtExcel&#x2F;Qxlnt 复制Qxlnt ，xlnt两个文件夹到自己项目中 2 在项目.pro 文件中加入 3 替换进入Qxlnt ，打开Qxlnt.pri 将 ../xlnt/ 全部替换成 $$PWD/../xlnt/ 4 验证去官网复制个例子运行 5 成功写入 引用 xlnt 参考文档 QT-XLSX,Excel快速读写经验 | 码农家园 (codenong.com) 源码 地址： https://github.com/silent426/QtLearning.git","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"http://example.com/tags/Qt/"},{"name":"Qxlnt","slug":"Qxlnt","permalink":"http://example.com/tags/Qxlnt/"},{"name":"xlnt","slug":"xlnt","permalink":"http://example.com/tags/xlnt/"}]},{"title":"Qt 实现多线程","slug":"03 【编程学习】/Qt 实现多线程的几种方式","date":"2023-04-24T01:55:39.613Z","updated":"2024-09-22T15:40:00.977Z","comments":true,"path":"2023/04/24/03 【编程学习】/Qt 实现多线程的几种方式/","link":"","permalink":"http://example.com/2023/04/24/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/Qt%20%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"1，继承Qthread ,重写run方法。","text":"1，继承Qthread ,重写run方法。 发展史 version-4.6以前，只能继承QThread来实现 version-4.6以后，官方推荐使用继承QObject 来实现 Qthread 存在的问题：方法一：继承QthreadStep1. 需要创建一个线程类的子类，让其继承QT中的线程类QThread，比如： 1234class MyThread:public QThread&#123; ......&#125; step2. 重写父类中run() 方法，在该函数内部编写子线程要处理的具体的业务流程 123456789class MyThread:public QThread&#123; ...... protected: void run() &#123; ........ &#125;&#125; step3. 在主线程中创建子线程对象，new 一个就可以了 1MyThread * subThread = new MyThread; Step4. 启动子线程，调用 start () 方法 1subThread-&gt;start(); 开始实验： 用方法一继承Qthread的方式开辟子线程读取excel分别试验三个不同的读写excel文件 第一次 :one:创建线程子类 :two:重写父类中run()方法 :three:主线程中创建子类 :four:启动子线程 结果： 成功创建子线程，excel 读写函数chart() 被调用，但未见保存成功的文件 第二次 … 方法二：继承QObjectQt 提供了第二种线程的创建方式弥补了第一种方式的缺点，用起来更加灵活，但是这种方式写起来会相对复杂u一些，其操作步骤如下： step1 创建一个新类，让这个类从QObject派生 step2 在这个类中添加一个公共的成员函数，函数体就是我们要子线程中执行的业务逻辑 1234567class MyWork:public QObject&#123;public: ....... // 函数名自己指定, 叫什么都可以, 参数可以根据实际需求添加 void working();&#125; step3 在主线程中创建一个 QThread 对象，这就是子线程的对象 1QThread* sub = new QThread; step4 在主线程中创建工作的类对象（千万不要指定给创建的对象指定父对象） 12MyWork* work = new MyWork(this); // errorMyWork* work = new MyWork; // ok Step5 将 MyWork 对象移动到创建的子线程对象中，需要调用 QObject 类提供的 moveToThread() 方法 1234// void QObject::moveToThread(QThread *targetThread);// 如果给work指定了父对象, 这个函数调用就失败了// 提示： QObject::moveToThread: Cannot move objects with a parentwork-&gt;moveToThread(sub); // 移动到子线程中工作 step6 启动子线程，调用 start(), 这时候线程启动了，但是移动到线程中的对象并没有工作 Step7 调用 MyWork 类对象的工作函数，让这个函数开始执行，这时候是在移动到的那个子线程中运行的 开始实验：第一次 excel chart()函数 过程 略 结果 同方法一的结果 保存文件失败 总结：参考： Qt 中多线程的使用 | 爱编程的大丙 (subingwen.cn)","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"http://example.com/tags/Qt/"},{"name":"多线程","slug":"多线程","permalink":"http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"Qxlsx 实现Excel读写","slug":"03 【编程学习】/Qxlsx 实现Excel读写","date":"2023-04-21T08:42:07.388Z","updated":"2024-09-22T15:40:28.478Z","comments":true,"path":"2023/04/21/03 【编程学习】/Qxlsx 实现Excel读写/","link":"","permalink":"http://example.com/2023/04/21/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/Qxlsx%20%E5%AE%9E%E7%8E%B0Excel%E8%AF%BB%E5%86%99/","excerpt":"Qxlsx 是一个第三方的Excel文件读写库，使用C++ 与 Qt开发。","text":"Qxlsx 是一个第三方的Excel文件读写库，使用C++ 与 Qt开发。 1. 介绍 Qxlsx 是一个第三方的Excel文件读写库，使用C++ 与 Qt开发。 由于QtXlsx2014 年不再维护，该项目2017年起，基于Qtxlsx开发。 GitHub库：QtExcel&#x2F;QXlsx 前身：Qtxlsx两种方法开始使用Qtxlsx写一个新Excel 文件 方法1：使用Xlsx作为Qt5的插件模块 要使用perl 方法2: 直接使用源代码 window 平台尝试可以写入新Excel文件 Qt 官网的介绍： Handling Microsoft Excel file format - Qt Wiki 2. 如何使用？安装设置：How to setup QXlsx project -qmake 如果出错，可将其中8，9，10步骤可更改为： 复制QXlsx文件夹 到项目文件根目录下： 在.pro文件中添加include 构建项目后即可导入头文件 wiki 手册：:one: 读单元格数据 :two: 写单元格数据 … 详情：Home · QtExcel&#x2F;QXlsx Wiki (github.com) Qxlsx 例子应用： 1 直接读取Excel calendar Excel日历 创建了12个sheet表单 设置了单元格大小 修改单元格格式 合并单元格 单元格字体颜色，加粗 QXlsx&#x2F;calendar chart 饼图，三维饼图 柱形图，三维柱形图 组合图，三维折线图 面积图，三维面积图 散点图，圆环图 chart chartsheet生成图与原始数据分别存在两个Excel表中 chartsheet datavalidation 数据验证限制，限制单元格内数值输入的范围 datavalidation documentpropery ​ 设置文件的属性，创建人，公司，关键词，描述 extract data导出软件Excel单元格内容在控制台显示 formula hyperlink image Merge cells numberformat 2 在android上显示 3 加载到网络服务器上 4 显示到控制台 5 加载显示到Qt小组件上（目前未开源） https://j2doll.tistory.com/654 3. Qxlsx存在的一些问题：1 不支持QT4 2 不支持密码函数 ，可以使用Qxlnt补充 3 不支持Excel中的公式，可以使用Qxlnt补充⚠️（本身也能使用公式，见官网例子） QXlsx&#x2F;formulas.cpp at master 4 不支持打印到打印机 5 部分支持图表，还有一些bug 尚未修复 6 只有部分功能与 QtXlsxWriter兼容 有关详细信息，请参阅链接。 https://github.com/dbzhang800/QtXlsxWriter https://github.com/VSRonin/QtXlsxWriter 7 QXlsx 不支持严格格式？（非过渡模式） 有关详细信息，请参阅链接。https://github.com/QtExcel/QXlsx/issues/68#issuecomment-587438003 8 Qxlsx 不提供线程安全，在 QXlsx 库之外使用 QMutex 9 不支持多线程和并发。使用您自己的锁、互斥锁和信号量。 例子可运行源码地址： https://github.com/silent426/QtLearning.git","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"Qxlsx","slug":"Qxlsx","permalink":"http://example.com/tags/Qxlsx/"},{"name":"Qt","slug":"Qt","permalink":"http://example.com/tags/Qt/"}]},{"title":"Git 入门笔记","slug":"03 【编程学习】/Git 与 Github 入门使用","date":"2023-04-13T03:45:01.000Z","updated":"2024-09-23T15:00:59.729Z","comments":true,"path":"2023/04/13/03 【编程学习】/Git 与 Github 入门使用/","link":"","permalink":"http://example.com/2023/04/13/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/Git%20%E4%B8%8E%20Github%20%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/","excerpt":"命令：git commit git pull git push","text":"命令：git commit git pull git push 一 如何将本地的新项目提交到GitHub如何通过git 提交代码到远程仓库？ 1.初始化本地仓库1git init 2.将所有文件添加到本地仓库（也可添加你所需的文件）1git add . 3.将项目提交到本地git仓库 （“first commit” 是备注信息）1git commit -m &quot;first commit&quot; 4.本地git仓库与远程仓库关联（两种方式：1.https方式；2.SSL方式）1git remote add origin https://github.com/JianhaoChung/DGL_GCNER.git 或 1git remote add origin git@github.com:JianhaoChung/DGL_GCNER.git 5.将项目推送到远程仓库1git push -u origin master 二 Git更新本地项目上传到github1、添加到本地仓库1git add . 2 添加提交描述1git commit -m ‘second commit’ 3 提交前先从远程仓库主分支中拉取请求1git pull origin master 4 把本地仓库代码提交1git push -u origin master 引用 视频同步笔记：狂神聊Git (qq.com) git 小游戏 三 GitHub 免密Push","categories":[{"name":"速查手册","slug":"速查手册","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"}],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"}]},{"title":"Volantis 主题使用手册","slug":"01 【工作】Logbook/hexo -Volantis主题修改","date":"2023-04-13T03:45:01.000Z","updated":"2024-09-23T14:34:46.795Z","comments":true,"path":"2023/04/13/01 【工作】Logbook/hexo -Volantis主题修改/","link":"","permalink":"http://example.com/2023/04/13/01%20%E3%80%90%E5%B7%A5%E4%BD%9C%E3%80%91Logbook/hexo%20-Volantis%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9/","excerpt":"hexo g 生成静态文件; hexo s 启动服务; hexo d 远程部署","text":"hexo g 生成静态文件; hexo s 启动服务; hexo d 远程部署 hexo Volantis 使用笔记 1.创建文章hexo new firstnote.md 时 使用分类 和标签 hexo g 生成静态文件 hexo s 启动服务 hexo d 远程部署 引用 指令 | Hexo 2. hexo 主题修改开启搜索（Search）6.0默认开启 需要先安装插件 1npm i hexo-generator-json-content 如需配置，如下 123search: enable: true service: hexo Hexo-Volantis主题优化 - 小TiD笔记 (tidnotes.top)","categories":[{"name":"速查手册","slug":"速查手册","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"}],"tags":[{"name":"Volantis","slug":"Volantis","permalink":"http://example.com/tags/Volantis/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"个人博客日志","slug":"01 【工作】Logbook/博客搭建日志","date":"2023-04-13T03:45:01.000Z","updated":"2024-09-23T11:01:48.256Z","comments":true,"path":"2023/04/13/01 【工作】Logbook/博客搭建日志/","link":"","permalink":"http://example.com/2023/04/13/01%20%E3%80%90%E5%B7%A5%E4%BD%9C%E3%80%91Logbook/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/","excerpt":"www.cvhao.top","text":"www.cvhao.top 1、博客园稳定可用www.cnblogs.com/cvhao/ vscode 博客园插件 测试可用 解决图片插入问题 2、github + hexo目前异常 2024&#x2F;4 已更新 www.cvhao.top 自动部署 域名绑定 3、gitee + hexo目前可用www.haolee426.gittee.io 稳定使用 自动部署 域名绑定 4、hexo 设备适配gitee 部署 window 可用 mac 可用 手机端 github 部署 + 域名使用 window 可用 mac 可用 手机端","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"Hello Hexo发布指南","slug":"01 【工作】Logbook/hexo发布指南","date":"2023-04-13T03:45:01.000Z","updated":"2024-09-27T18:58:52.849Z","comments":true,"path":"2023/04/13/01 【工作】Logbook/hexo发布指南/","link":"","permalink":"http://example.com/2023/04/13/01%20%E3%80%90%E5%B7%A5%E4%BD%9C%E3%80%91Logbook/hexo%E5%8F%91%E5%B8%83%E6%8C%87%E5%8D%97/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment hexo部署与调试1234567$ hexo clean //清除静态页面缓存（清除 public 文件夹) $ hexo g //在本地生成静态页面（生成 public 文件夹） $ hexo s //启动本地服务 http://localhost:4000，进行预览调试 $ hexo d //远程部署，同步到 GitHub $ npm install hexo-deployer-git --save //自动部署$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d //发布 hexo 相关功能设置在hexo文件夹下右键点击Git Base here后键入$hexo new page “name”，source&#x2F;_post 文件夹中生成name.md文件，打开后即可编辑，编辑格式如下： 1234567title: 文章名date: 2017-10-31 20:38:17 //发表日期updated: 2017-10-31 21:58:03 //更新日期categories: Life //文章分类tags: [tag1,tag2] //文章标签，多标签时使用英文逗号隔开photos: //如果使用Fancybox（文章头部展示图片），如此设置 //注意冒号后面有空格 开启文章搜索摘要居中显示图片 &lt;!-- more --&gt; 文章摘要部分在要显示的文字末尾添加如下代码实现文章在主页的折叠显示。 1&lt;!-- more --&gt; 文章加密12# 安装插件npm install --save hexo-blog-encrypt 修改文章信息头如下： 12345678910title: Hello Worldtags:- 加密文章tagdate: 2020-03-13 21:12:21password: muyiioabstract: 这里有东西被加密了，需要输入密码查看哦。message: 您好，这里需要密码。wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。--- 对博客根目录_config添加如下字段： 12345678910# 安全encrypt: # hexo-blog-encrypt abstract: 这里有东西被加密了，需要输入密码查看哦。 message: 您好, 这里需要密码. tags: - &#123;name: tagName, password: 密码A&#125; - &#123;name: tagName, password: 密码B&#125; template: &lt;div id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;&#123;&#123;hbeWrongPassMessage&#125;&#125;&quot; data-whm=&quot;&#123;&#123;hbeWrongHashMessage&#125;&#125;&quot;&gt;&lt;div class=&quot;hbe-input-container&quot;&gt;&lt;input type=&quot;password&quot; id=&quot;hbePass&quot; placeholder=&quot;&#123;&#123;hbeMessage&#125;&#125;&quot; /&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div class=&quot;bottom-line&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;&#123;&#123;hbeHmacDigest&#125;&#125;&quot;&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt; wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试. wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容. 引用 Hexo与MarkDown_hexo markdown_小老弟偶的博客-CSDN博客 对 Hexo 博客文章进行加密","categories":[{"name":"速查手册","slug":"速查手册","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"生活不会像你想象的那么糟","slug":"02 【生活】读书笔记/《一生》莫泊桑","date":"2023-04-13T03:45:01.000Z","updated":"2024-09-10T10:47:17.603Z","comments":true,"path":"2023/04/13/02 【生活】读书笔记/《一生》莫泊桑/","link":"","permalink":"http://example.com/2023/04/13/02%20%E3%80%90%E7%94%9F%E6%B4%BB%E3%80%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E4%B8%80%E7%94%9F%E3%80%8B%E8%8E%AB%E6%B3%8A%E6%A1%91/","excerpt":"生活不可能像你想象得那么好，但也不会像你想象得那么糟","text":"生活不可能像你想象得那么好，但也不会像你想象得那么糟 生活不可能像你想象得那么好，但也不会像你想象得那么糟。我觉得人的脆弱和坚强都超乎自己的想象。有时，我可能脆弱得一句话就泪流满面，有时，也发现自己咬着牙走了很长的路。 这段话出自法国小说家·莫泊桑长篇小说《一生》","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"C++程序命名规范","slug":"03 【编程学习】/C++程序命名规范","date":"2023-04-12T12:39:43.000Z","updated":"2024-09-22T15:33:49.686Z","comments":true,"path":"2023/04/12/03 【编程学习】/C++程序命名规范/","link":"","permalink":"http://example.com/2023/04/12/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/C++%E7%A8%8B%E5%BA%8F%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/","excerpt":"程序中最重要的一致性规则是命名管理。 命名的风格能让我们在不需要去查找类型声明的条件下快速地了解某个名字代表的含义： 类型，变量，函数，常量，宏等等。","text":"程序中最重要的一致性规则是命名管理。 命名的风格能让我们在不需要去查找类型声明的条件下快速地了解某个名字代表的含义： 类型，变量，函数，常量，宏等等。 C++程序命名规定 #学习笔记 程序中最重要的一致性规则是命名管理。 命名的风格能让我们在不需要去查找类型声明的条件下快速地了解某个名字代表的含义： 类型，变量，函数，常量，宏等等。 通用总则：函数命名，变量命名，文件命名要有描述性； 少用缩写。 函数命名大驼峰，不用下划线。 变量命名全小写，单词间下划线连接，类的成员变量以下划线结尾_ 1 文件命名文件名要全部小写， 可以包含下划线（_）或者连字符（_），按照项目的约定，如果没有约定，最好是“_”。 2. 类型命名总述 类型名称的每个单词首字母均大写, 不包含下划线: MyExcitingClass, MyExcitingEnum. 所有类型命名 —— 类, 结构体, 类型定义 (typedef), 枚举, 类型模板参数 —— 均使用相同约定, 即以大写字母开始, 每个单词首字母均大写, 不包含下划线. 例如: 12345678910111213// 类和结构体class UrlTable &#123; ...class UrlTableTester &#123; ...struct UrlTableProperties &#123; ...// 类型定义typedef hash_map&lt;UrlTableProperties *, string&gt; PropertiesMap;// using 别名using PropertiesMap = hash_map&lt;UrlTableProperties *, string&gt;;// 枚举enum UrlTableErrors &#123; ... 3. 变量命名总述 变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量以下划线结尾, 但结构体的就不用, 如: a_local_variable, a_struct_data_member, a_class_data_member_. 4. 常量命名总述 声明为 constexpr 或 const 的变量, 或在程序运行期间其值始终保持不变的, 命名时以 “k” 开头, 大小写混合. 例如: 1const int kDaysInAWeek = 7; 5. 函数命名一般来说, 函数名的每个单词首字母大写 (即 “驼峰变量名” 或 “帕斯卡变量名”), 没有下划线. 对于首字母缩写的单词, 更倾向于将它们视作一个单词进行首字母大写 (例如, 写作 StartRpc() 而非 StartRPC()). 6. 命名空间命名总述 命名空间以小写字母命名. 最高级命名空间的名字取决于项目名称. 要注意避免嵌套命名空间的名字之间和常见的顶级命名空间的名字之间发生冲突. 7. 枚举命名总述 枚举的命名应当和 常量 或 宏 一致: kEnumName 或是 ENUM_NAME. 8. 宏命名总述 你并不打算 使用宏, 对吧? 如果你一定要用, 像这样命名: MY_MACRO_THAT_SCARES_SMALL_CHILDREN. 引用：C++ 风格指南 - 内容目录 — Google 开源项目风格指南 (zh-google-styleguide.readthedocs.io)","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"books","slug":"books","permalink":"http://example.com/tags/books/"}]},{"title":"机器视觉之【工业相机】基础知识","slug":"01 【工作】Logbook/机器视觉之【工业相机】基础知识","date":"2022-09-22T13:44:11.075Z","updated":"2024-09-22T15:30:26.251Z","comments":true,"path":"2022/09/22/01 【工作】Logbook/机器视觉之【工业相机】基础知识/","link":"","permalink":"http://example.com/2022/09/22/01%20%E3%80%90%E5%B7%A5%E4%BD%9C%E3%80%91Logbook/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%B9%8B%E3%80%90%E5%B7%A5%E4%B8%9A%E7%9B%B8%E6%9C%BA%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"机器视觉之【工业相机】基础知识什么是工业相机？工业相机是专门为工业领域中的自动化检测、生产线监控和质量控制等任务设计的摄像设备。与消费级相机不同，工业相机注重的是图像的精确性、稳定性和可靠性，通常需要在恶劣环境中长时间运行，并能够处理高速或高精度的图像采集任务。 相机分类 按照输出色彩可以分为黑白相机、彩色相机； 按照输出信号可以分为模拟相机、数字相机； 按照芯片类型可以分为CCD相机、CMOS相机； 按照传感器的结构特性可以分为线阵相机、面阵相机； 基本概念靶面：感光元件的大小，一般以英寸为单位表示，该尺寸是对角长度；常见的靶面尺寸有2&#x2F;3，1&#x2F;1.8，1&#x2F;2，1&#x2F;3，1&#x2F;4等。 分辨率：相机采集到的图像的横向分辨率和纵向分辨率，常见的数字相机分辨率有30万( 640x480 ) 、130万(1280x960)、200万(1600x1200)、500万像素(2592x1944)； 像元尺寸：单个像元的大小，一般为靶面&#x2F;分辨率； 帧率：每秒钟最多能采集到的图像数量。 曝光时间：表示CCD 或CMOS 感光元件中蓄积电荷的时间。曝光时间越短，进光量越少；曝光时间越长，进光量越多。最大曝光时间由帧率决定。 增益：所谓增益，是指将图像信号进行电子增幅的过程。 待补充 3D相机 智能相机 扩展 工业相机的相关知识点 - 知乎 (zhihu.com)","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[]},{"title":"机器视觉之【相机镜头】基础知识","slug":"01 【工作】Logbook/机器视觉之【相机镜头】基础知识","date":"2022-09-22T13:43:57.481Z","updated":"2024-10-14T13:35:34.087Z","comments":true,"path":"2022/09/22/01 【工作】Logbook/机器视觉之【相机镜头】基础知识/","link":"","permalink":"http://example.com/2022/09/22/01%20%E3%80%90%E5%B7%A5%E4%BD%9C%E3%80%91Logbook/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%B9%8B%E3%80%90%E7%9B%B8%E6%9C%BA%E9%95%9C%E5%A4%B4%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"机器视觉之【相机镜头】基础知识光学镜头 焦距 Focal Length光学系统主点到焦点的距离。 景深 Depth of field, DOF是指在摄影机镜头或其他成像器前沿能够取得清晰图像的成像所测定的被摄物体前后距离范围。 孔径角：物镜光轴上的物体点与物镜前透镜的有效直接直径所形成的角度。数值孔径 NA: 物镜前透镜与被检物体之间介质的折射率n和孔径角θ的正弦的乘积。 分辨率 Resolution分辨率定位为: 能被分辨开来的两个物点之间的最小距离，称为镜头的物方分辨率，记为Resolution(物) 单位μm只有镜头分辨率和相机分辨率匹配，才能得到最佳成像效果。 像方分辨率 &#x3D; 2 * 像元尺寸时，说明此时镜头分辨率与相机完全匹配。 畸变 Distortion畸变也称失真，是由于光阑球差的影响，不同视场的主光线通过光学系统后与高斯像面的交点高度不等于理想像高，二者之差就是畸变。畸变通常有两种计算方法：光学畸变和TV失真。Optical distortion &#x3D; Δy&#x2F;y * 100 [%] MTF 远心镜头与远心度当人眼观察同一个物体，近距离时，感觉物体比较大，远距离时，感觉物体比较小，这种现象叫做透视误差.用远心镜头来消除透视误差。 视场 FOV视场也称为视野，是指能被视觉系统观察到的物方可视范围。 放大倍率机器视觉行业里提到的镜头光学放大倍率通常是指垂轴放大倍率，即像和物的大小之比。 工作距离及物像距离工作距离(WD)是指镜头最下端机械面到物体的距离。物像距离(O&#x2F;I)是指物平面到相机芯片间的距离。物像距离&#x3D;工作距离+镜头本体长度+法兰距。 法兰距离和镜头接口所谓法兰距离，就是指相机机身与镜头接触的机械面到相机芯片之间的距离。镜头的后截距需和相机的法兰距离对应，才能让光线聚焦在相机芯片上。 F NumberF Number 称为F数，也常记为Fno.或F&#x2F;#，表示镜头通光能力的参数。 Fno.数值越小，镜头通光能力越强，即通俗的称为“越亮”。 镜头像圈像圈（image circle）是指入射光线通过镜头后，在焦平面上呈现出的圆形的明亮清晰的影像幅面，也称像面大小。镜头像圈由镜头光学结构决定，一旦设计完成，其对应的像圈就确定了。镜头与相机搭配时，必须使镜头的像圈直径≥相机靶面的对角线长度（如右图所示）。否则，相机靶面的四角会形成暗区（如左图所示）从而影响成像质量，这种现象称为渐晕。 如何对焦使图像清晰常见的镜头有定焦镜头和定倍镜头。 定倍镜头的工作距离和光圈一般是固定的，调整图像清晰度，主要是靠调整镜头与物体的工作距离。定焦镜头调整清晰图像的过程： 将镜头光圈调到最大，即F值最小。 降低曝光时间或光源亮度，使图像亮度合适。既不过暗也不过曝。 调整镜头的对焦环，使图像清晰成像。 将镜头光圈调整到合适的位置。 重新调整曝光时间或光源亮度，使图像亮度合适。 引用 https://www.cnblogs.com/cvhao/p/15903581.html","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[]},{"title":"机器视觉之【光源选型】基础知识","slug":"01 【工作】Logbook/机器视觉之 【光源选型】基础知识","date":"2022-09-22T13:43:28.642Z","updated":"2024-09-22T15:21:13.164Z","comments":true,"path":"2022/09/22/01 【工作】Logbook/机器视觉之 【光源选型】基础知识/","link":"","permalink":"http://example.com/2022/09/22/01%20%E3%80%90%E5%B7%A5%E4%BD%9C%E3%80%91Logbook/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%B9%8B%20%E3%80%90%E5%85%89%E6%BA%90%E9%80%89%E5%9E%8B%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"机器视觉之【光源】基础知识光源的作用 照亮目标，提高亮度； 凸显出缺陷和背景的差异，提高图像对比度，形成有利于图像处理的效果； 克服环境光干扰，保证图像稳定性； 光源分类常见的光源类型有LED、荧光灯、卤素灯。 实际应用中，由于 LED 光源的优势，形状设计灵活，使用寿命长，响应速度快，综 合性价比高，单色性好，颜色多样化的特点，在机器视觉中应用最广泛。平时所说的光 源，非特别强调，都是指 LED 光源。 好的图像效果 均匀性 幅图像的背景的灰度值不能有过大的差异；图像不均匀影响处理效果。右边图片 整个背景灰度值相近，处理起来相对左边要简单的多。 对比度 对比度好：图像中需要提取的特征和背景的灰度值差值要大（黑白相机） 边缘过度像素 放大目标与背景的边缘部分，过度像素不超过 3 个，图像效果比较稳定，超过 3 个以上，定位结果的稳定性会受到影响。 常见的LED光源类型 环形高角度光源 环形低角度光源 条形光源 点光源 同轴光源 背光光源 球积分光源 AOI专用光源 光源选型要领条形光源： 条光照射宽度最好大于检测的距离，否则可能会照射距离远造成亮度 差，或者是距离近而辐射面积不够。 条光长度能够照明所需打亮的位置即可，无需太长造成安装不便，同 时也增加成本，一般情况下，光源的安装高度会影响到所选用条光的 长度，高度越高，光源长度要求越长，否则图像量测亮度要比中间暗。 如果照明目标是高反光物体，最好加上漫射板，如果是黑色等暗色不 反光产品，也可以拆掉漫射板以提高亮度。 环形光 1） 了解光源安装距离，过滤掉某些角度光源；例如要求光源安装尺寸高，就可以过滤掉大角度光源，选择用小角度光源，同样，安装高度越 高，要求光源的直径越大 2）目标面积小，且主要特性在表面中间，可选择小尺寸 0 角度或小角度 光源。 3）目标需要表现的特征如果在边缘，可选择 90 度角环光，或大尺寸高 角度环形光 4）检测表面划伤，可选择 90 度角环光，尽量选择波长短的光源。 条形组合光 1）条形组合光在选择时，不一定要按照资料上的型号来选型，因为被测 的目标形状、大小各不一样，所以可以按照目标尺寸来选择不同的条形 光源进行组合。 2）组合光在选择时，一定要考虑光源的安装高度，再根据四边被测特征 点的长度宽度选择相对应的条形光进行组合。 背光源&#x2F;平行背光源 1） 选择背光源时，根据物体的大小选择合适大小的背光源，以免增加成 本造成浪费 2） 背光源四周由于有外壳遮挡，因此其亮度会低于中间部位，选择背光 源时，尽量不要使目标正好位于背光源边缘。 3） 背光源一般在检测轮廓时，可以尽量使用波长短的光源，波长短的光 源其衍射性弱，图像边缘不容易产生重影，对比度更高 4） 背光源与目标之间的距离可以通过调整来达到最佳的效果，并非离 得越近效果越好，也非越远越好。 5） 检测液位可以将背光源侧立使用 6） 圆轴类的产品，螺旋状的产品尽量使用平行背光源。 同轴光 1） 选择同轴光时主要看其发光面积，根据目标的大小来选择合适发光 面积的同轴光 2） 同轴光的发光面积最好比目标尺寸大 1.5~2 倍左右，因为同轴光的光 路设计是让光路通过一片 45 度半反半透镜改变，光源靠近灯板的地 方会比远离灯板的亮度高，因此尽量选择大一点的发光面避免光线 左右不均匀。 3） 同轴光在安装时尽量不要离目标太高，越高，要求选用的同轴光越大， 才能保证均匀性。 平行同轴光 1） 平行同轴光光路设计独特，主要适用于检测各种划痕 2） 平行同轴光与同轴光表现的特点不一样，不能替代同轴光使用 3） 平行同轴光检测划伤之类的产品，尽量不要选择波长长的光源。 其他光源 1） 了解特征点面积大小，选择合适尺寸的光源 2） 了解产品特性，选择不同类型的光源 3） 了解产品的材质，选择不同颜色的光源 4） 了解安装空间及其他可能会产生障碍的情况，选择合适的光源。 扩展 技巧篇 | 机器视觉光源最佳选型攻略（附案例） - 知乎 (zhihu.com)","categories":[{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"tags":[]},{"title":"C++ 提高编程","slug":"03 【编程学习】/C++提高编程","date":"2019-02-13T01:05:24.146Z","updated":"2024-09-22T15:41:17.526Z","comments":true,"path":"2019/02/13/03 【编程学习】/C++提高编程/","link":"","permalink":"http://example.com/2019/02/13/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/","excerpt":"","text":"C++提高编程 本阶段主要针对C++&#x3D;&#x3D;泛型编程&#x3D;&#x3D;和&#x3D;&#x3D;STL&#x3D;&#x3D;技术做详细讲解，探讨C++更深层的使用 1 模板1.1 模板的概念模板就是建立通用的模具，大大提高复用性 例如生活中的模板 一寸照片模板： PPT模板： 模板的特点： 模板不可以直接使用，它只是一个框架 模板的通用并不是万能的 1.2 函数模板 C++另一种编程思想称为 &#x3D;&#x3D;泛型编程&#x3D;&#x3D; ，主要利用的技术就是模板 C++提供两种模板机制:函数模板和类模板 1.2.1 函数模板语法函数模板作用： 建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表。 语法： 12template&lt;typename T&gt;函数声明或定义 解释： template — 声明创建模板 typename — 表面其后面的符号是一种数据类型，可以用class代替 T — 通用的数据类型，名称可以替换，通常为大写字母 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//交换整型函数void swapInt(int&amp; a, int&amp; b) &#123; int temp = a; a = b; b = temp;&#125;//交换浮点型函数void swapDouble(double&amp; a, double&amp; b) &#123; double temp = a; a = b; b = temp;&#125;//利用模板提供通用的交换函数template&lt;typename T&gt;void mySwap(T&amp; a, T&amp; b)&#123; T temp = a; a = b; b = temp;&#125;void test01()&#123; int a = 10; int b = 20; //swapInt(a, b); //利用模板实现交换 //1、自动类型推导 mySwap(a, b); //2、显示指定类型 mySwap&lt;int&gt;(a, b); cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 函数模板利用关键字 template 使用函数模板有两种方式：自动类型推导、显示指定类型 模板的目的是为了提高复用性，将类型参数化 1.2.2 函数模板注意事项注意事项： 自动类型推导，必须推导出一致的数据类型T,才可以使用 模板必须要确定出T的数据类型，才可以使用 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344//利用模板提供通用的交换函数template&lt;class T&gt;void mySwap(T&amp; a, T&amp; b)&#123; T temp = a; a = b; b = temp;&#125;// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用void test01()&#123; int a = 10; int b = 20; char c = &#x27;c&#x27;; mySwap(a, b); // 正确，可以推导出一致的T //mySwap(a, c); // 错误，推导不出一致的T类型&#125;// 2、模板必须要确定出T的数据类型，才可以使用template&lt;class T&gt;void func()&#123; cout &lt;&lt; &quot;func 调用&quot; &lt;&lt; endl;&#125;void test02()&#123; //func(); //错误，模板不能独立使用，必须确定出T的类型 func&lt;int&gt;(); //利用显示指定类型的方式，给T一个类型，才可以使用该模板&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型 1.2.3 函数模板案例案例描述： 利用函数模板封装一个排序的函数，可以对不同数据类型数组进行排序 排序规则从大到小，排序算法为选择排序 分别利用char数组和int数组进行测试 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465//交换的函数模板template&lt;typename T&gt;void mySwap(T &amp;a, T&amp;b)&#123; T temp = a; a = b; b = temp;&#125;template&lt;class T&gt; // 也可以替换成typename//利用选择排序，进行对数组从大到小的排序void mySort(T arr[], int len)&#123; for (int i = 0; i &lt; len; i++) &#123; int max = i; //最大数的下标 for (int j = i + 1; j &lt; len; j++) &#123; if (arr[max] &lt; arr[j]) &#123; max = j; &#125; &#125; if (max != i) //如果最大数的下标不是i，交换两者 &#123; mySwap(arr[max], arr[i]); &#125; &#125;&#125;template&lt;typename T&gt;void printArray(T arr[], int len) &#123; for (int i = 0; i &lt; len; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; //测试char数组 char charArr[] = &quot;bdcfeagh&quot;; int num = sizeof(charArr) / sizeof(char); mySort(charArr, num); printArray(charArr, num);&#125;void test02()&#123; //测试int数组 int intArr[] = &#123; 7, 5, 8, 1, 3, 9, 2, 4, 6 &#125;; int num = sizeof(intArr) / sizeof(int); mySort(intArr, num); printArray(intArr, num);&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：模板可以提高代码复用，需要熟练掌握 1.2.4 普通函数与函数模板的区别普通函数与函数模板区别： 普通函数调用时可以发生自动类型转换（隐式类型转换） 函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换 如果利用显示指定类型的方式，可以发生隐式类型转换 示例： 1234567891011121314151617181920212223242526272829303132333435//普通函数int myAdd01(int a, int b)&#123; return a + b;&#125;//函数模板template&lt;class T&gt;T myAdd02(T a, T b) &#123; return a + b;&#125;//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换void test01()&#123; int a = 10; int b = 20; char c = &#x27;c&#x27;; cout &lt;&lt; myAdd01(a, c) &lt;&lt; endl; //正确，将char类型的&#x27;c&#x27;隐式转换为int类型 &#x27;c&#x27; 对应 ASCII码 99 //myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换 myAdd02&lt;int&gt;(a, c); //正确，如果用显示指定类型，可以发生隐式类型转换&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T 1.2.5 普通函数与函数模板的调用规则调用规则如下： 如果函数模板和普通函数都可以实现，优先调用普通函数 可以通过空模板参数列表来强制调用函数模板 函数模板也可以发生重载 如果函数模板可以产生更好的匹配,优先调用函数模板 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//普通函数与函数模板调用规则void myPrint(int a, int b)&#123; cout &lt;&lt; &quot;调用的普通函数&quot; &lt;&lt; endl;&#125;template&lt;typename T&gt;void myPrint(T a, T b) &#123; cout &lt;&lt; &quot;调用的模板&quot; &lt;&lt; endl;&#125;template&lt;typename T&gt;void myPrint(T a, T b, T c) &#123; cout &lt;&lt; &quot;调用重载的模板&quot; &lt;&lt; endl; &#125;void test01()&#123; //1、如果函数模板和普通函数都可以实现，优先调用普通函数 // 注意 如果告诉编译器 普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到 int a = 10; int b = 20; myPrint(a, b); //调用普通函数 //2、可以通过空模板参数列表来强制调用函数模板 myPrint&lt;&gt;(a, b); //调用函数模板 //3、函数模板也可以发生重载 int c = 30; myPrint(a, b, c); //调用重载的函数模板 //4、 如果函数模板可以产生更好的匹配,优先调用函数模板 char c1 = &#x27;a&#x27;; char c2 = &#x27;b&#x27;; myPrint(c1, c2); //调用函数模板&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性 1.2.6 模板的局限性局限性： 模板的通用性并不是万能的 例如： 12345template&lt;class T&gt;void f(T a, T b)&#123; a = b; &#125; 在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了 再例如： 12345template&lt;class T&gt;void f(T a, T b)&#123; if(a &gt; b) &#123; ... &#125; &#125; 在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行 因此C++为了解决这种问题，提供模板的重载，可以为这些特定的类型提供具体化的模板 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;iostream&gt;using namespace std;#include &lt;string&gt;class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; string m_Name; int m_Age;&#125;;//普通函数模板template&lt;class T&gt;bool myCompare(T&amp; a, T&amp; b)&#123; if (a == b) &#123; return true; &#125; else &#123; return false; &#125;&#125;//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型//具体化优先于常规模板template&lt;&gt; bool myCompare(Person &amp;p1, Person &amp;p2)&#123; if ( p1.m_Name == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age) &#123; return true; &#125; else &#123; return false; &#125;&#125;void test01()&#123; int a = 10; int b = 20; //内置数据类型可以直接使用通用的函数模板 bool ret = myCompare(a, b); if (ret) &#123; cout &lt;&lt; &quot;a == b &quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;a != b &quot; &lt;&lt; endl; &#125;&#125;void test02()&#123; Person p1(&quot;Tom&quot;, 10); Person p2(&quot;Tom&quot;, 10); //自定义数据类型，不会调用普通的函数模板 //可以创建具体化的Person数据类型的模板，用于特殊处理这个类型 bool ret = myCompare(p1, p2); if (ret) &#123; cout &lt;&lt; &quot;p1 == p2 &quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;p1 != p2 &quot; &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 利用具体化的模板，可以解决自定义类型的通用化 学习模板并不是为了写模板，而是在STL能够运用系统提供的模板 1.3 类模板1.3.1 类模板语法类模板作用： 建立一个通用类，类中的成员 数据类型可以不具体制定，用一个虚拟的类型来代表。 语法： 12template&lt;typename T&gt;类 解释： template — 声明创建模板 typename — 表面其后面的符号是一种数据类型，可以用class代替 T — 通用的数据类型，名称可以替换，通常为大写字母 示例： 1234567891011121314151617181920212223242526272829303132333435#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType&gt; class Person&#123;public: Person(NameType name, AgeType age) &#123; this-&gt;mName = name; this-&gt;mAge = age; &#125; void showPerson() &#123; cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl; &#125;public: NameType mName; AgeType mAge;&#125;;void test01()&#123; // 指定NameType 为string类型，AgeType 为 int类型 Person&lt;string, int&gt;P1(&quot;孙悟空&quot;, 999); P1.showPerson();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板 1.3.2 类模板与函数模板区别类模板与函数模板区别主要有两点： 类模板没有自动类型推导的使用方式 类模板在模板参数列表中可以有默认参数 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType = int&gt; class Person&#123;public: Person(NameType name, AgeType age) &#123; this-&gt;mName = name; this-&gt;mAge = age; &#125; void showPerson() &#123; cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl; &#125;public: NameType mName; AgeType mAge;&#125;;//1、类模板没有自动类型推导的使用方式void test01()&#123; // Person p(&quot;孙悟空&quot;, 1000); // 错误 类模板使用时候，不可以用自动类型推导 Person &lt;string ,int&gt;p(&quot;孙悟空&quot;, 1000); //必须使用显示指定类型的方式，使用类模板 p.showPerson();&#125;//2、类模板在模板参数列表中可以有默认参数void test02()&#123; Person &lt;string&gt; p(&quot;猪八戒&quot;, 999); //类模板中的模板参数列表 可以指定默认参数 p.showPerson();&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 类模板使用只能用显示指定类型方式 类模板中的模板参数列表可以有默认参数 1.3.3 类模板中成员函数创建时机类模板中成员函数和普通类中成员函数创建时机是有区别的： 普通类中的成员函数一开始就可以创建 类模板中的成员函数在调用时才创建 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Person1&#123;public: void showPerson1() &#123; cout &lt;&lt; &quot;Person1 show&quot; &lt;&lt; endl; &#125;&#125;;class Person2&#123;public: void showPerson2() &#123; cout &lt;&lt; &quot;Person2 show&quot; &lt;&lt; endl; &#125;&#125;;template&lt;class T&gt;class MyClass&#123;public: T obj; //类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成 void fun1() &#123; obj.showPerson1(); &#125; void fun2() &#123; obj.showPerson2(); &#125;&#125;;void test01()&#123; MyClass&lt;Person1&gt; m; m.fun1(); //m.fun2();//编译会出错，说明函数调用才会去创建成员函数&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建 1.3.4 类模板对象做函数参数学习目标： 类模板实例化出的对象，向函数传参的方式 一共有三种传入方式： 指定传入的类型 — 直接显示对象的数据类型 参数模板化 — 将对象中的参数变为模板进行传递 整个类模板化 — 将这个对象类型 模板化进行传递 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;string&gt;//类模板template&lt;class NameType, class AgeType = int&gt; class Person&#123;public: Person(NameType name, AgeType age) &#123; this-&gt;mName = name; this-&gt;mAge = age; &#125; void showPerson() &#123; cout &lt;&lt; &quot;name: &quot; &lt;&lt; this-&gt;mName &lt;&lt; &quot; age: &quot; &lt;&lt; this-&gt;mAge &lt;&lt; endl; &#125;public: NameType mName; AgeType mAge;&#125;;//1、指定传入的类型void printPerson1(Person&lt;string, int&gt; &amp;p) &#123; p.showPerson();&#125;void test01()&#123; Person &lt;string, int &gt;p(&quot;孙悟空&quot;, 100); printPerson1(p);&#125;//2、参数模板化template &lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt;&amp;p)&#123; p.showPerson(); cout &lt;&lt; &quot;T1的类型为： &quot; &lt;&lt; typeid(T1).name() &lt;&lt; endl; cout &lt;&lt; &quot;T2的类型为： &quot; &lt;&lt; typeid(T2).name() &lt;&lt; endl;&#125;void test02()&#123; Person &lt;string, int &gt;p(&quot;猪八戒&quot;, 90); printPerson2(p);&#125;//3、整个类模板化template&lt;class T&gt;void printPerson3(T &amp; p)&#123; cout &lt;&lt; &quot;T的类型为： &quot; &lt;&lt; typeid(T).name() &lt;&lt; endl; p.showPerson();&#125;void test03()&#123; Person &lt;string, int &gt;p(&quot;唐僧&quot;, 30); printPerson3(p);&#125;int main() &#123; test01(); test02(); test03(); system(&quot;pause&quot;); return 0;&#125; 总结： 通过类模板创建的对象，可以有三种方式向函数中进行传参 使用比较广泛是第一种：指定传入的类型 1.3.5 类模板与继承当类模板碰到继承时，需要注意一下几点： 当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型 如果不指定，编译器无法给子类分配内存 如果想灵活指定出父类中T的类型，子类也需变为类模板 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243template&lt;class T&gt;class Base&#123; T m;&#125;;//class Son:public Base //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承class Son :public Base&lt;int&gt; //必须指定一个类型&#123;&#125;;void test01()&#123; Son c;&#125;//类模板继承类模板 ,可以用T2指定父类中的T类型template&lt;class T1, class T2&gt;class Son2 :public Base&lt;T2&gt;&#123;public: Son2() &#123; cout &lt;&lt; typeid(T1).name() &lt;&lt; endl; cout &lt;&lt; typeid(T2).name() &lt;&lt; endl; &#125;&#125;;void test02()&#123; Son2&lt;int, char&gt; child1;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：如果父类是类模板，子类需要指定出父类中T的数据类型 1.3.6 类模板成员函数类外实现学习目标：能够掌握类模板中的成员函数类外实现 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;string&gt;//类模板中成员函数类外实现template&lt;class T1, class T2&gt;class Person &#123;public: //成员函数类内声明 Person(T1 name, T2 age); void showPerson();public: T1 m_Name; T2 m_Age;&#125;;//构造函数 类外实现template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age;&#125;//成员函数 类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson() &#123; cout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;&#125;void test01()&#123; Person&lt;string, int&gt; p(&quot;Tom&quot;, 20); p.showPerson();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：类模板中成员函数类外实现时，需要加上模板参数列表 1.3.7 类模板分文件编写学习目标： 掌握类模板成员函数分文件编写产生的问题以及解决方式 问题： 类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到 解决： 解决方式1：直接包含.cpp源文件 解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制 示例： person.hpp中代码： 123456789101112131415161718192021222324252627#pragma once#include &lt;iostream&gt;using namespace std;#include &lt;string&gt;template&lt;class T1, class T2&gt;class Person &#123;public: Person(T1 name, T2 age); void showPerson();public: T1 m_Name; T2 m_Age;&#125;;//构造函数 类外实现template&lt;class T1, class T2&gt;Person&lt;T1, T2&gt;::Person(T1 name, T2 age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age;&#125;//成员函数 类外实现template&lt;class T1, class T2&gt;void Person&lt;T1, T2&gt;::showPerson() &#123; cout &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;&#125; 类模板分文件编写.cpp中代码 12345678910111213141516171819202122#include&lt;iostream&gt;using namespace std;//#include &quot;person.h&quot;#include &quot;person.cpp&quot; //解决方式1，包含cpp源文件//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp#include &quot;person.hpp&quot;void test01()&#123; Person&lt;string, int&gt; p(&quot;Tom&quot;, 10); p.showPerson();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp 1.3.8 类模板与友元学习目标： 掌握类模板配合友元函数的类内和类外实现 全局函数类内实现 - 直接在类内声明友元即可 全局函数类外实现 - 需要提前让编译器知道全局函数的存在 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;string&gt;//2、全局函数配合友元 类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元template&lt;class T1, class T2&gt; class Person;//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); template&lt;class T1, class T2&gt;void printPerson2(Person&lt;T1, T2&gt; &amp; p)&#123; cout &lt;&lt; &quot;类外实现 ---- 姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl;&#125;template&lt;class T1, class T2&gt;class Person&#123; //1、全局函数配合友元 类内实现 friend void printPerson(Person&lt;T1, T2&gt; &amp; p) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl; &#125; //全局函数配合友元 类外实现 friend void printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);public: Person(T1 name, T2 age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125;private: T1 m_Name; T2 m_Age;&#125;;//1、全局函数在类内实现void test01()&#123; Person &lt;string, int &gt;p(&quot;Tom&quot;, 20); printPerson(p);&#125;//2、全局函数在类外实现void test02()&#123; Person &lt;string, int &gt;p(&quot;Jerry&quot;, 30); printPerson2(p);&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别 1.3.9 类模板案例案例描述: 实现一个通用的数组类，要求如下： 可以对内置数据类型以及自定义数据类型的数据进行存储 将数组中的数据存储到堆区 构造函数中可以传入数组的容量 提供对应的拷贝构造函数以及operator&#x3D;防止浅拷贝问题 提供尾插法和尾删法对数组中的数据进行增加和删除 可以通过下标的方式访问数组中的元素 可以获取数组中当前元素个数和数组的容量 示例： myArray.hpp中代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#pragma once#include &lt;iostream&gt;using namespace std;template&lt;class T&gt;class MyArray&#123;public: //构造函数 MyArray(int capacity) &#123; this-&gt;m_Capacity = capacity; this-&gt;m_Size = 0; pAddress = new T[this-&gt;m_Capacity]; &#125; //拷贝构造 MyArray(const MyArray &amp; arr) &#123; this-&gt;m_Capacity = arr.m_Capacity; this-&gt;m_Size = arr.m_Size; this-&gt;pAddress = new T[this-&gt;m_Capacity]; for (int i = 0; i &lt; this-&gt;m_Size; i++) &#123; //如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值， // 普通类型可以直接= 但是指针类型需要深拷贝 this-&gt;pAddress[i] = arr.pAddress[i]; &#125; &#125; //重载= 操作符 防止浅拷贝问题 MyArray&amp; operator=(const MyArray&amp; myarray) &#123; if (this-&gt;pAddress != NULL) &#123; delete[] this-&gt;pAddress; this-&gt;m_Capacity = 0; this-&gt;m_Size = 0; &#125; this-&gt;m_Capacity = myarray.m_Capacity; this-&gt;m_Size = myarray.m_Size; this-&gt;pAddress = new T[this-&gt;m_Capacity]; for (int i = 0; i &lt; this-&gt;m_Size; i++) &#123; this-&gt;pAddress[i] = myarray[i]; &#125; return *this; &#125; //重载[] 操作符 arr[0] T&amp; operator [](int index) &#123; return this-&gt;pAddress[index]; //不考虑越界，用户自己去处理 &#125; //尾插法 void Push_back(const T &amp; val) &#123; if (this-&gt;m_Capacity == this-&gt;m_Size) &#123; return; &#125; this-&gt;pAddress[this-&gt;m_Size] = val; this-&gt;m_Size++; &#125; //尾删法 void Pop_back() &#123; if (this-&gt;m_Size == 0) &#123; return; &#125; this-&gt;m_Size--; &#125; //获取数组容量 int getCapacity() &#123; return this-&gt;m_Capacity; &#125; //获取数组大小 int getSize() &#123; return this-&gt;m_Size; &#125; //析构 ~MyArray() &#123; if (this-&gt;pAddress != NULL) &#123; delete[] this-&gt;pAddress; this-&gt;pAddress = NULL; this-&gt;m_Capacity = 0; this-&gt;m_Size = 0; &#125; &#125;private: T * pAddress; //指向一个堆空间，这个空间存储真正的数据 int m_Capacity; //容量 int m_Size; // 大小&#125;; 类模板案例—数组类封装.cpp中 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &quot;myArray.hpp&quot;#include &lt;string&gt;void printIntArray(MyArray&lt;int&gt;&amp; arr) &#123; for (int i = 0; i &lt; arr.getSize(); i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//测试内置数据类型void test01()&#123; MyArray&lt;int&gt; array1(10); for (int i = 0; i &lt; 10; i++) &#123; array1.Push_back(i); &#125; cout &lt;&lt; &quot;array1打印输出：&quot; &lt;&lt; endl; printIntArray(array1); cout &lt;&lt; &quot;array1的大小：&quot; &lt;&lt; array1.getSize() &lt;&lt; endl; cout &lt;&lt; &quot;array1的容量：&quot; &lt;&lt; array1.getCapacity() &lt;&lt; endl; cout &lt;&lt; &quot;--------------------------&quot; &lt;&lt; endl; MyArray&lt;int&gt; array2(array1); array2.Pop_back(); cout &lt;&lt; &quot;array2打印输出：&quot; &lt;&lt; endl; printIntArray(array2); cout &lt;&lt; &quot;array2的大小：&quot; &lt;&lt; array2.getSize() &lt;&lt; endl; cout &lt;&lt; &quot;array2的容量：&quot; &lt;&lt; array2.getCapacity() &lt;&lt; endl;&#125;//测试自定义数据类型class Person &#123;public: Person() &#123;&#125; Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125;public: string m_Name; int m_Age;&#125;;void printPersonArray(MyArray&lt;Person&gt;&amp; personArr)&#123; for (int i = 0; i &lt; personArr.getSize(); i++) &#123; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; personArr[i].m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; personArr[i].m_Age &lt;&lt; endl; &#125;&#125;void test02()&#123; //创建数组 MyArray&lt;Person&gt; pArray(10); Person p1(&quot;孙悟空&quot;, 30); Person p2(&quot;韩信&quot;, 20); Person p3(&quot;妲己&quot;, 18); Person p4(&quot;王昭君&quot;, 15); Person p5(&quot;赵云&quot;, 24); //插入数据 pArray.Push_back(p1); pArray.Push_back(p2); pArray.Push_back(p3); pArray.Push_back(p4); pArray.Push_back(p5); printPersonArray(pArray); cout &lt;&lt; &quot;pArray的大小：&quot; &lt;&lt; pArray.getSize() &lt;&lt; endl; cout &lt;&lt; &quot;pArray的容量：&quot; &lt;&lt; pArray.getCapacity() &lt;&lt; endl;&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 能够利用所学知识点实现通用的数组 2 STL初识2.1 STL的诞生 长久以来，软件界一直希望建立一种可重复利用的东西 C++的面向对象和泛型编程思想，目的就是复用性的提升 大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作 为了建立数据结构和算法的一套标准,诞生了STL 2.2 STL基本概念 STL(Standard Template Library,标准模板库) STL 从广义上分为: 容器(container) 算法(algorithm) 迭代器(iterator) 容器和算法之间通过迭代器进行无缝连接。 STL 几乎所有的代码都采用了模板类或者模板函数 2.3 STL六大组件STL大体分为六大组件，分别是:容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器 容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。 算法：各种常用的算法，如sort、find、copy、for_each等 迭代器：扮演了容器与算法之间的胶合剂。 仿函数：行为类似函数，可作为算法的某种策略。 适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。 空间配置器：负责空间的配置与管理。 2.4 STL中容器、算法、迭代器容器：置物之所也 STL容器就是将运用最广泛的一些数据结构实现出来 常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等 这些容器分为序列式容器和关联式容器两种: ​ 序列式容器:强调值的排序，序列式容器中的每个元素均有固定的位置。​ 关联式容器:二叉树结构，各元素之间没有严格的物理上的顺序关系 算法：问题之解法也 有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms) 算法分为:质变算法和非质变算法。 质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等 非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等 迭代器：容器和算法之间粘合剂 提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。 每个容器都有自己专属的迭代器 迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针 迭代器种类： 种类 功能 支持运算 输入迭代器 对数据的只读访问 只读，支持++、&#x3D;&#x3D;、！&#x3D; 输出迭代器 对数据的只写访问 只写，支持++ 前向迭代器 读写操作，并能向前推进迭代器 读写，支持++、&#x3D;&#x3D;、！&#x3D; 双向迭代器 读写操作，并能向前和向后操作 读写，支持++、–， 随机访问迭代器 读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器 读写，支持++、–、[n]、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D; 常用的容器中迭代器种类为双向迭代器，和随机访问迭代器 2.5 容器算法迭代器初识了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力 STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器 2.5.1 vector存放内置数据类型容器： vector 算法： for_each 迭代器： vector&lt;int&gt;::iterator 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;vector&gt;#include &lt;algorithm&gt;void MyPrint(int val)&#123; cout &lt;&lt; val &lt;&lt; endl;&#125;void test01() &#123; //创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型 vector&lt;int&gt; v; //向容器中放数据 v.push_back(10); v.push_back(20); v.push_back(30); v.push_back(40); //每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素 //v.begin()返回迭代器，这个迭代器指向容器中第一个数据 //v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置 //vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型 vector&lt;int&gt;::iterator pBegin = v.begin(); vector&lt;int&gt;::iterator pEnd = v.end(); //第一种遍历方式： while (pBegin != pEnd) &#123; cout &lt;&lt; *pBegin &lt;&lt; endl; pBegin++; &#125; //第二种遍历方式： for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; endl; &#125; cout &lt;&lt; endl; //第三种遍历方式： //使用STL提供标准遍历算法 头文件 algorithm for_each(v.begin(), v.end(), MyPrint);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 2.5.2 Vector存放自定义数据类型学习目标：vector中存放自定义数据类型，并打印输出 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;vector&gt;#include &lt;string&gt;//自定义数据类型class Person &#123;public: Person(string name, int age) &#123; mName = name; mAge = age; &#125;public: string mName; int mAge;&#125;;//存放对象void test01() &#123; vector&lt;Person&gt; v; //创建数据 Person p1(&quot;aaa&quot;, 10); Person p2(&quot;bbb&quot;, 20); Person p3(&quot;ccc&quot;, 30); Person p4(&quot;ddd&quot;, 40); Person p5(&quot;eee&quot;, 50); v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); v.push_back(p5); for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; &quot;Name:&quot; &lt;&lt; (*it).mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it).mAge &lt;&lt; endl; &#125;&#125;//放对象指针void test02() &#123; vector&lt;Person*&gt; v; //创建数据 Person p1(&quot;aaa&quot;, 10); Person p2(&quot;bbb&quot;, 20); Person p3(&quot;ccc&quot;, 30); Person p4(&quot;ddd&quot;, 40); Person p5(&quot;eee&quot;, 50); v.push_back(&amp;p1); v.push_back(&amp;p2); v.push_back(&amp;p3); v.push_back(&amp;p4); v.push_back(&amp;p5); for (vector&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; Person * p = (*it); cout &lt;&lt; &quot;Name:&quot; &lt;&lt; p-&gt;mName &lt;&lt; &quot; Age:&quot; &lt;&lt; (*it)-&gt;mAge &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 2.5.3 Vector容器嵌套容器学习目标：容器中嵌套容器，我们将所有数据进行遍历输出 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;vector&gt;//容器嵌套容器void test01() &#123; vector&lt; vector&lt;int&gt; &gt; v; vector&lt;int&gt; v1; vector&lt;int&gt; v2; vector&lt;int&gt; v3; vector&lt;int&gt; v4; for (int i = 0; i &lt; 4; i++) &#123; v1.push_back(i + 1); v2.push_back(i + 2); v3.push_back(i + 3); v4.push_back(i + 4); &#125; //将容器元素插入到vector v中 v.push_back(v1); v.push_back(v2); v.push_back(v3); v.push_back(v4); for (vector&lt;vector&lt;int&gt;&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; for (vector&lt;int&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++) &#123; cout &lt;&lt; *vit &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 3 STL- 常用容器3.1 string容器3.1.1 string基本概念本质： string是C++风格的字符串，而string本质上是一个类 string和char * 区别： char * 是一个指针 string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。 特点： string 类内部封装了很多成员方法 例如：查找find，拷贝copy，删除delete 替换replace，插入insert string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责 3.1.2 string构造函数构造函数原型： string(); &#x2F;&#x2F;创建一个空的字符串 例如: string str; string(const char* s); &#x2F;&#x2F;使用字符串s初始化 string(const string&amp; str); &#x2F;&#x2F;使用一个string对象初始化另一个string对象 string(int n, char c); &#x2F;&#x2F;使用n个字符c初始化 示例： 123456789101112131415161718192021222324252627#include &lt;string&gt;//string构造void test01()&#123; string s1; //创建空字符串，调用无参构造函数 cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; s1 &lt;&lt; endl; const char* str = &quot;hello world&quot;; string s2(str); //把c_string转换成了string cout &lt;&lt; &quot;str2 = &quot; &lt;&lt; s2 &lt;&lt; endl; string s3(s2); //调用拷贝构造函数 cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; s3 &lt;&lt; endl; string s4(10, &#x27;a&#x27;); cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; s3 &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：string的多种构造方式没有可比性，灵活使用即可 3.1.3 string赋值操作功能描述： 给string字符串进行赋值 赋值的函数原型： string&amp; operator=(const char* s); &#x2F;&#x2F;char*类型字符串 赋值给当前的字符串 string&amp; operator=(const string &amp;s); &#x2F;&#x2F;把字符串s赋给当前的字符串 string&amp; operator=(char c); &#x2F;&#x2F;字符赋值给当前的字符串 string&amp; assign(const char *s); &#x2F;&#x2F;把字符串s赋给当前的字符串 string&amp; assign(const char *s, int n); &#x2F;&#x2F;把字符串s的前n个字符赋给当前的字符串 string&amp; assign(const string &amp;s); &#x2F;&#x2F;把字符串s赋给当前字符串 string&amp; assign(int n, char c); &#x2F;&#x2F;用n个字符c赋给当前字符串 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041//赋值void test01()&#123; string str1; str1 = &quot;hello world&quot;; cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl; string str2; str2 = str1; cout &lt;&lt; &quot;str2 = &quot; &lt;&lt; str2 &lt;&lt; endl; string str3; str3 = &#x27;a&#x27;; cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; str3 &lt;&lt; endl; string str4; str4.assign(&quot;hello c++&quot;); cout &lt;&lt; &quot;str4 = &quot; &lt;&lt; str4 &lt;&lt; endl; string str5; str5.assign(&quot;hello c++&quot;,5); cout &lt;&lt; &quot;str5 = &quot; &lt;&lt; str5 &lt;&lt; endl; string str6; str6.assign(str5); cout &lt;&lt; &quot;str6 = &quot; &lt;&lt; str6 &lt;&lt; endl; string str7; str7.assign(5, &#x27;x&#x27;); cout &lt;&lt; &quot;str7 = &quot; &lt;&lt; str7 &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： ​ string的赋值方式很多，operator= 这种方式是比较实用的 3.1.4 string字符串拼接功能描述： 实现在字符串末尾拼接字符串 函数原型： string&amp; operator+=(const char* str); &#x2F;&#x2F;重载+&#x3D;操作符 string&amp; operator+=(const char c); &#x2F;&#x2F;重载+&#x3D;操作符 string&amp; operator+=(const string&amp; str); &#x2F;&#x2F;重载+&#x3D;操作符 string&amp; append(const char *s); &#x2F;&#x2F;把字符串s连接到当前字符串结尾 string&amp; append(const char *s, int n); &#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾 string&amp; append(const string &amp;s); &#x2F;&#x2F;同operator+&#x3D;(const string&amp; str) string&amp; append(const string &amp;s, int pos, int n);&#x2F;&#x2F;字符串s中从pos开始的n个字符连接到字符串结尾 示例： 12345678910111213141516171819202122232425262728293031323334//字符串拼接void test01()&#123; string str1 = &quot;我&quot;; str1 += &quot;爱玩游戏&quot;; cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl; str1 += &#x27;:&#x27;; cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl; string str2 = &quot;LOL DNF&quot;; str1 += str2; cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl; string str3 = &quot;I&quot;; str3.append(&quot; love &quot;); str3.append(&quot;game abcde&quot;, 4); //str3.append(str2); str3.append(str2, 4, 3); // 从下标4位置开始 ，截取3个字符，拼接到字符串末尾 cout &lt;&lt; &quot;str3 = &quot; &lt;&lt; str3 &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：字符串拼接的重载版本很多，初学阶段记住几种即可 3.1.5 string查找和替换功能描述： 查找：查找指定字符串是否存在 替换：在指定的位置替换字符串 函数原型： int find(const string&amp; str, int pos = 0) const; &#x2F;&#x2F;查找str第一次出现位置,从pos开始查找 int find(const char* s, int pos = 0) const; &#x2F;&#x2F;查找s第一次出现位置,从pos开始查找 int find(const char* s, int pos, int n) const; &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置 int find(const char c, int pos = 0) const; &#x2F;&#x2F;查找字符c第一次出现位置 int rfind(const string&amp; str, int pos = npos) const; &#x2F;&#x2F;查找str最后一次位置,从pos开始查找 int rfind(const char* s, int pos = npos) const; &#x2F;&#x2F;查找s最后一次出现位置,从pos开始查找 int rfind(const char* s, int pos, int n) const; &#x2F;&#x2F;从pos查找s的前n个字符最后一次位置 int rfind(const char c, int pos = 0) const; &#x2F;&#x2F;查找字符c最后一次出现位置 string&amp; replace(int pos, int n, const string&amp; str); &#x2F;&#x2F;替换从pos开始n个字符为字符串str string&amp; replace(int pos, int n,const char* s); &#x2F;&#x2F;替换从pos开始的n个字符为字符串s 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142//查找和替换void test01()&#123; //查找 string str1 = &quot;abcdefgde&quot;; int pos = str1.find(&quot;de&quot;); if (pos == -1) &#123; cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;pos = &quot; &lt;&lt; pos &lt;&lt; endl; &#125; pos = str1.rfind(&quot;de&quot;); cout &lt;&lt; &quot;pos = &quot; &lt;&lt; pos &lt;&lt; endl;&#125;void test02()&#123; //替换 string str1 = &quot;abcdefgde&quot;; str1.replace(1, 3, &quot;1111&quot;); cout &lt;&lt; &quot;str1 = &quot; &lt;&lt; str1 &lt;&lt; endl;&#125;int main() &#123; //test01(); //test02(); system(&quot;pause&quot;); return 0;&#125; 总结： find查找是从左往后，rfind从右往左 find找到字符串后返回查找的第一个字符位置，找不到返回-1 replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串 3.1.6 string字符串比较功能描述： 字符串之间的比较 比较方式： 字符串比较是按字符的ASCII码进行对比 &#x3D; 返回 0 &gt; 返回 1 &lt; 返回 -1 函数原型： int compare(const string &amp;s) const; &#x2F;&#x2F;与字符串s比较 int compare(const char *s) const; &#x2F;&#x2F;与字符串s比较 示例： 12345678910111213141516171819202122232425262728293031//字符串比较void test01()&#123; string s1 = &quot;hello&quot;; string s2 = &quot;aello&quot;; int ret = s1.compare(s2); if (ret == 0) &#123; cout &lt;&lt; &quot;s1 等于 s2&quot; &lt;&lt; endl; &#125; else if (ret &gt; 0) &#123; cout &lt;&lt; &quot;s1 大于 s2&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;s1 小于 s2&quot; &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大 3.1.7 string字符存取string中单个字符存取方式有两种 char&amp; operator[](int n); &#x2F;&#x2F;通过[]方式取字符 char&amp; at(int n); &#x2F;&#x2F;通过at方法获取字符 示例： 1234567891011121314151617181920212223242526272829303132void test01()&#123; string str = &quot;hello world&quot;; for (int i = 0; i &lt; str.size(); i++) &#123; cout &lt;&lt; str[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; for (int i = 0; i &lt; str.size(); i++) &#123; cout &lt;&lt; str.at(i) &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; //字符修改 str[0] = &#x27;x&#x27;; str.at(1) = &#x27;x&#x27;; cout &lt;&lt; str &lt;&lt; endl; &#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at 3.1.8 string插入和删除功能描述： 对string字符串进行插入和删除字符操作 函数原型： string&amp; insert(int pos, const char* s); &#x2F;&#x2F;插入字符串 string&amp; insert(int pos, const string&amp; str); &#x2F;&#x2F;插入字符串 string&amp; insert(int pos, int n, char c); &#x2F;&#x2F;在指定位置插入n个字符c string&amp; erase(int pos, int n = npos); &#x2F;&#x2F;删除从Pos开始的n个字符 示例： 12345678910111213141516171819//字符串插入和删除void test01()&#123; string str = &quot;hello&quot;; str.insert(1, &quot;111&quot;); cout &lt;&lt; str &lt;&lt; endl; str.erase(1, 3); //从1号位置开始3个字符 cout &lt;&lt; str &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：插入和删除的起始下标都是从0开始 3.1.9 string子串功能描述： 从字符串中获取想要的子串 函数原型： string substr(int pos = 0, int n = npos) const; &#x2F;&#x2F;返回由pos开始的n个字符组成的字符串 示例： 1234567891011121314151617181920212223//子串void test01()&#123; string str = &quot;abcdefg&quot;; string subStr = str.substr(1, 3); cout &lt;&lt; &quot;subStr = &quot; &lt;&lt; subStr &lt;&lt; endl; string email = &quot;hello@sina.com&quot;; int pos = email.find(&quot;@&quot;); string username = email.substr(0, pos); cout &lt;&lt; &quot;username: &quot; &lt;&lt; username &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：灵活的运用求子串功能，可以在实际开发中获取有效的信息 3.2 vector容器3.2.1 vector基本概念功能： vector数据结构和数组非常相似，也称为单端数组 vector与普通数组区别： 不同之处在于数组是静态空间，而vector可以动态扩展 动态扩展： 并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间 vector容器的迭代器是支持随机访问的迭代器 3.2.2 vector构造函数功能描述： 创建vector容器 函数原型： vector&lt;T&gt; v; &#x2F;&#x2F;采用模板实现类实现，默认构造函数 vector(v.begin(), v.end()); &#x2F;&#x2F;将v[begin(), end())区间中的元素拷贝给本身。 vector(n, elem); &#x2F;&#x2F;构造函数将n个elem拷贝给本身。 vector(const vector &amp;vec); &#x2F;&#x2F;拷贝构造函数。 示例： 12345678910111213141516171819202122232425262728293031323334353637#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123; for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; vector&lt;int&gt; v1; //无参构造 for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); &#125; printVector(v1); vector&lt;int&gt; v2(v1.begin(), v1.end()); printVector(v2); vector&lt;int&gt; v3(10, 100); printVector(v3); vector&lt;int&gt; v4(v3); printVector(v4);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：vector的多种构造方式没有可比性，灵活使用即可 3.2.3 vector赋值操作功能描述： 给vector容器进行赋值 函数原型： vector&amp; operator=(const vector &amp;vec);&#x2F;&#x2F;重载等号操作符 assign(beg, end); &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。 assign(n, elem); &#x2F;&#x2F;将n个elem拷贝赋值给本身。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123; for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//赋值操作void test01()&#123; vector&lt;int&gt; v1; //无参构造 for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); &#125; printVector(v1); vector&lt;int&gt;v2; v2 = v1; printVector(v2); vector&lt;int&gt;v3; v3.assign(v1.begin(), v1.end()); printVector(v3); vector&lt;int&gt;v4; v4.assign(10, 100); printVector(v4);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： vector赋值方式比较简单，使用operator&#x3D;，或者assign都可以 3.2.4 vector容量和大小功能描述： 对vector容器的容量和大小操作 函数原型： empty(); &#x2F;&#x2F;判断容器是否为空 capacity(); &#x2F;&#x2F;容器的容量 size(); &#x2F;&#x2F;返回容器中元素的个数 resize(int num); &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。 ​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。 resize(int num, elem); &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。 ​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123; for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; vector&lt;int&gt; v1; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); &#125; printVector(v1); if (v1.empty()) &#123; cout &lt;&lt; &quot;v1为空&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;v1不为空&quot; &lt;&lt; endl; cout &lt;&lt; &quot;v1的容量 = &quot; &lt;&lt; v1.capacity() &lt;&lt; endl; cout &lt;&lt; &quot;v1的大小 = &quot; &lt;&lt; v1.size() &lt;&lt; endl; &#125; //resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充 v1.resize(15,10); printVector(v1); //resize 重新指定大小 ，若指定的更小，超出部分元素被删除 v1.resize(5); printVector(v1);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 判断是否为空 — empty 返回元素个数 — size 返回容器容量 — capacity 重新指定大小 — resize 3.2.5 vector插入和删除功能描述： 对vector容器进行插入、删除操作 函数原型： push_back(ele); &#x2F;&#x2F;尾部插入元素ele pop_back(); &#x2F;&#x2F;删除最后一个元素 insert(const_iterator pos, ele); &#x2F;&#x2F;迭代器指向位置pos插入元素ele insert(const_iterator pos, int count,ele);&#x2F;&#x2F;迭代器指向位置pos插入count个元素ele erase(const_iterator pos); &#x2F;&#x2F;删除迭代器指向的元素 erase(const_iterator start, const_iterator end);&#x2F;&#x2F;删除迭代器从start到end之间的元素 clear(); &#x2F;&#x2F;删除容器中所有元素 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123; for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//插入和删除void test01()&#123; vector&lt;int&gt; v1; //尾插 v1.push_back(10); v1.push_back(20); v1.push_back(30); v1.push_back(40); v1.push_back(50); printVector(v1); //尾删 v1.pop_back(); printVector(v1); //插入 v1.insert(v1.begin(), 100); printVector(v1); v1.insert(v1.begin(), 2, 1000); printVector(v1); //删除 v1.erase(v1.begin()); printVector(v1); //清空 v1.erase(v1.begin(), v1.end()); v1.clear(); printVector(v1);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 尾插 — push_back 尾删 — pop_back 插入 — insert (位置迭代器) 删除 — erase （位置迭代器） 清空 — clear 3.2.6 vector数据存取功能描述： 对vector中的数据的存取操作 函数原型： at(int idx); &#x2F;&#x2F;返回索引idx所指的数据 operator[]; &#x2F;&#x2F;返回索引idx所指的数据 front(); &#x2F;&#x2F;返回容器中第一个数据元素 back(); &#x2F;&#x2F;返回容器中最后一个数据元素 示例： 12345678910111213141516171819202122232425262728293031323334#include &lt;vector&gt;void test01()&#123; vector&lt;int&gt;v1; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); &#125; for (int i = 0; i &lt; v1.size(); i++) &#123; cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; for (int i = 0; i &lt; v1.size(); i++) &#123; cout &lt;&lt; v1.at(i) &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; cout &lt;&lt; &quot;v1的第一个元素为： &quot; &lt;&lt; v1.front() &lt;&lt; endl; cout &lt;&lt; &quot;v1的最后一个元素为： &quot; &lt;&lt; v1.back() &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 除了用迭代器获取vector容器中元素，[ ]和at也可以 front返回容器第一个元素 back返回容器最后一个元素 3.2.7 vector互换容器功能描述： 实现两个容器内元素进行互换 函数原型： swap(vec); &#x2F;&#x2F; 将vec与本身的元素互换 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;vector&gt;void printVector(vector&lt;int&gt;&amp; v) &#123; for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; vector&lt;int&gt;v1; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); &#125; printVector(v1); vector&lt;int&gt;v2; for (int i = 10; i &gt; 0; i--) &#123; v2.push_back(i); &#125; printVector(v2); //互换容器 cout &lt;&lt; &quot;互换后&quot; &lt;&lt; endl; v1.swap(v2); printVector(v1); printVector(v2);&#125;void test02()&#123; vector&lt;int&gt; v; for (int i = 0; i &lt; 100000; i++) &#123; v.push_back(i); &#125; cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl; cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl; v.resize(3); cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl; cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl; //收缩内存 vector&lt;int&gt;(v).swap(v); //匿名对象 cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl; cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：swap可以使两个容器互换，可以达到实用的收缩内存效果 3.2.8 vector预留空间功能描述： 减少vector在动态扩展容量时的扩展次数 函数原型： reserve(int len);&#x2F;&#x2F;容器预留len个元素长度，预留位置不初始化，元素不可访问。 示例： 123456789101112131415161718192021222324252627282930#include &lt;vector&gt;void test01()&#123; vector&lt;int&gt; v; //预留空间 v.reserve(100000); int num = 0; int* p = NULL; for (int i = 0; i &lt; 100000; i++) &#123; v.push_back(i); if (p != &amp;v[0]) &#123; p = &amp;v[0]; num++; &#125; &#125; cout &lt;&lt; &quot;num:&quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：如果数据量较大，可以一开始利用reserve预留空间 3.3 deque容器3.3.1 deque容器基本概念功能： 双端数组，可以对头端进行插入删除操作 deque与vector区别： vector对于头部的插入删除效率低，数据量越大，效率越低 deque相对而言，对头部的插入删除速度回比vector快 vector访问元素时的速度会比deque快,这和两者内部实现有关 deque内部工作原理: deque内部有个中控器，维护每段缓冲区中的内容，缓冲区中存放真实数据 中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间 deque容器的迭代器也是支持随机访问的 3.3.2 deque构造函数功能描述： deque容器构造 函数原型： deque&lt;T&gt; deqT; &#x2F;&#x2F;默认构造形式 deque(beg, end); &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。 deque(n, elem); &#x2F;&#x2F;构造函数将n个elem拷贝给本身。 deque(const deque &amp;deq); &#x2F;&#x2F;拷贝构造函数 示例： 12345678910111213141516171819202122232425262728293031323334353637#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//deque构造void test01() &#123; deque&lt;int&gt; d1; //无参构造函数 for (int i = 0; i &lt; 10; i++) &#123; d1.push_back(i); &#125; printDeque(d1); deque&lt;int&gt; d2(d1.begin(),d1.end()); printDeque(d2); deque&lt;int&gt;d3(10,100); printDeque(d3); deque&lt;int&gt;d4 = d3; printDeque(d4);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：deque容器和vector容器的构造方式几乎一致，灵活使用即可 3.3.3 deque赋值操作功能描述： 给deque容器进行赋值 函数原型： deque&amp; operator=(const deque &amp;deq); &#x2F;&#x2F;重载等号操作符 assign(beg, end); &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。 assign(n, elem); &#x2F;&#x2F;将n个elem拷贝赋值给本身。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//赋值操作void test01()&#123; deque&lt;int&gt; d1; for (int i = 0; i &lt; 10; i++) &#123; d1.push_back(i); &#125; printDeque(d1); deque&lt;int&gt;d2; d2 = d1; printDeque(d2); deque&lt;int&gt;d3; d3.assign(d1.begin(), d1.end()); printDeque(d3); deque&lt;int&gt;d4; d4.assign(10, 100); printDeque(d4);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：deque赋值操作也与vector相同，需熟练掌握 3.3.4 deque大小操作功能描述： 对deque容器的大小进行操作 函数原型： deque.empty(); &#x2F;&#x2F;判断容器是否为空 deque.size(); &#x2F;&#x2F;返回容器中元素的个数 deque.resize(num); &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以默认值填充新位置。 ​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。 deque.resize(num, elem); &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以elem值填充新位置。 ​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//大小操作void test01()&#123; deque&lt;int&gt; d1; for (int i = 0; i &lt; 10; i++) &#123; d1.push_back(i); &#125; printDeque(d1); //判断容器是否为空 if (d1.empty()) &#123; cout &lt;&lt; &quot;d1为空!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;d1不为空!&quot; &lt;&lt; endl; //统计大小 cout &lt;&lt; &quot;d1的大小为：&quot; &lt;&lt; d1.size() &lt;&lt; endl; &#125; //重新指定大小 d1.resize(15, 1); printDeque(d1); d1.resize(5); printDeque(d1);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： deque没有容量的概念 判断是否为空 — empty 返回元素个数 — size 重新指定个数 — resize 3.3.5 deque 插入和删除功能描述： 向deque容器中插入和删除数据 函数原型： 两端插入操作： push_back(elem); &#x2F;&#x2F;在容器尾部添加一个数据 push_front(elem); &#x2F;&#x2F;在容器头部插入一个数据 pop_back(); &#x2F;&#x2F;删除容器最后一个数据 pop_front(); &#x2F;&#x2F;删除容器第一个数据 指定位置操作： insert(pos,elem); &#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。 insert(pos,n,elem); &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。 insert(pos,beg,end); &#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。 clear(); &#x2F;&#x2F;清空容器的所有数据 erase(beg,end); &#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。 erase(pos); &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//两端操作void test01()&#123; deque&lt;int&gt; d; //尾插 d.push_back(10); d.push_back(20); //头插 d.push_front(100); d.push_front(200); printDeque(d); //尾删 d.pop_back(); //头删 d.pop_front(); printDeque(d);&#125;//插入void test02()&#123; deque&lt;int&gt; d; d.push_back(10); d.push_back(20); d.push_front(100); d.push_front(200); printDeque(d); d.insert(d.begin(), 1000); printDeque(d); d.insert(d.begin(), 2,10000); printDeque(d); deque&lt;int&gt;d2; d2.push_back(1); d2.push_back(2); d2.push_back(3); d.insert(d.begin(), d2.begin(), d2.end()); printDeque(d);&#125;//删除void test03()&#123; deque&lt;int&gt; d; d.push_back(10); d.push_back(20); d.push_front(100); d.push_front(200); printDeque(d); d.erase(d.begin()); printDeque(d); d.erase(d.begin(), d.end()); d.clear(); printDeque(d);&#125;int main() &#123; //test01(); //test02(); test03(); system(&quot;pause&quot;); return 0;&#125; 总结： 插入和删除提供的位置是迭代器！ 尾插 — push_back 尾删 — pop_back 头插 — push_front 头删 — pop_front 3.3.6 deque 数据存取功能描述： 对deque 中的数据的存取操作 函数原型： at(int idx); &#x2F;&#x2F;返回索引idx所指的数据 operator[]; &#x2F;&#x2F;返回索引idx所指的数据 front(); &#x2F;&#x2F;返回容器中第一个数据元素 back(); &#x2F;&#x2F;返回容器中最后一个数据元素 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;deque&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//数据存取void test01()&#123; deque&lt;int&gt; d; d.push_back(10); d.push_back(20); d.push_front(100); d.push_front(200); for (int i = 0; i &lt; d.size(); i++) &#123; cout &lt;&lt; d[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; for (int i = 0; i &lt; d.size(); i++) &#123; cout &lt;&lt; d.at(i) &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; cout &lt;&lt; &quot;front:&quot; &lt;&lt; d.front() &lt;&lt; endl; cout &lt;&lt; &quot;back:&quot; &lt;&lt; d.back() &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 除了用迭代器获取deque容器中元素，[ ]和at也可以 front返回容器第一个元素 back返回容器最后一个元素 3.3.7 deque 排序功能描述： 利用算法实现对deque容器进行排序 算法： sort(iterator beg, iterator end) &#x2F;&#x2F;对beg和end区间内元素进行排序 示例： 1234567891011121314151617181920212223242526272829303132333435#include &lt;deque&gt;#include &lt;algorithm&gt;void printDeque(const deque&lt;int&gt;&amp; d) &#123; for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; deque&lt;int&gt; d; d.push_back(10); d.push_back(20); d.push_front(100); d.push_front(200); printDeque(d); sort(d.begin(), d.end()); printDeque(d);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：sort算法非常实用，使用时包含头文件 algorithm即可 3.4 案例-评委打分3.4.1 案例描述有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。 3.4.2 实现步骤 创建五名选手，放到vector中 遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中 sort算法对deque容器中分数排序，去除最高和最低分 deque容器遍历一遍，累加总分 获取平均分 示例代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106//选手类class Person&#123;public: Person(string name, int score) &#123; this-&gt;m_Name = name; this-&gt;m_Score = score; &#125; string m_Name; //姓名 int m_Score; //平均分&#125;;void createPerson(vector&lt;Person&gt;&amp;v)&#123; string nameSeed = &quot;ABCDE&quot;; for (int i = 0; i &lt; 5; i++) &#123; string name = &quot;选手&quot;; name += nameSeed[i]; int score = 0; Person p(name, score); //将创建的person对象 放入到容器中 v.push_back(p); &#125;&#125;//打分void setScore(vector&lt;Person&gt;&amp;v)&#123; for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; //将评委的分数 放入到deque容器中 deque&lt;int&gt;d; for (int i = 0; i &lt; 10; i++) &#123; int score = rand() % 41 + 60; // 60 ~ 100 d.push_back(score); &#125; //cout &lt;&lt; &quot;选手： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 打分： &quot; &lt;&lt; endl; //for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++) //&#123; // cout &lt;&lt; *dit &lt;&lt; &quot; &quot;; //&#125; //cout &lt;&lt; endl; //排序 sort(d.begin(), d.end()); //去除最高和最低分 d.pop_back(); d.pop_front(); //取平均分 int sum = 0; for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++) &#123; sum += *dit; //累加每个评委的分数 &#125; int avg = sum / d.size(); //将平均分 赋值给选手身上 it-&gt;m_Score = avg; &#125;&#125;void showScore(vector&lt;Person&gt;&amp;v)&#123; for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 平均分： &quot; &lt;&lt; it-&gt;m_Score &lt;&lt; endl; &#125;&#125;int main() &#123; //随机数种子 srand((unsigned int)time(NULL)); //1、创建5名选手 vector&lt;Person&gt;v; //存放选手容器 createPerson(v); //测试 //for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++) //&#123; // cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot; 分数： &quot; &lt;&lt; (*it).m_Score &lt;&lt; endl; //&#125; //2、给5名选手打分 setScore(v); //3、显示最后得分 showScore(v); system(&quot;pause&quot;); return 0;&#125; 总结： 选取不同的容器操作数据，可以提升代码的效率 3.5 stack容器3.5.1 stack 基本概念概念：stack是一种先进后出(First In Last Out,FILO)的数据结构，它只有一个出口 栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为 栈中进入数据称为 — 入栈 push 栈中弹出数据称为 — 出栈 pop 生活中的栈： 3.5.2 stack 常用接口功能描述：栈容器常用的对外接口 构造函数： stack&lt;T&gt; stk; &#x2F;&#x2F;stack采用模板类实现， stack对象的默认构造形式 stack(const stack &amp;stk); &#x2F;&#x2F;拷贝构造函数 赋值操作： stack&amp; operator=(const stack &amp;stk); &#x2F;&#x2F;重载等号操作符 数据存取： push(elem); &#x2F;&#x2F;向栈顶添加元素 pop(); &#x2F;&#x2F;从栈顶移除第一个元素 top(); &#x2F;&#x2F;返回栈顶元素 大小操作： empty(); &#x2F;&#x2F;判断堆栈是否为空 size(); &#x2F;&#x2F;返回栈的大小 示例： 12345678910111213141516171819202122232425262728293031#include &lt;stack&gt;//栈容器常用接口void test01()&#123; //创建栈容器 栈容器必须符合先进后出 stack&lt;int&gt; s; //向栈中添加元素，叫做 压栈 入栈 s.push(10); s.push(20); s.push(30); while (!s.empty()) &#123; //输出栈顶元素 cout &lt;&lt; &quot;栈顶元素为： &quot; &lt;&lt; s.top() &lt;&lt; endl; //弹出栈顶元素 s.pop(); &#125; cout &lt;&lt; &quot;栈的大小为：&quot; &lt;&lt; s.size() &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 入栈 — push 出栈 — pop 返回栈顶 — top 判断栈是否为空 — empty 返回栈大小 — size 3.6 queue 容器3.6.1 queue 基本概念概念：Queue是一种先进先出(First In First Out,FIFO)的数据结构，它有两个出口 队列容器允许从一端新增元素，从另一端移除元素 队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为 队列中进数据称为 — 入队 push 队列中出数据称为 — 出队 pop 生活中的队列： 3.6.2 queue 常用接口功能描述：栈容器常用的对外接口 构造函数： queue&lt;T&gt; que; &#x2F;&#x2F;queue采用模板类实现，queue对象的默认构造形式 queue(const queue &amp;que); &#x2F;&#x2F;拷贝构造函数 赋值操作： queue&amp; operator=(const queue &amp;que); &#x2F;&#x2F;重载等号操作符 数据存取： push(elem); &#x2F;&#x2F;往队尾添加元素 pop(); &#x2F;&#x2F;从队头移除第一个元素 back(); &#x2F;&#x2F;返回最后一个元素 front(); &#x2F;&#x2F;返回第一个元素 大小操作： empty(); &#x2F;&#x2F;判断堆栈是否为空 size(); &#x2F;&#x2F;返回栈的大小 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;queue&gt;#include &lt;string&gt;class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; string m_Name; int m_Age;&#125;;void test01() &#123; //创建队列 queue&lt;Person&gt; q; //准备数据 Person p1(&quot;唐僧&quot;, 30); Person p2(&quot;孙悟空&quot;, 1000); Person p3(&quot;猪八戒&quot;, 900); Person p4(&quot;沙僧&quot;, 800); //向队列中添加元素 入队操作 q.push(p1); q.push(p2); q.push(p3); q.push(p4); //队列不提供迭代器，更不支持随机访问 while (!q.empty()) &#123; //输出队头元素 cout &lt;&lt; &quot;队头元素-- 姓名： &quot; &lt;&lt; q.front().m_Name &lt;&lt; &quot; 年龄： &quot;&lt;&lt; q.front().m_Age &lt;&lt; endl; cout &lt;&lt; &quot;队尾元素-- 姓名： &quot; &lt;&lt; q.back().m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; q.back().m_Age &lt;&lt; endl; cout &lt;&lt; endl; //弹出队头元素 q.pop(); &#125; cout &lt;&lt; &quot;队列大小为：&quot; &lt;&lt; q.size() &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 入队 — push 出队 — pop 返回队头元素 — front 返回队尾元素 — back 判断队是否为空 — empty 返回队列大小 — size 3.7 list容器3.7.1 list基本概念功能：将数据进行链式存储 链表（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的 链表的组成：链表由一系列结点组成 结点的组成：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域 STL中的链表是一个双向循环链表 由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于双向迭代器 list的优点： 采用动态存储分配，不会造成内存浪费和溢出 链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素 list的缺点： 链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大 List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。 总结：STL中List和vector是两个最常被使用的容器，各有优缺点 3.7.2 list构造函数功能描述： 创建list容器 函数原型： list&lt;T&gt; lst; &#x2F;&#x2F;list采用采用模板类实现,对象的默认构造形式： list(beg,end); &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。 list(n,elem); &#x2F;&#x2F;构造函数将n个elem拷贝给本身。 list(const list &amp;lst); &#x2F;&#x2F;拷贝构造函数。 示例： 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123; for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; list&lt;int&gt;L1; L1.push_back(10); L1.push_back(20); L1.push_back(30); L1.push_back(40); printList(L1); list&lt;int&gt;L2(L1.begin(),L1.end()); printList(L2); list&lt;int&gt;L3(L2); printList(L3); list&lt;int&gt;L4(10, 1000); printList(L4);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：list构造方式同其他几个STL常用容器，熟练掌握即可 3.7.3 list 赋值和交换功能描述： 给list容器进行赋值，以及交换list容器 函数原型： assign(beg, end); &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。 assign(n, elem); &#x2F;&#x2F;将n个elem拷贝赋值给本身。 list&amp; operator=(const list &amp;lst); &#x2F;&#x2F;重载等号操作符 swap(lst); &#x2F;&#x2F;将lst与本身的元素互换。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123; for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//赋值和交换void test01()&#123; list&lt;int&gt;L1; L1.push_back(10); L1.push_back(20); L1.push_back(30); L1.push_back(40); printList(L1); //赋值 list&lt;int&gt;L2; L2 = L1; printList(L2); list&lt;int&gt;L3; L3.assign(L2.begin(), L2.end()); printList(L3); list&lt;int&gt;L4; L4.assign(10, 100); printList(L4);&#125;//交换void test02()&#123; list&lt;int&gt;L1; L1.push_back(10); L1.push_back(20); L1.push_back(30); L1.push_back(40); list&lt;int&gt;L2; L2.assign(10, 100); cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl; printList(L1); printList(L2); cout &lt;&lt; endl; L1.swap(L2); cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl; printList(L1); printList(L2);&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：list赋值和交换操作能够灵活运用即可 3.7.4 list 大小操作功能描述： 对list容器的大小进行操作 函数原型： size(); &#x2F;&#x2F;返回容器中元素的个数 empty(); &#x2F;&#x2F;判断容器是否为空 resize(num); &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。 ​ &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。 resize(num, elem); &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。 //如果容器变短，则末尾超出容器长度的元素被删除。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123; for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//大小操作void test01()&#123; list&lt;int&gt;L1; L1.push_back(10); L1.push_back(20); L1.push_back(30); L1.push_back(40); if (L1.empty()) &#123; cout &lt;&lt; &quot;L1为空&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;L1不为空&quot; &lt;&lt; endl; cout &lt;&lt; &quot;L1的大小为： &quot; &lt;&lt; L1.size() &lt;&lt; endl; &#125; //重新指定大小 L1.resize(10); printList(L1); L1.resize(2); printList(L1);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 判断是否为空 — empty 返回元素个数 — size 重新指定个数 — resize 3.7.5 list 插入和删除功能描述： 对list容器进行数据的插入和删除 函数原型： push_back(elem);&#x2F;&#x2F;在容器尾部加入一个元素 pop_back();&#x2F;&#x2F;删除容器中最后一个元素 push_front(elem);&#x2F;&#x2F;在容器开头插入一个元素 pop_front();&#x2F;&#x2F;从容器开头移除第一个元素 insert(pos,elem);&#x2F;&#x2F;在pos位置插elem元素的拷贝，返回新数据的位置。 insert(pos,n,elem);&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。 insert(pos,beg,end);&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。 clear();&#x2F;&#x2F;移除容器的所有数据 erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。 erase(pos);&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。 remove(elem);&#x2F;&#x2F;删除容器中所有与elem值匹配的元素。 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;list&gt;void printList(const list&lt;int&gt;&amp; L) &#123; for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//插入和删除void test01()&#123; list&lt;int&gt; L; //尾插 L.push_back(10); L.push_back(20); L.push_back(30); //头插 L.push_front(100); L.push_front(200); L.push_front(300); printList(L); //尾删 L.pop_back(); printList(L); //头删 L.pop_front(); printList(L); //插入 list&lt;int&gt;::iterator it = L.begin(); L.insert(++it, 1000); printList(L); //删除 it = L.begin(); L.erase(++it); printList(L); //移除 L.push_back(10000); L.push_back(10000); L.push_back(10000); printList(L); L.remove(10000); printList(L); //清空 L.clear(); printList(L);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 尾插 — push_back 尾删 — pop_back 头插 — push_front 头删 — pop_front 插入 — insert 删除 — erase 移除 — remove 清空 — clear 3.7.6 list 数据存取功能描述： 对list容器中数据进行存取 函数原型： front(); &#x2F;&#x2F;返回第一个元素。 back(); &#x2F;&#x2F;返回最后一个元素。 示例： 12345678910111213141516171819202122232425262728293031#include &lt;list&gt;//数据存取void test01()&#123; list&lt;int&gt;L1; L1.push_back(10); L1.push_back(20); L1.push_back(30); L1.push_back(40); //cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据 //cout &lt;&lt; L1[0] &lt;&lt; endl; //错误 不支持[]方式访问数据 cout &lt;&lt; &quot;第一个元素为： &quot; &lt;&lt; L1.front() &lt;&lt; endl; cout &lt;&lt; &quot;最后一个元素为： &quot; &lt;&lt; L1.back() &lt;&lt; endl; //list容器的迭代器是双向迭代器，不支持随机访问 list&lt;int&gt;::iterator it = L1.begin(); //it = it + 1;//错误，不可以跳跃访问，即使是+1&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： list容器中不可以通过[]或者at方式访问数据 返回第一个元素 — front 返回最后一个元素 — back 3.7.7 list 反转和排序功能描述： 将容器中的元素反转，以及将容器中的数据进行排序 函数原型： reverse(); &#x2F;&#x2F;反转链表 sort(); &#x2F;&#x2F;链表排序 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243void printList(const list&lt;int&gt;&amp; L) &#123; for (list&lt;int&gt;::const_iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;bool myCompare(int val1 , int val2)&#123; return val1 &gt; val2;&#125;//反转和排序void test01()&#123; list&lt;int&gt; L; L.push_back(90); L.push_back(30); L.push_back(20); L.push_back(70); printList(L); //反转容器的元素 L.reverse(); printList(L); //排序 L.sort(); //默认的排序规则 从小到大 printList(L); L.sort(myCompare); //指定规则，从大到小 printList(L);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 反转 — reverse 排序 — sort （成员函数） 3.7.8 排序案例案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高 排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;list&gt;#include &lt;string&gt;class Person &#123;public: Person(string name, int age , int height) &#123; m_Name = name; m_Age = age; m_Height = height; &#125;public: string m_Name; //姓名 int m_Age; //年龄 int m_Height; //身高&#125;;bool ComparePerson(Person&amp; p1, Person&amp; p2) &#123; if (p1.m_Age == p2.m_Age) &#123; return p1.m_Height &gt; p2.m_Height; &#125; else &#123; return p1.m_Age &lt; p2.m_Age; &#125;&#125;void test01() &#123; list&lt;Person&gt; L; Person p1(&quot;刘备&quot;, 35 , 175); Person p2(&quot;曹操&quot;, 45 , 180); Person p3(&quot;孙权&quot;, 40 , 170); Person p4(&quot;赵云&quot;, 25 , 190); Person p5(&quot;张飞&quot;, 35 , 160); Person p6(&quot;关羽&quot;, 35 , 200); L.push_back(p1); L.push_back(p2); L.push_back(p3); L.push_back(p4); L.push_back(p5); L.push_back(p6); for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl; &#125; cout &lt;&lt; &quot;---------------------------------&quot; &lt;&lt; endl; L.sort(ComparePerson); //排序 for (list&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; &quot; 身高： &quot; &lt;&lt; it-&gt;m_Height &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序 高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂 3.8 set&#x2F; multiset 容器3.8.1 set基本概念简介： 所有元素都会在插入时自动被排序 本质： set&#x2F;multiset属于关联式容器，底层结构是用二叉树实现。 set和multiset区别： set不允许容器中有重复的元素 multiset允许容器中有重复的元素 3.8.2 set构造和赋值功能描述：创建set容器以及赋值 构造： set&lt;T&gt; st; &#x2F;&#x2F;默认构造函数： set(const set &amp;st); &#x2F;&#x2F;拷贝构造函数 赋值： set&amp; operator=(const set &amp;st); &#x2F;&#x2F;重载等号操作符 示例： 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s)&#123; for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//构造和赋值void test01()&#123; set&lt;int&gt; s1; s1.insert(10); s1.insert(30); s1.insert(20); s1.insert(40); printSet(s1); //拷贝构造 set&lt;int&gt;s2(s1); printSet(s2); //赋值 set&lt;int&gt;s3; s3 = s2; printSet(s3);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： set容器插入数据时用insert set容器插入数据的数据会自动排序 3.8.3 set大小和交换功能描述： 统计set容器大小以及交换set容器 函数原型： size(); &#x2F;&#x2F;返回容器中元素的数目 empty(); &#x2F;&#x2F;判断容器是否为空 swap(st); &#x2F;&#x2F;交换两个集合容器 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s)&#123; for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//大小void test01()&#123; set&lt;int&gt; s1; s1.insert(10); s1.insert(30); s1.insert(20); s1.insert(40); if (s1.empty()) &#123; cout &lt;&lt; &quot;s1为空&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;s1不为空&quot; &lt;&lt; endl; cout &lt;&lt; &quot;s1的大小为： &quot; &lt;&lt; s1.size() &lt;&lt; endl; &#125;&#125;//交换void test02()&#123; set&lt;int&gt; s1; s1.insert(10); s1.insert(30); s1.insert(20); s1.insert(40); set&lt;int&gt; s2; s2.insert(100); s2.insert(300); s2.insert(200); s2.insert(400); cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl; printSet(s1); printSet(s2); cout &lt;&lt; endl; cout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl; s1.swap(s2); printSet(s1); printSet(s2);&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 统计大小 — size 判断是否为空 — empty 交换容器 — swap 3.8.4 set插入和删除功能描述： set容器进行插入数据和删除数据 函数原型： insert(elem); &#x2F;&#x2F;在容器中插入元素。 clear(); &#x2F;&#x2F;清除所有元素 erase(pos); &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。 erase(beg, end); &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。 erase(elem); &#x2F;&#x2F;删除容器中值为elem的元素。 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;set&gt;void printSet(set&lt;int&gt; &amp; s)&#123; for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;//插入和删除void test01()&#123; set&lt;int&gt; s1; //插入 s1.insert(10); s1.insert(30); s1.insert(20); s1.insert(40); printSet(s1); //删除 s1.erase(s1.begin()); printSet(s1); s1.erase(30); printSet(s1); //清空 //s1.erase(s1.begin(), s1.end()); s1.clear(); printSet(s1);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 插入 — insert 删除 — erase 清空 — clear 3.8.5 set查找和统计功能描述： 对set容器进行查找数据以及统计数据 函数原型： find(key); &#x2F;&#x2F;查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end(); count(key); &#x2F;&#x2F;统计key的元素个数 示例： 12345678910111213141516171819202122232425262728293031323334353637#include &lt;set&gt;//查找和统计void test01()&#123; set&lt;int&gt; s1; //插入 s1.insert(10); s1.insert(30); s1.insert(20); s1.insert(40); //查找 set&lt;int&gt;::iterator pos = s1.find(30); if (pos != s1.end()) &#123; cout &lt;&lt; &quot;找到了元素 ： &quot; &lt;&lt; *pos &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl; &#125; //统计 int num = s1.count(30); cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 查找 — find （返回的是迭代器） 统计 — count （对于set，结果为0或者1） 3.8.6 set和multiset区别学习目标： 掌握set和multiset的区别 区别： set不可以插入重复数据，而multiset可以 set插入数据的同时会返回插入结果，表示插入是否成功 multiset不会检测数据，因此可以插入重复数据 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;set&gt;//set和multiset区别void test01()&#123; set&lt;int&gt; s; pair&lt;set&lt;int&gt;::iterator, bool&gt; ret = s.insert(10); if (ret.second) &#123; cout &lt;&lt; &quot;第一次插入成功!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;第一次插入失败!&quot; &lt;&lt; endl; &#125; ret = s.insert(10); if (ret.second) &#123; cout &lt;&lt; &quot;第二次插入成功!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;第二次插入失败!&quot; &lt;&lt; endl; &#125; //multiset multiset&lt;int&gt; ms; ms.insert(10); ms.insert(10); for (multiset&lt;int&gt;::iterator it = ms.begin(); it != ms.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 如果不允许插入重复数据可以利用set 如果需要插入重复数据利用multiset 3.8.7 pair对组创建功能描述： 成对出现的数据，利用对组可以返回两个数据 两种创建方式： pair&lt;type, type&gt; p ( value1, value2 ); pair&lt;type, type&gt; p = make_pair( value1, value2 ); 示例： 1234567891011121314151617181920#include &lt;string&gt;//对组创建void test01()&#123; pair&lt;string, int&gt; p(string(&quot;Tom&quot;), 20); cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.second &lt;&lt; endl; pair&lt;string, int&gt; p2 = make_pair(&quot;Jerry&quot;, 10); cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p2.first &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p2.second &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 两种方式都可以创建对组，记住一种即可 3.8.8 set容器排序学习目标： set容器默认排序规则为从小到大，掌握如何改变排序规则 主要技术点： 利用仿函数，可以改变排序规则 示例一 set存放内置数据类型 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;set&gt;class MyCompare &#123;public: bool operator()(int v1, int v2) &#123; return v1 &gt; v2; &#125;&#125;;void test01() &#123; set&lt;int&gt; s1; s1.insert(10); s1.insert(40); s1.insert(20); s1.insert(30); s1.insert(50); //默认从小到大 for (set&lt;int&gt;::iterator it = s1.begin(); it != s1.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; //指定排序规则 set&lt;int,MyCompare&gt; s2; s2.insert(10); s2.insert(40); s2.insert(20); s2.insert(30); s2.insert(50); for (set&lt;int, MyCompare&gt;::iterator it = s2.begin(); it != s2.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：利用仿函数可以指定set容器的排序规则 示例二 set存放自定义数据类型 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;set&gt;#include &lt;string&gt;class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; string m_Name; int m_Age;&#125;;class comparePerson&#123;public: bool operator()(const Person&amp; p1, const Person &amp;p2) &#123; //按照年龄进行排序 降序 return p1.m_Age &gt; p2.m_Age; &#125;&#125;;void test01()&#123; set&lt;Person, comparePerson&gt; s; Person p1(&quot;刘备&quot;, 23); Person p2(&quot;关羽&quot;, 27); Person p3(&quot;张飞&quot;, 25); Person p4(&quot;赵云&quot;, 21); s.insert(p1); s.insert(p2); s.insert(p3); s.insert(p4); for (set&lt;Person, comparePerson&gt;::iterator it = s.begin(); it != s.end(); it++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 对于自定义数据类型，set必须指定排序规则才可以插入数据 3.9 map&#x2F; multimap容器3.9.1 map基本概念简介： map中所有元素都是pair pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值） 所有元素都会根据元素的键值自动排序 本质： map&#x2F;multimap属于关联式容器，底层结构是用二叉树实现。 优点： 可以根据key值快速找到value值 map和multimap区别： map不允许容器中有重复key值元素 multimap允许容器中有重复key值元素 3.9.2 map构造和赋值功能描述： 对map容器进行构造和赋值操作 函数原型： 构造： map&lt;T1, T2&gt; mp; &#x2F;&#x2F;map默认构造函数: map(const map &amp;mp); &#x2F;&#x2F;拷贝构造函数 赋值： map&amp; operator=(const map &amp;mp); &#x2F;&#x2F;重载等号操作符 示例： 1234567891011121314151617181920212223242526272829303132333435#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m)&#123; for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++) &#123; cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; map&lt;int,int&gt;m; //默认构造 m.insert(pair&lt;int, int&gt;(1, 10)); m.insert(pair&lt;int, int&gt;(2, 20)); m.insert(pair&lt;int, int&gt;(3, 30)); printMap(m); map&lt;int, int&gt;m2(m); //拷贝构造 printMap(m2); map&lt;int, int&gt;m3; m3 = m2; //赋值 printMap(m3);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：map中所有元素都是成对出现，插入数据时候要使用对组 3.9.3 map大小和交换功能描述： 统计map容器大小以及交换map容器 函数原型： size(); &#x2F;&#x2F;返回容器中元素的数目 empty(); &#x2F;&#x2F;判断容器是否为空 swap(st); &#x2F;&#x2F;交换两个集合容器 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m)&#123; for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++) &#123; cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; map&lt;int, int&gt;m; m.insert(pair&lt;int, int&gt;(1, 10)); m.insert(pair&lt;int, int&gt;(2, 20)); m.insert(pair&lt;int, int&gt;(3, 30)); if (m.empty()) &#123; cout &lt;&lt; &quot;m为空&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;m不为空&quot; &lt;&lt; endl; cout &lt;&lt; &quot;m的大小为： &quot; &lt;&lt; m.size() &lt;&lt; endl; &#125;&#125;//交换void test02()&#123; map&lt;int, int&gt;m; m.insert(pair&lt;int, int&gt;(1, 10)); m.insert(pair&lt;int, int&gt;(2, 20)); m.insert(pair&lt;int, int&gt;(3, 30)); map&lt;int, int&gt;m2; m2.insert(pair&lt;int, int&gt;(4, 100)); m2.insert(pair&lt;int, int&gt;(5, 200)); m2.insert(pair&lt;int, int&gt;(6, 300)); cout &lt;&lt; &quot;交换前&quot; &lt;&lt; endl; printMap(m); printMap(m2); cout &lt;&lt; &quot;交换后&quot; &lt;&lt; endl; m.swap(m2); printMap(m); printMap(m2);&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 统计大小 — size 判断是否为空 — empty 交换容器 — swap 3.9.4 map插入和删除功能描述： map容器进行插入数据和删除数据 函数原型： insert(elem); &#x2F;&#x2F;在容器中插入元素。 clear(); &#x2F;&#x2F;清除所有元素 erase(pos); &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。 erase(beg, end); &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。 erase(key); &#x2F;&#x2F;删除容器中值为key的元素。 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;map&gt;void printMap(map&lt;int,int&gt;&amp;m)&#123; for (map&lt;int, int&gt;::iterator it = m.begin(); it != m.end(); it++) &#123; cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; it-&gt;second &lt;&lt; endl; &#125; cout &lt;&lt; endl;&#125;void test01()&#123; //插入 map&lt;int, int&gt; m; //第一种插入方式 m.insert(pair&lt;int, int&gt;(1, 10)); //第二种插入方式 m.insert(make_pair(2, 20)); //第三种插入方式 m.insert(map&lt;int, int&gt;::value_type(3, 30)); //第四种插入方式 m[4] = 40; printMap(m); //删除 m.erase(m.begin()); printMap(m); m.erase(3); printMap(m); //清空 m.erase(m.begin(),m.end()); m.clear(); printMap(m);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： map插入方式很多，记住其一即可 插入 — insert 删除 — erase 清空 — clear 3.9.5 map查找和统计功能描述： 对map容器进行查找数据以及统计数据 函数原型： find(key); &#x2F;&#x2F;查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end(); count(key); &#x2F;&#x2F;统计key的元素个数 示例： 1234567891011121314151617181920212223242526272829303132333435#include &lt;map&gt;//查找和统计void test01()&#123; map&lt;int, int&gt;m; m.insert(pair&lt;int, int&gt;(1, 10)); m.insert(pair&lt;int, int&gt;(2, 20)); m.insert(pair&lt;int, int&gt;(3, 30)); //查找 map&lt;int, int&gt;::iterator pos = m.find(3); if (pos != m.end()) &#123; cout &lt;&lt; &quot;找到了元素 key = &quot; &lt;&lt; (*pos).first &lt;&lt; &quot; value = &quot; &lt;&lt; (*pos).second &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;未找到元素&quot; &lt;&lt; endl; &#125; //统计 int num = m.count(3); cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 查找 — find （返回的是迭代器） 统计 — count （对于map，结果为0或者1） 3.9.6 map容器排序学习目标： map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则 主要技术点: 利用仿函数，可以改变排序规则 示例： 123456789101112131415161718192021222324252627282930313233#include &lt;map&gt;class MyCompare &#123;public: bool operator()(int v1, int v2) &#123; return v1 &gt; v2; &#125;&#125;;void test01() &#123; //默认从小到大排序 //利用仿函数实现从大到小排序 map&lt;int, int, MyCompare&gt; m; m.insert(make_pair(1, 10)); m.insert(make_pair(2, 20)); m.insert(make_pair(3, 30)); m.insert(make_pair(4, 40)); m.insert(make_pair(5, 50)); for (map&lt;int, int, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++) &#123; cout &lt;&lt; &quot;key:&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value:&quot; &lt;&lt; it-&gt;second &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 利用仿函数可以指定map容器的排序规则 对于自定义数据类型，map必须要指定排序规则,同set容器 3.10 案例-员工分组3.10.1 案例描述 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作 员工信息有: 姓名 工资组成；部门分为：策划、美术、研发 随机给10名员工分配部门和工资 通过multimap进行信息的插入 key(部门编号) value(员工) 分部门显示员工信息 3.10.2 实现步骤 创建10名员工，放到vector中 遍历vector容器，取出每个员工，进行随机分组 分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中 分部门显示员工信息 案例代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;iostream&gt;using namespace std;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;map&gt;#include &lt;ctime&gt;/*- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作- 员工信息有: 姓名 工资组成；部门分为：策划、美术、研发- 随机给10名员工分配部门和工资- 通过multimap进行信息的插入 key(部门编号) value(员工)- 分部门显示员工信息*/#define CEHUA 0#define MEISHU 1#define YANFA 2class Worker&#123;public: string m_Name; int m_Salary;&#125;;void createWorker(vector&lt;Worker&gt;&amp;v)&#123; string nameSeed = &quot;ABCDEFGHIJ&quot;; for (int i = 0; i &lt; 10; i++) &#123; Worker worker; worker.m_Name = &quot;员工&quot;; worker.m_Name += nameSeed[i]; worker.m_Salary = rand() % 10000 + 10000; // 10000 ~ 19999 //将员工放入到容器中 v.push_back(worker); &#125;&#125;//员工分组void setGroup(vector&lt;Worker&gt;&amp;v,multimap&lt;int,Worker&gt;&amp;m)&#123; for (vector&lt;Worker&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; //产生随机部门编号 int deptId = rand() % 3; // 0 1 2 //将员工插入到分组中 //key部门编号，value具体员工 m.insert(make_pair(deptId, *it)); &#125;&#125;void showWorkerByGourp(multimap&lt;int,Worker&gt;&amp;m)&#123; // 0 A B C 1 D E 2 F G ... cout &lt;&lt; &quot;策划部门：&quot; &lt;&lt; endl; multimap&lt;int,Worker&gt;::iterator pos = m.find(CEHUA); int count = m.count(CEHUA); // 统计具体人数 int index = 0; for (; pos != m.end() &amp;&amp; index &lt; count; pos++ , index++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl; &#125; cout &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl; cout &lt;&lt; &quot;美术部门： &quot; &lt;&lt; endl; pos = m.find(MEISHU); count = m.count(MEISHU); // 统计具体人数 index = 0; for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl; &#125; cout &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl; cout &lt;&lt; &quot;研发部门： &quot; &lt;&lt; endl; pos = m.find(YANFA); count = m.count(YANFA); // 统计具体人数 index = 0; for (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++) &#123; cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl; &#125;&#125;int main() &#123; srand((unsigned int)time(NULL)); //1、创建员工 vector&lt;Worker&gt;vWorker; createWorker(vWorker); //2、员工分组 multimap&lt;int, Worker&gt;mWorker; setGroup(vWorker, mWorker); //3、分组显示员工 showWorkerByGourp(mWorker); ////测试 //for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++) //&#123; // cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; it-&gt;m_Salary &lt;&lt; endl; //&#125; system(&quot;pause&quot;); return 0;&#125; 总结： 当数据以键值对形式存在，可以考虑用map 或 multimap 4 STL- 函数对象4.1 函数对象4.1.1 函数对象概念概念： 重载函数调用操作符的类，其对象常称为函数对象 函数对象使用重载的()时，行为类似函数调用，也叫仿函数 本质： 函数对象(仿函数)是一个类，不是一个函数 4.1.2 函数对象使用特点： 函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值 函数对象超出普通函数的概念，函数对象可以有自己的状态 函数对象可以作为参数传递 示例: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;string&gt;//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值class MyAdd&#123;public : int operator()(int v1,int v2) &#123; return v1 + v2; &#125;&#125;;void test01()&#123; MyAdd myAdd; cout &lt;&lt; myAdd(10, 10) &lt;&lt; endl;&#125;//2、函数对象可以有自己的状态class MyPrint&#123;public: MyPrint() &#123; count = 0; &#125; void operator()(string test) &#123; cout &lt;&lt; test &lt;&lt; endl; count++; //统计使用次数 &#125; int count; //内部自己的状态&#125;;void test02()&#123; MyPrint myPrint; myPrint(&quot;hello world&quot;); myPrint(&quot;hello world&quot;); myPrint(&quot;hello world&quot;); cout &lt;&lt; &quot;myPrint调用次数为： &quot; &lt;&lt; myPrint.count &lt;&lt; endl;&#125;//3、函数对象可以作为参数传递void doPrint(MyPrint &amp;mp , string test)&#123; mp(test);&#125;void test03()&#123; MyPrint myPrint; doPrint(myPrint, &quot;Hello C++&quot;);&#125;int main() &#123; //test01(); //test02(); test03(); system(&quot;pause&quot;); return 0;&#125; 总结： 仿函数写法非常灵活，可以作为参数进行传递。 4.2 谓词4.2.1 谓词概念概念： 返回bool类型的仿函数称为谓词 如果operator()接受一个参数，那么叫做一元谓词 如果operator()接受两个参数，那么叫做二元谓词 4.2.2 一元谓词示例： 123456789101112131415161718192021222324252627282930313233343536#include &lt;vector&gt;#include &lt;algorithm&gt;//1.一元谓词struct GreaterFive&#123; bool operator()(int val) &#123; return val &gt; 5; &#125;&#125;;void test01() &#123; vector&lt;int&gt; v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i); &#125; vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive()); if (it == v.end()) &#123; cout &lt;&lt; &quot;没找到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：参数只有一个的谓词，称为一元谓词 4.2.3 二元谓词示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;vector&gt;#include &lt;algorithm&gt;//二元谓词class MyCompare&#123;public: bool operator()(int num1, int num2) &#123; return num1 &gt; num2; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.push_back(10); v.push_back(40); v.push_back(20); v.push_back(30); v.push_back(50); //默认从小到大 sort(v.begin(), v.end()); for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; cout &lt;&lt; &quot;----------------------------&quot; &lt;&lt; endl; //使用函数对象改变算法策略，排序从大到小 sort(v.begin(), v.end(), MyCompare()); for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：参数只有两个的谓词，称为二元谓词 4.3 内建函数对象4.3.1 内建函数对象意义概念： STL内建了一些函数对象 分类: 算术仿函数 关系仿函数 逻辑仿函数 用法： 这些仿函数所产生的对象，用法和一般函数完全相同 使用内建函数对象，需要引入头文件 #include&lt;functional&gt; 4.3.2 算术仿函数功能描述： 实现四则运算 其中negate是一元运算，其他都是二元运算 仿函数原型： template&lt;class T&gt; T plus&lt;T&gt; &#x2F;&#x2F;加法仿函数 template&lt;class T&gt; T minus&lt;T&gt; &#x2F;&#x2F;减法仿函数 template&lt;class T&gt; T multiplies&lt;T&gt; &#x2F;&#x2F;乘法仿函数 template&lt;class T&gt; T divides&lt;T&gt; &#x2F;&#x2F;除法仿函数 template&lt;class T&gt; T modulus&lt;T&gt; &#x2F;&#x2F;取模仿函数 template&lt;class T&gt; T negate&lt;T&gt; &#x2F;&#x2F;取反仿函数 示例： 123456789101112131415161718192021222324#include &lt;functional&gt;//negatevoid test01()&#123; negate&lt;int&gt; n; cout &lt;&lt; n(50) &lt;&lt; endl;&#125;//plusvoid test02()&#123; plus&lt;int&gt; p; cout &lt;&lt; p(10, 20) &lt;&lt; endl;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：使用内建函数对象时，需要引入头文件 #include &lt;functional&gt; 4.3.3 关系仿函数功能描述： 实现关系对比 仿函数原型： template&lt;class T&gt; bool equal_to&lt;T&gt; &#x2F;&#x2F;等于 template&lt;class T&gt; bool not_equal_to&lt;T&gt; &#x2F;&#x2F;不等于 template&lt;class T&gt; bool greater&lt;T&gt; &#x2F;&#x2F;大于 template&lt;class T&gt; bool greater_equal&lt;T&gt; &#x2F;&#x2F;大于等于 template&lt;class T&gt; bool less&lt;T&gt; &#x2F;&#x2F;小于 template&lt;class T&gt; bool less_equal&lt;T&gt; &#x2F;&#x2F;小于等于 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;functional&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;class MyCompare&#123;public: bool operator()(int v1,int v2) &#123; return v1 &gt; v2; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.push_back(10); v.push_back(30); v.push_back(50); v.push_back(40); v.push_back(20); for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; //自己实现仿函数 //sort(v.begin(), v.end(), MyCompare()); //STL内建仿函数 大于仿函数 sort(v.begin(), v.end(), greater&lt;int&gt;()); for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：关系仿函数中最常用的就是greater&lt;&gt;大于 4.3.4 逻辑仿函数功能描述： 实现逻辑运算 函数原型： template&lt;class T&gt; bool logical_and&lt;T&gt; &#x2F;&#x2F;逻辑与 template&lt;class T&gt; bool logical_or&lt;T&gt; &#x2F;&#x2F;逻辑或 template&lt;class T&gt; bool logical_not&lt;T&gt; &#x2F;&#x2F;逻辑非 示例： 123456789101112131415161718192021222324252627282930313233343536#include &lt;vector&gt;#include &lt;functional&gt;#include &lt;algorithm&gt;void test01()&#123; vector&lt;bool&gt; v; v.push_back(true); v.push_back(false); v.push_back(true); v.push_back(false); for (vector&lt;bool&gt;::iterator it = v.begin();it!= v.end();it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; //逻辑非 将v容器搬运到v2中，并执行逻辑非运算 vector&lt;bool&gt; v2; v2.resize(v.size()); transform(v.begin(), v.end(), v2.begin(), logical_not&lt;bool&gt;()); for (vector&lt;bool&gt;::iterator it = v2.begin(); it != v2.end(); it++) &#123; cout &lt;&lt; *it &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：逻辑仿函数实际应用较少，了解即可 5 STL- 常用算法概述: 算法主要是由头文件&lt;algorithm&gt; &lt;functional&gt; &lt;numeric&gt;组成。 &lt;algorithm&gt;是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等 &lt;numeric&gt;体积很小，只包括几个在序列上面进行简单数学运算的模板函数 &lt;functional&gt;定义了一些模板类,用以声明函数对象。 5.1 常用遍历算法学习目标： 掌握常用的遍历算法 算法简介： for_each &#x2F;&#x2F;遍历容器 transform &#x2F;&#x2F;搬运容器到另一个容器中 5.1.1 for_each功能描述： 实现遍历容器 函数原型： for_each(iterator beg, iterator end, _func); &#x2F;&#x2F; 遍历算法 遍历容器元素 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; _func 函数或者函数对象 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;algorithm&gt;#include &lt;vector&gt;//普通函数void print01(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;;&#125;//函数对象class print02 &#123; public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;//for_each算法基本用法void test01() &#123; vector&lt;int&gt; v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i); &#125; //遍历算法 for_each(v.begin(), v.end(), print01); cout &lt;&lt; endl; for_each(v.begin(), v.end(), print02()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：for_each在实际开发中是最常用遍历算法，需要熟练掌握 5.1.2 transform功能描述： 搬运容器到另一个容器中 函数原型： transform(iterator beg1, iterator end1, iterator beg2, _func); &#x2F;&#x2F;beg1 源容器开始迭代器 &#x2F;&#x2F;end1 源容器结束迭代器 &#x2F;&#x2F;beg2 目标容器开始迭代器 &#x2F;&#x2F;_func 函数或者函数对象 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;vector&gt;#include&lt;algorithm&gt;//常用遍历算法 搬运 transformclass TransForm&#123;public: int operator()(int val) &#123; return val; &#125;&#125;;class MyPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt;v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i); &#125; vector&lt;int&gt;vTarget; //目标容器 vTarget.resize(v.size()); // 目标容器需要提前开辟空间 transform(v.begin(), v.end(), vTarget.begin(), TransForm()); for_each(vTarget.begin(), vTarget.end(), MyPrint());&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 搬运的目标容器必须要提前开辟空间，否则无法正常搬运 5.2 常用查找算法学习目标： 掌握常用的查找算法 算法简介： find &#x2F;&#x2F;查找元素 find_if &#x2F;&#x2F;按条件查找元素 adjacent_find &#x2F;&#x2F;查找相邻重复元素 binary_search &#x2F;&#x2F;二分查找法 count &#x2F;&#x2F;统计元素个数 count_if &#x2F;&#x2F;按条件统计元素个数 5.2.1 find功能描述： 查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end() 函数原型： find(iterator beg, iterator end, value); &#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; value 查找的元素 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;void test01() &#123; vector&lt;int&gt; v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i + 1); &#125; //查找容器中是否有 5 这个元素 vector&lt;int&gt;::iterator it = find(v.begin(), v.end(), 5); if (it == v.end()) &#123; cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到:&quot; &lt;&lt; *it &lt;&lt; endl; &#125;&#125;class Person &#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; //重载== bool operator==(const Person&amp; p) &#123; if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) &#123; return true; &#125; return false; &#125;public: string m_Name; int m_Age;&#125;;void test02() &#123; vector&lt;Person&gt; v; //创建数据 Person p1(&quot;aaa&quot;, 10); Person p2(&quot;bbb&quot;, 20); Person p3(&quot;ccc&quot;, 30); Person p4(&quot;ddd&quot;, 40); v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); vector&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p2); if (it == v.end()) &#123; cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl; &#125;&#125; 总结： 利用find可以在容器中找指定的元素，返回值是迭代器 5.2.2 find_if功能描述： 按条件查找元素 函数原型： find_if(iterator beg, iterator end, _Pred); &#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; _Pred 函数或者谓词（返回bool类型的仿函数） 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;//内置数据类型class GreaterFive&#123;public: bool operator()(int val) &#123; return val &gt; 5; &#125;&#125;;void test01() &#123; vector&lt;int&gt; v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i + 1); &#125; vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive()); if (it == v.end()) &#123; cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到大于5的数字:&quot; &lt;&lt; *it &lt;&lt; endl; &#125;&#125;//自定义数据类型class Person &#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125;public: string m_Name; int m_Age;&#125;;class Greater20&#123;public: bool operator()(Person &amp;p) &#123; return p.m_Age &gt; 20; &#125;&#125;;void test02() &#123; vector&lt;Person&gt; v; //创建数据 Person p1(&quot;aaa&quot;, 10); Person p2(&quot;bbb&quot;, 20); Person p3(&quot;ccc&quot;, 30); Person p4(&quot;ddd&quot;, 40); v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); vector&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), Greater20()); if (it == v.end()) &#123; cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 年龄: &quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl; &#125;&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略 5.2.3 adjacent_find功能描述： 查找相邻重复元素 函数原型： adjacent_find(iterator beg, iterator end); &#x2F;&#x2F; 查找相邻重复元素,返回相邻元素的第一个位置的迭代器 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 示例： 1234567891011121314151617181920212223#include &lt;algorithm&gt;#include &lt;vector&gt;void test01()&#123; vector&lt;int&gt; v; v.push_back(1); v.push_back(2); v.push_back(5); v.push_back(2); v.push_back(4); v.push_back(4); v.push_back(3); //查找相邻重复元素 vector&lt;int&gt;::iterator it = adjacent_find(v.begin(), v.end()); if (it == v.end()) &#123; cout &lt;&lt; &quot;找不到!&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;找到相邻重复元素为:&quot; &lt;&lt; *it &lt;&lt; endl; &#125;&#125; 总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法 5.2.4 binary_search功能描述： 查找指定元素是否存在 函数原型： bool binary_search(iterator beg, iterator end, value); &#x2F;&#x2F; 查找指定的元素，查到 返回true 否则false &#x2F;&#x2F; 注意: 在无序序列中不可用 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; value 查找的元素 示例： 12345678910111213141516171819202122232425262728293031#include &lt;algorithm&gt;#include &lt;vector&gt;void test01()&#123; vector&lt;int&gt;v; for (int i = 0; i &lt; 10; i++) &#123; v.push_back(i); &#125; //二分查找 bool ret = binary_search(v.begin(), v.end(),2); if (ret) &#123; cout &lt;&lt; &quot;找到了&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列 5.2.5 count功能描述： 统计元素个数 函数原型： count(iterator beg, iterator end, value); &#x2F;&#x2F; 统计元素出现次数 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; value 统计的元素 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;algorithm&gt;#include &lt;vector&gt;//内置数据类型void test01()&#123; vector&lt;int&gt; v; v.push_back(1); v.push_back(2); v.push_back(4); v.push_back(5); v.push_back(3); v.push_back(4); v.push_back(4); int num = count(v.begin(), v.end(), 4); cout &lt;&lt; &quot;4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;&#125;//自定义数据类型class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; bool operator==(const Person &amp; p) &#123; if (this-&gt;m_Age == p.m_Age) &#123; return true; &#125; else &#123; return false; &#125; &#125; string m_Name; int m_Age;&#125;;void test02()&#123; vector&lt;Person&gt; v; Person p1(&quot;刘备&quot;, 35); Person p2(&quot;关羽&quot;, 35); Person p3(&quot;张飞&quot;, 35); Person p4(&quot;赵云&quot;, 30); Person p5(&quot;曹操&quot;, 25); v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); v.push_back(p5); Person p(&quot;诸葛亮&quot;,35); int num = count(v.begin(), v.end(), p); cout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 统计自定义数据类型时候，需要配合重载 operator== 5.2.6 count_if功能描述： 按条件统计元素个数 函数原型： count_if(iterator beg, iterator end, _Pred); &#x2F;&#x2F; 按条件统计元素出现次数 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; _Pred 谓词 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;algorithm&gt;#include &lt;vector&gt;class Greater4&#123;public: bool operator()(int val) &#123; return val &gt;= 4; &#125;&#125;;//内置数据类型void test01()&#123; vector&lt;int&gt; v; v.push_back(1); v.push_back(2); v.push_back(4); v.push_back(5); v.push_back(3); v.push_back(4); v.push_back(4); int num = count_if(v.begin(), v.end(), Greater4()); cout &lt;&lt; &quot;大于4的个数为： &quot; &lt;&lt; num &lt;&lt; endl;&#125;//自定义数据类型class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125; string m_Name; int m_Age;&#125;;class AgeLess35&#123;public: bool operator()(const Person &amp;p) &#123; return p.m_Age &lt; 35; &#125;&#125;;void test02()&#123; vector&lt;Person&gt; v; Person p1(&quot;刘备&quot;, 35); Person p2(&quot;关羽&quot;, 35); Person p3(&quot;张飞&quot;, 35); Person p4(&quot;赵云&quot;, 30); Person p5(&quot;曹操&quot;, 25); v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); v.push_back(p5); int num = count_if(v.begin(), v.end(), AgeLess35()); cout &lt;&lt; &quot;小于35岁的个数：&quot; &lt;&lt; num &lt;&lt; endl;&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：按值统计用count，按条件统计用count_if 5.3 常用排序算法学习目标： 掌握常用的排序算法 算法简介： sort &#x2F;&#x2F;对容器内元素进行排序 random_shuffle &#x2F;&#x2F;洗牌 指定范围内的元素随机调整次序 merge &#x2F;&#x2F; 容器元素合并，并存储到另一容器中 reverse &#x2F;&#x2F; 反转指定范围的元素 5.3.1 sort功能描述： 对容器内元素进行排序 函数原型： sort(iterator beg, iterator end, _Pred); &#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; _Pred 谓词 示例： 1234567891011121314151617181920212223242526272829303132333435#include &lt;algorithm&gt;#include &lt;vector&gt;void myPrint(int val)&#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;;&#125;void test01() &#123; vector&lt;int&gt; v; v.push_back(10); v.push_back(30); v.push_back(50); v.push_back(20); v.push_back(40); //sort默认从小到大排序 sort(v.begin(), v.end()); for_each(v.begin(), v.end(), myPrint); cout &lt;&lt; endl; //从大到小排序 sort(v.begin(), v.end(), greater&lt;int&gt;()); for_each(v.begin(), v.end(), myPrint); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：sort属于开发中最常用的算法之一，需熟练掌握 5.3.2 random_shuffle功能描述： 洗牌 指定范围内的元素随机调整次序 函数原型： random_shuffle(iterator beg, iterator end); &#x2F;&#x2F; 指定范围内的元素随机调整次序 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 示例： 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;ctime&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; srand((unsigned int)time(NULL)); vector&lt;int&gt; v; for(int i = 0 ; i &lt; 10;i++) &#123; v.push_back(i); &#125; for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl; //打乱顺序 random_shuffle(v.begin(), v.end()); for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：random_shuffle洗牌算法比较实用，使用时记得加随机数种子 5.3.3 merge功能描述： 两个容器元素合并，并存储到另一容器中 函数原型： merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); &#x2F;&#x2F; 容器元素合并，并存储到另一容器中 &#x2F;&#x2F; 注意: 两个容器必须是有序的 &#x2F;&#x2F; beg1 容器1开始迭代器&#x2F;&#x2F; end1 容器1结束迭代器&#x2F;&#x2F; beg2 容器2开始迭代器&#x2F;&#x2F; end2 容器2结束迭代器&#x2F;&#x2F; dest 目标容器开始迭代器 示例： 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; vector&lt;int&gt; v2; for (int i = 0; i &lt; 10 ; i++) &#123; v1.push_back(i); v2.push_back(i + 1); &#125; vector&lt;int&gt; vtarget; //目标容器需要提前开辟空间 vtarget.resize(v1.size() + v2.size()); //合并 需要两个有序序列 merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin()); for_each(vtarget.begin(), vtarget.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：merge合并的两个容器必须的有序序列 5.3.4 reverse功能描述： 将容器内元素进行反转 函数原型： reverse(iterator beg, iterator end); &#x2F;&#x2F; 反转指定范围的元素 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 示例： 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.push_back(10); v.push_back(30); v.push_back(50); v.push_back(20); v.push_back(40); cout &lt;&lt; &quot;反转前： &quot; &lt;&lt; endl; for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl; cout &lt;&lt; &quot;反转后： &quot; &lt;&lt; endl; reverse(v.begin(), v.end()); for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：reverse反转区间内元素，面试题可能涉及到 5.4 常用拷贝和替换算法学习目标： 掌握常用的拷贝和替换算法 算法简介： copy &#x2F;&#x2F; 容器内指定范围的元素拷贝到另一容器中 replace &#x2F;&#x2F; 将容器内指定范围的旧元素修改为新元素 replace_if &#x2F;&#x2F; 容器内指定范围满足条件的元素替换为新元素 swap &#x2F;&#x2F; 互换两个容器的元素 5.4.1 copy功能描述： 容器内指定范围的元素拷贝到另一容器中 函数原型： copy(iterator beg, iterator end, iterator dest); &#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; dest 目标起始迭代器 示例： 12345678910111213141516171819202122232425262728293031323334#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i + 1); &#125; vector&lt;int&gt; v2; v2.resize(v1.size()); copy(v1.begin(), v1.end(), v2.begin()); for_each(v2.begin(), v2.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：利用copy算法在拷贝时，目标容器记得提前开辟空间 5.4.2 replace功能描述： 将容器内指定范围的旧元素修改为新元素 函数原型： replace(iterator beg, iterator end, oldvalue, newvalue); &#x2F;&#x2F; 将区间内旧元素 替换成 新元素 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; oldvalue 旧元素 &#x2F;&#x2F; newvalue 新元素 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.push_back(20); v.push_back(30); v.push_back(20); v.push_back(40); v.push_back(50); v.push_back(10); v.push_back(20); cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl; for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl; //将容器中的20 替换成 2000 cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl; replace(v.begin(), v.end(), 20,2000); for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：replace会替换区间内满足条件的元素 5.4.3 replace_if功能描述: 将区间内满足条件的元素，替换成指定元素 函数原型： replace_if(iterator beg, iterator end, _pred, newvalue); &#x2F;&#x2F; 按条件替换元素，满足条件的替换成指定元素 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; _pred 谓词 &#x2F;&#x2F; newvalue 替换的新元素 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;class ReplaceGreater30&#123;public: bool operator()(int val) &#123; return val &gt;= 30; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.push_back(20); v.push_back(30); v.push_back(20); v.push_back(40); v.push_back(50); v.push_back(10); v.push_back(20); cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl; for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl; //将容器中大于等于的30 替换成 3000 cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl; replace_if(v.begin(), v.end(), ReplaceGreater30(), 3000); for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：replace_if按条件查找，可以利用仿函数灵活筛选满足的条件 5.4.4 swap功能描述： 互换两个容器的元素 函数原型： swap(container c1, container c2); &#x2F;&#x2F; 互换两个容器的元素 &#x2F;&#x2F; c1容器1 &#x2F;&#x2F; c2容器2 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;algorithm&gt;#include &lt;vector&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; vector&lt;int&gt; v2; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); v2.push_back(i+100); &#125; cout &lt;&lt; &quot;交换前： &quot; &lt;&lt; endl; for_each(v1.begin(), v1.end(), myPrint()); cout &lt;&lt; endl; for_each(v2.begin(), v2.end(), myPrint()); cout &lt;&lt; endl; cout &lt;&lt; &quot;交换后： &quot; &lt;&lt; endl; swap(v1, v2); for_each(v1.begin(), v1.end(), myPrint()); cout &lt;&lt; endl; for_each(v2.begin(), v2.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：swap交换容器时，注意交换的容器要同种类型 5.5 常用算术生成算法学习目标： 掌握常用的算术生成算法 注意： 算术生成算法属于小型算法，使用时包含的头文件为 #include &lt;numeric&gt; 算法简介： accumulate &#x2F;&#x2F; 计算容器元素累计总和 fill &#x2F;&#x2F; 向容器中添加元素 5.5.1 accumulate功能描述： 计算区间内 容器元素累计总和 函数原型： accumulate(iterator beg, iterator end, value); &#x2F;&#x2F; 计算容器元素累计总和 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; value 起始值 示例： 12345678910111213141516171819202122#include &lt;numeric&gt;#include &lt;vector&gt;void test01()&#123; vector&lt;int&gt; v; for (int i = 0; i &lt;= 100; i++) &#123; v.push_back(i); &#125; int total = accumulate(v.begin(), v.end(), 0); cout &lt;&lt; &quot;total = &quot; &lt;&lt; total &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：accumulate使用时头文件注意是 numeric，这个算法很实用 5.5.2 fill功能描述： 向容器中填充指定的元素 函数原型： fill(iterator beg, iterator end, value); &#x2F;&#x2F; 向容器中填充元素 &#x2F;&#x2F; beg 开始迭代器 &#x2F;&#x2F; end 结束迭代器 &#x2F;&#x2F; value 填充的值 示例： 123456789101112131415161718192021222324252627282930313233#include &lt;numeric&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v; v.resize(10); //填充 fill(v.begin(), v.end(), 100); for_each(v.begin(), v.end(), myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：利用fill可以将容器区间内元素填充为 指定的值 5.6 常用集合算法学习目标： 掌握常用的集合算法 算法简介： set_intersection &#x2F;&#x2F; 求两个容器的交集 set_union &#x2F;&#x2F; 求两个容器的并集 set_difference &#x2F;&#x2F; 求两个容器的差集 5.6.1 set_intersection功能描述： 求两个容器的交集 函数原型： set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); &#x2F;&#x2F; 求两个集合的交集 &#x2F;&#x2F; 注意:两个集合必须是有序序列 &#x2F;&#x2F; beg1 容器1开始迭代器&#x2F;&#x2F; end1 容器1结束迭代器&#x2F;&#x2F; beg2 容器2开始迭代器&#x2F;&#x2F; end2 容器2结束迭代器&#x2F;&#x2F; dest 目标容器开始迭代器 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; vector&lt;int&gt; v2; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); v2.push_back(i+5); &#125; vector&lt;int&gt; vTarget; //取两个里面较小的值给目标容器开辟空间 vTarget.resize(min(v1.size(), v2.size())); //返回目标容器的最后一个元素的迭代器地址 vector&lt;int&gt;::iterator itEnd = set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin()); for_each(vTarget.begin(), itEnd, myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 求交集的两个集合必须的有序序列 目标容器开辟空间需要从两个容器中取小值 set_intersection返回值既是交集中最后一个元素的位置 5.6.2 set_union功能描述： 求两个集合的并集 函数原型： set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); &#x2F;&#x2F; 求两个集合的并集 &#x2F;&#x2F; 注意:两个集合必须是有序序列 &#x2F;&#x2F; beg1 容器1开始迭代器&#x2F;&#x2F; end1 容器1结束迭代器&#x2F;&#x2F; beg2 容器2开始迭代器&#x2F;&#x2F; end2 容器2结束迭代器&#x2F;&#x2F; dest 目标容器开始迭代器 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; vector&lt;int&gt; v2; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); v2.push_back(i+5); &#125; vector&lt;int&gt; vTarget; //取两个容器的和给目标容器开辟空间 vTarget.resize(v1.size() + v2.size()); //返回目标容器的最后一个元素的迭代器地址 vector&lt;int&gt;::iterator itEnd = set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin()); for_each(vTarget.begin(), itEnd, myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 求并集的两个集合必须的有序序列 目标容器开辟空间需要两个容器相加 set_union返回值既是并集中最后一个元素的位置 5.6.3 set_difference功能描述： 求两个集合的差集 函数原型： set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); &#x2F;&#x2F; 求两个集合的差集 &#x2F;&#x2F; 注意:两个集合必须是有序序列 &#x2F;&#x2F; beg1 容器1开始迭代器&#x2F;&#x2F; end1 容器1结束迭代器&#x2F;&#x2F; beg2 容器2开始迭代器&#x2F;&#x2F; end2 容器2结束迭代器&#x2F;&#x2F; dest 目标容器开始迭代器 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;vector&gt;#include &lt;algorithm&gt;class myPrint&#123;public: void operator()(int val) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#125;;void test01()&#123; vector&lt;int&gt; v1; vector&lt;int&gt; v2; for (int i = 0; i &lt; 10; i++) &#123; v1.push_back(i); v2.push_back(i+5); &#125; vector&lt;int&gt; vTarget; //取两个里面较大的值给目标容器开辟空间 vTarget.resize( max(v1.size() , v2.size())); //返回目标容器的最后一个元素的迭代器地址 cout &lt;&lt; &quot;v1与v2的差集为： &quot; &lt;&lt; endl; vector&lt;int&gt;::iterator itEnd = set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin()); for_each(vTarget.begin(), itEnd, myPrint()); cout &lt;&lt; endl; cout &lt;&lt; &quot;v2与v1的差集为： &quot; &lt;&lt; endl; itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin()); for_each(vTarget.begin(), itEnd, myPrint()); cout &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 求差集的两个集合必须的有序序列 目标容器开辟空间需要从两个容器取较大值 set_difference返回值既是差集中最后一个元素的位置","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"C++ 核心编程","slug":"03 【编程学习】/C++核心编程","date":"2019-01-17T03:00:11.654Z","updated":"2024-09-22T15:41:25.740Z","comments":true,"path":"2019/01/17/03 【编程学习】/C++核心编程/","link":"","permalink":"http://example.com/2019/01/17/03%20%E3%80%90%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E3%80%91/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/","excerpt":"","text":"C++核心编程本阶段主要针对C++&#x3D;&#x3D;面向对象&#x3D;&#x3D;编程技术做详细讲解，探讨C++中的核心和精髓。 1 内存分区模型C++程序在执行时，将内存大方向划分为4个区域 代码区：存放函数体的二进制代码，由操作系统进行管理的 全局区：存放全局变量和静态变量以及常量 栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等 堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收 内存四区意义： 不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程 1.1 程序运行前​ 在程序编译后，生成了exe可执行程序，未执行该程序前分为两个区域 ​ 代码区： ​ 存放 CPU 执行的机器指令 ​ 代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可 ​ 代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令 ​ 全局区： ​ 全局变量和静态变量存放在此. ​ 全局区还包含了常量区, 字符串常量和其他常量也存放在此. ​ &#x3D;&#x3D;该区域的数据在程序结束后由操作系统释放&#x3D;&#x3D;. 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243//全局变量int g_a = 10;int g_b = 10;//全局常量const int c_g_a = 10;const int c_g_b = 10;int main() &#123; //局部变量 int a = 10; int b = 10; //打印地址 cout &lt;&lt; &quot;局部变量a地址为： &quot; &lt;&lt; (int)&amp;a &lt;&lt; endl; cout &lt;&lt; &quot;局部变量b地址为： &quot; &lt;&lt; (int)&amp;b &lt;&lt; endl; cout &lt;&lt; &quot;全局变量g_a地址为： &quot; &lt;&lt; (int)&amp;g_a &lt;&lt; endl; cout &lt;&lt; &quot;全局变量g_b地址为： &quot; &lt;&lt; (int)&amp;g_b &lt;&lt; endl; //静态变量 static int s_a = 10; static int s_b = 10; cout &lt;&lt; &quot;静态变量s_a地址为： &quot; &lt;&lt; (int)&amp;s_a &lt;&lt; endl; cout &lt;&lt; &quot;静态变量s_b地址为： &quot; &lt;&lt; (int)&amp;s_b &lt;&lt; endl; cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world&quot; &lt;&lt; endl; cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world1&quot; &lt;&lt; endl; cout &lt;&lt; &quot;全局常量c_g_a地址为： &quot; &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl; cout &lt;&lt; &quot;全局常量c_g_b地址为： &quot; &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl; const int c_l_a = 10; const int c_l_b = 10; cout &lt;&lt; &quot;局部常量c_l_a地址为： &quot; &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl; cout &lt;&lt; &quot;局部常量c_l_b地址为： &quot; &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 打印结果： 总结： C++中在程序运行前分为全局区和代码区 代码区特点是共享和只读 全局区中存放全局变量、静态变量、常量 常量区中存放 const修饰的全局常量 和 字符串常量 1.2 程序运行后​ 栈区： ​ 由编译器自动分配释放, 存放函数的参数值,局部变量等 ​ 注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放 示例： 1234567891011121314151617int * func()&#123; int a = 10; return &amp;a;&#125;int main() &#123; int *p = func(); cout &lt;&lt; *p &lt;&lt; endl; cout &lt;&lt; *p &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; ​ 堆区： ​ 由程序员分配释放,若程序员不释放,程序结束时由操作系统回收 ​ 在C++中主要利用new在堆区开辟内存 示例： 1234567891011121314151617int* func()&#123; int* a = new int(10); return a;&#125;int main() &#123; int *p = func(); cout &lt;&lt; *p &lt;&lt; endl; cout &lt;&lt; *p &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结： 堆区数据由程序员管理开辟和释放 堆区数据利用new关键字进行开辟内存 1.3 new操作符​ C++中利用&#x3D;&#x3D;new&#x3D;&#x3D;操作符在堆区开辟数据 ​ 堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 &#x3D;&#x3D;delete&#x3D;&#x3D; ​ 语法： new 数据类型 ​ 利用new创建的数据，会返回该数据对应的类型的指针 示例1： 基本语法 12345678910111213141516171819202122int* func()&#123; int* a = new int(10); return a;&#125;int main() &#123; int *p = func(); cout &lt;&lt; *p &lt;&lt; endl; cout &lt;&lt; *p &lt;&lt; endl; //利用delete释放堆区数据 delete p; //cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问 system(&quot;pause&quot;); return 0;&#125; 示例2：开辟数组 12345678910111213141516171819202122//堆区开辟数组int main() &#123; int* arr = new int[10]; for (int i = 0; i &lt; 10; i++) &#123; arr[i] = i + 100; &#125; for (int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; endl; &#125; //释放数组 delete 后加 [] delete[] arr; system(&quot;pause&quot;); return 0;&#125; 2 引用2.1 引用的基本使用**作用： **给变量起别名 语法： 数据类型 &amp;别名 = 原名 示例： 1234567891011121314151617int main() &#123; int a = 10; int &amp;b = a; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; b = 100; cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 2.2 引用注意事项 引用必须初始化 引用在初始化后，不可以改变 示例： 12345678910111213141516int main() &#123; int a = 10; int b = 20; //int &amp;c; //错误，引用必须初始化 int &amp;c = a; //一旦初始化后，就不可以更改 c = b; //这是赋值操作，不是更改引用 cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 2.3 引用做函数参数作用：函数传参时，可以利用引用的技术让形参修饰实参 优点：可以简化指针修改实参 示例： 12345678910111213141516171819202122232425262728293031323334353637383940//1. 值传递void mySwap01(int a, int b) &#123; int temp = a; a = b; b = temp;&#125;//2. 地址传递void mySwap02(int* a, int* b) &#123; int temp = *a; *a = *b; *b = temp;&#125;//3. 引用传递void mySwap03(int&amp; a, int&amp; b) &#123; int temp = a; a = b; b = temp;&#125;int main() &#123; int a = 10; int b = 20; mySwap01(a, b); cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl; mySwap02(&amp;a, &amp;b); cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl; mySwap03(a, b); cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单 2.4 引用做函数返回值作用：引用是可以作为函数的返回值存在的 注意：不要返回局部变量引用 用法：函数调用作为左值 示例： 123456789101112131415161718192021222324252627282930313233//返回局部变量引用int&amp; test01() &#123; int a = 10; //局部变量 return a;&#125;//返回静态变量引用int&amp; test02() &#123; static int a = 20; return a;&#125;int main() &#123; //不能返回局部变量的引用 int&amp; ref = test01(); cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl; cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl; //如果函数做左值，那么必须返回引用 int&amp; ref2 = test02(); cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl; cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl; test02() = 1000; cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl; cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; ​ 2.5 引用的本质本质：引用的本质在c++内部实现是一个指针常量. 讲解示例： 1234567891011121314151617//发现是引用，转换为 int* const ref = &amp;a;void func(int&amp; ref)&#123; ref = 100; // ref是引用，转换为*ref = 100&#125;int main()&#123; int a = 10; //自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改 int&amp; ref = a; ref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20; cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl; func(a); return 0;&#125; 结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了 2.6 常量引用作用：常量引用主要用来修饰形参，防止误操作 在函数形参列表中，可以加&#x3D;&#x3D;const修饰形参&#x3D;&#x3D;，防止形参改变实参 示例： 1234567891011121314151617181920212223//引用使用的场景，通常用来修饰形参void showValue(const int&amp; v) &#123; //v += 10; cout &lt;&lt; v &lt;&lt; endl;&#125;int main() &#123; //int&amp; ref = 10; 引用本身需要一个合法的内存空间，因此这行错误 //加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp; const int&amp; ref = 10; //ref = 100; //加入const后不可以修改变量 cout &lt;&lt; ref &lt;&lt; endl; //函数中利用常量引用防止误操作修改实参 int a = 10; showValue(a); system(&quot;pause&quot;); return 0;&#125; 3 函数提高3.1 函数默认参数在C++中，函数的形参列表中的形参是可以有默认值的。 语法： 返回值类型 函数名 （参数= 默认值）&#123;&#125; 示例： 1234567891011121314151617181920int func(int a, int b = 10, int c = 10) &#123; return a + b + c;&#125;//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数int func2(int a = 10, int b = 10);int func2(int a, int b) &#123; return a + b;&#125;int main() &#123; cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(20, 20) &lt;&lt; endl; cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(100) &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 3.2 函数占位参数C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置 语法： 返回值类型 函数名 (数据类型)&#123;&#125; 在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术 示例： 12345678910111213//函数占位参数 ，占位参数也可以有默认参数void func(int a, int) &#123; cout &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;&#125;int main() &#123; func(10,10); //占位参数必须填补 system(&quot;pause&quot;); return 0;&#125; 3.3 函数重载3.3.1 函数重载概述作用：函数名可以相同，提高复用性 函数重载满足条件： 同一个作用域下 函数名称相同 函数参数类型不同 或者 个数不同 或者 顺序不同 注意: 函数的返回值不可以作为函数重载的条件 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041//函数重载需要函数都在同一个作用域下void func()&#123; cout &lt;&lt; &quot;func 的调用！&quot; &lt;&lt; endl;&#125;void func(int a)&#123; cout &lt;&lt; &quot;func (int a) 的调用！&quot; &lt;&lt; endl;&#125;void func(double a)&#123; cout &lt;&lt; &quot;func (double a)的调用！&quot; &lt;&lt; endl;&#125;void func(int a ,double b)&#123; cout &lt;&lt; &quot;func (int a ,double b) 的调用！&quot; &lt;&lt; endl;&#125;void func(double a ,int b)&#123; cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;&#125;//函数返回值不可以作为函数重载条件//int func(double a, int b)//&#123;// cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;//&#125;int main() &#123; func(); func(10); func(3.14); func(10,3.14); func(3.14 , 10); system(&quot;pause&quot;); return 0;&#125; 3.3.2 函数重载注意事项 引用作为重载条件 函数重载碰到函数默认参数 示例： 123456789101112131415161718192021222324252627282930313233343536373839//函数重载注意事项//1、引用作为重载条件void func(int &amp;a)&#123; cout &lt;&lt; &quot;func (int &amp;a) 调用 &quot; &lt;&lt; endl;&#125;void func(const int &amp;a)&#123; cout &lt;&lt; &quot;func (const int &amp;a) 调用 &quot; &lt;&lt; endl;&#125;//2、函数重载碰到函数默认参数void func2(int a, int b = 10)&#123; cout &lt;&lt; &quot;func2(int a, int b = 10) 调用&quot; &lt;&lt; endl;&#125;void func2(int a)&#123; cout &lt;&lt; &quot;func2(int a) 调用&quot; &lt;&lt; endl;&#125;int main() &#123; int a = 10; func(a); //调用无const func(10);//调用有const //func2(10); //碰到默认参数产生歧义，需要避免 system(&quot;pause&quot;); return 0;&#125; 4 类和对象C++面向对象的三大特性为：&#x3D;&#x3D;封装、继承、多态&#x3D;&#x3D; C++认为&#x3D;&#x3D;万事万物都皆为对象&#x3D;&#x3D;，对象上有其属性和行为 例如： ​ 人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌… ​ 车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调… ​ 具有相同性质的&#x3D;&#x3D;对象&#x3D;&#x3D;，我们可以抽象称为&#x3D;&#x3D;类&#x3D;&#x3D;，人属于人类，车属于车类 4.1 封装4.1.1 封装的意义封装是C++面向对象三大特性之一 封装的意义： 将属性和行为作为一个整体，表现生活中的事物 将属性和行为加以权限控制 封装意义一： ​ 在设计类的时候，属性和行为写在一起，表现事物 语法： class 类名&#123; 访问权限： 属性 / 行为 &#125;; 示例1：设计一个圆类，求圆的周长 示例代码： 123456789101112131415161718192021222324252627282930313233343536373839//圆周率const double PI = 3.14;//1、封装的意义//将属性和行为作为一个整体，用来表现生活中的事物//封装一个圆类，求圆的周长//class代表设计一个类，后面跟着的是类名class Circle&#123;public: //访问权限 公共的权限 //属性 int m_r;//半径 //行为 //获取到圆的周长 double calculateZC() &#123; //2 * pi * r //获取圆的周长 return 2 * PI * m_r; &#125;&#125;;int main() &#123; //通过圆类，创建圆的对象 // c1就是一个具体的圆 Circle c1; c1.m_r = 10; //给圆对象的半径 进行赋值操作 //2 * pi * 10 = = 62.8 cout &lt;&lt; &quot;圆的周长为： &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 示例2：设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号 示例2代码： 123456789101112131415161718192021222324252627282930//学生类class Student &#123;public: void setName(string name) &#123; m_name = name; &#125; void setID(int id) &#123; m_id = id; &#125; void showStudent() &#123; cout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl; &#125;public: string m_name; int m_id;&#125;;int main() &#123; Student stu; stu.setName(&quot;德玛西亚&quot;); stu.setID(250); stu.showStudent(); system(&quot;pause&quot;); return 0;&#125; 封装意义二： 类在设计时，可以把属性和行为放在不同的权限下，加以控制 访问权限有三种： public 公共权限 protected 保护权限 private 私有权限 示例： 123456789101112131415161718192021222324252627282930313233343536373839//三种权限//公共权限 public 类内可以访问 类外可以访问//保护权限 protected 类内可以访问 类外不可以访问//私有权限 private 类内可以访问 类外不可以访问class Person&#123; //姓名 公共权限public: string m_Name; //汽车 保护权限protected: string m_Car; //银行卡密码 私有权限private: int m_Password;public: void func() &#123; m_Name = &quot;张三&quot;; m_Car = &quot;拖拉机&quot;; m_Password = 123456; &#125;&#125;;int main() &#123; Person p; p.m_Name = &quot;李四&quot;; //p.m_Car = &quot;奔驰&quot;; //保护权限类外访问不到 //p.m_Password = 123; //私有权限类外访问不到 system(&quot;pause&quot;); return 0;&#125; 4.1.2 struct和class区别在C++中 struct和class唯一的区别就在于 默认的访问权限不同 区别： struct 默认权限为公共 class 默认权限为私有 12345678910111213141516171819202122class C1&#123; int m_A; //默认是私有权限&#125;;struct C2&#123; int m_A; //默认是公共权限&#125;;int main() &#123; C1 c1; c1.m_A = 10; //错误，访问权限是私有 C2 c2; c2.m_A = 10; //正确，访问权限是公共 system(&quot;pause&quot;); return 0;&#125; 4.1.3 成员属性设置为私有优点1：将所有成员属性设置为私有，可以自己控制读写权限 优点2：对于写权限，我们可以检测数据的有效性 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859class Person &#123;public: //姓名设置可读可写 void setName(string name) &#123; m_Name = name; &#125; string getName() &#123; return m_Name; &#125; //获取年龄 int getAge() &#123; return m_Age; &#125; //设置年龄 void setAge(int age) &#123; if (age &lt; 0 || age &gt; 150) &#123; cout &lt;&lt; &quot;你个老妖精!&quot; &lt;&lt; endl; return; &#125; m_Age = age; &#125; //情人设置为只写 void setLover(string lover) &#123; m_Lover = lover; &#125;private: string m_Name; //可读可写 姓名 int m_Age; //只读 年龄 string m_Lover; //只写 情人&#125;;int main() &#123; Person p; //姓名设置 p.setName(&quot;张三&quot;); cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.getName() &lt;&lt; endl; //年龄设置 p.setAge(50); cout &lt;&lt; &quot;年龄： &quot; &lt;&lt; p.getAge() &lt;&lt; endl; //情人设置 p.setLover(&quot;苍井&quot;); //cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl; //只写属性，不可以读取 system(&quot;pause&quot;); return 0;&#125; 练习案例1：设计立方体类 设计立方体类(Cube) 求出立方体的面积和体积 分别用全局函数和成员函数判断两个立方体是否相等。 练习案例2：点和圆的关系 设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。 4.2 对象的初始化和清理 生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全 C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。 4.2.1 构造函数和析构函数对象的初始化和清理也是两个非常重要的安全问题 ​ 一个对象或者变量没有初始状态，对其使用后果是未知 ​ 同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题 c++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。 对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供 编译器提供的构造函数和析构函数是空实现。 构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。 析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。 构造函数语法：类名()&#123;&#125; 构造函数，没有返回值也不写void 函数名称与类名相同 构造函数可以有参数，因此可以发生重载 程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次 析构函数语法： ~类名()&#123;&#125; 析构函数，没有返回值也不写void 函数名称与类名相同,在名称前加上符号 ~ 析构函数不可以有参数，因此不可以发生重载 程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次 1234567891011121314151617181920212223242526272829class Person&#123;public: //构造函数 Person() &#123; cout &lt;&lt; &quot;Person的构造函数调用&quot; &lt;&lt; endl; &#125; //析构函数 ~Person() &#123; cout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl; &#125;&#125;;void test01()&#123; Person p;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.2.2 构造函数的分类及调用两种分类方式： ​ 按参数分为： 有参构造和无参构造 ​ 按类型分为： 普通构造和拷贝构造 三种调用方式： ​ 括号法 ​ 显示法 ​ 隐式转换法 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364//1、构造函数分类// 按照参数分类分为 有参和无参构造 无参又称为默认构造函数// 按照类型分类分为 普通构造和拷贝构造class Person &#123;public: //无参（默认）构造函数 Person() &#123; cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl; &#125; //有参构造函数 Person(int a) &#123; age = a; cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl; &#125; //拷贝构造函数 Person(const Person&amp; p) &#123; age = p.age; cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl; &#125; //析构函数 ~Person() &#123; cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl; &#125;public: int age;&#125;;//2、构造函数的调用//调用无参构造函数void test01() &#123; Person p; //调用无参构造函数&#125;//调用有参的构造函数void test02() &#123; //2.1 括号法，常用 Person p1(10); //注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明 //Person p2(); //2.2 显式法 Person p2 = Person(10); Person p3 = Person(p2); //Person(10)单独写就是匿名对象 当前行结束之后，马上析构 //2.3 隐式转换法 Person p4 = 10; // Person p4 = Person(10); Person p5 = p4; // Person p5 = Person(p4); //注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明 //Person p5(p4);&#125;int main() &#123; test01(); //test02(); system(&quot;pause&quot;); return 0;&#125; 4.2.3 拷贝构造函数调用时机C++中拷贝构造函数调用时机通常有三种情况 使用一个已经创建完毕的对象来初始化一个新对象 值传递的方式给函数参数传值 以值方式返回局部对象 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class Person &#123;public: Person() &#123; cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl; mAge = 0; &#125; Person(int age) &#123; cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl; mAge = age; &#125; Person(const Person&amp; p) &#123; cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl; mAge = p.mAge; &#125; //析构函数在释放内存之前调用 ~Person() &#123; cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl; &#125;public: int mAge;&#125;;//1. 使用一个已经创建完毕的对象来初始化一个新对象void test01() &#123; Person man(100); //p对象已经创建完毕 Person newman(man); //调用拷贝构造函数 Person newman2 = man; //拷贝构造 //Person newman3; //newman3 = man; //不是调用拷贝构造函数，赋值操作&#125;//2. 值传递的方式给函数参数传值//相当于Person p1 = p;void doWork(Person p1) &#123;&#125;void test02() &#123; Person p; //无参构造函数 doWork(p);&#125;//3. 以值方式返回局部对象Person doWork2()&#123; Person p1; cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl; return p1;&#125;void test03()&#123; Person p = doWork2(); cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;&#125;int main() &#123; //test01(); //test02(); test03(); system(&quot;pause&quot;); return 0;&#125; 4.2.4 构造函数调用规则默认情况下，c++编译器至少给一个类添加3个函数 1．默认构造函数(无参，函数体为空) 2．默认析构函数(无参，函数体为空) 3．默认拷贝构造函数，对属性进行值拷贝 构造函数调用规则如下： 如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造 如果用户定义拷贝构造函数，c++不会再提供其他构造函数 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354class Person &#123;public: //无参（默认）构造函数 Person() &#123; cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl; &#125; //有参构造函数 Person(int a) &#123; age = a; cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl; &#125; //拷贝构造函数 Person(const Person&amp; p) &#123; age = p.age; cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl; &#125; //析构函数 ~Person() &#123; cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl; &#125;public: int age;&#125;;void test01()&#123; Person p1(18); //如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作 Person p2(p1); cout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;void test02()&#123; //如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造 Person p1; //此时如果用户自己没有提供默认构造，会出错 Person p2(10); //用户提供的有参 Person p3(p2); //此时如果用户没有提供拷贝构造，编译器会提供 //如果用户提供拷贝构造，编译器不会提供其他构造函数 Person p4; //此时如果用户自己没有提供默认构造，会出错 Person p5(10); //此时如果用户自己没有提供有参，会出错 Person p6(p5); //用户自己提供拷贝构造&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.2.5 深拷贝与浅拷贝深浅拷贝是面试经典问题，也是常见的一个坑 浅拷贝：简单的赋值拷贝操作 深拷贝：在堆区重新申请空间，进行拷贝操作 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556class Person &#123;public: //无参（默认）构造函数 Person() &#123; cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl; &#125; //有参构造函数 Person(int age ,int height) &#123; cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl; m_age = age; m_height = new int(height); &#125; //拷贝构造函数 Person(const Person&amp; p) &#123; cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl; //如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题 m_age = p.m_age; m_height = new int(*p.m_height); &#125; //析构函数 ~Person() &#123; cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl; if (m_height != NULL) &#123; delete m_height; &#125; &#125;public: int m_age; int* m_height;&#125;;void test01()&#123; Person p1(18, 180); Person p2(p1); cout &lt;&lt; &quot;p1的年龄： &quot; &lt;&lt; p1.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p1.m_height &lt;&lt; endl; cout &lt;&lt; &quot;p2的年龄： &quot; &lt;&lt; p2.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p2.m_height &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题 4.2.6 初始化列表作用： C++提供了初始化列表语法，用来初始化属性 语法：构造函数()：属性1(值1),属性2（值2）... &#123;&#125; 示例： 123456789101112131415161718192021222324252627282930313233class Person &#123;public: ////传统方式初始化 //Person(int a, int b, int c) &#123; // m_A = a; // m_B = b; // m_C = c; //&#125; //初始化列表方式初始化 Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) &#123;&#125; void PrintPerson() &#123; cout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl; cout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl; cout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl; &#125;private: int m_A; int m_B; int m_C;&#125;;int main() &#123; Person p(1, 2, 3); p.PrintPerson(); system(&quot;pause&quot;); return 0;&#125; 4.2.7 类对象作为类成员C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员 例如： 12345class A &#123;&#125;class B&#123; A a；&#125; B类中有对象A作为成员，A为对象成员 那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？ 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class Phone&#123;public: Phone(string name) &#123; m_PhoneName = name; cout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl; &#125; ~Phone() &#123; cout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl; &#125; string m_PhoneName;&#125;;class Person&#123;public: //初始化列表可以告诉编译器调用哪一个构造函数 Person(string name, string pName) :m_Name(name), m_Phone(pName) &#123; cout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl; &#125; ~Person() &#123; cout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl; &#125; void playGame() &#123; cout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl; &#125; string m_Name; Phone m_Phone;&#125;;void test01()&#123; //当类中成员是其他类对象时，我们称该成员为 对象成员 //构造的顺序是 ：先调用对象成员的构造，再调用本类构造 //析构顺序与构造相反 Person p(&quot;张三&quot; , &quot;苹果X&quot;); p.playGame();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.2.8 静态成员静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员 静态成员分为： 静态成员变量 所有对象共享同一份数据 在编译阶段分配内存 类内声明，类外初始化 静态成员函数 所有对象共享同一个函数 静态成员函数只能访问静态成员变量 示例1 ：静态成员变量 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Person&#123; public: static int m_A; //静态成员变量 //静态成员变量特点： //1 在编译阶段分配内存 //2 类内声明，类外初始化 //3 所有对象共享同一份数据private: static int m_B; //静态成员变量也是有访问权限的&#125;;int Person::m_A = 10;int Person::m_B = 10;void test01()&#123; //静态成员变量两种访问方式 //1、通过对象 Person p1; p1.m_A = 100; cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl; Person p2; p2.m_A = 200; cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl; //共享同一份数据 cout &lt;&lt; &quot;p2.m_A = &quot; &lt;&lt; p2.m_A &lt;&lt; endl; //2、通过类名 cout &lt;&lt; &quot;m_A = &quot; &lt;&lt; Person::m_A &lt;&lt; endl; //cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 示例2：静态成员函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class Person&#123;public: //静态成员函数特点： //1 程序共享一个函数 //2 静态成员函数只能访问静态成员变量 static void func() &#123; cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl; m_A = 100; //m_B = 100; //错误，不可以访问非静态成员变量 &#125; static int m_A; //静态成员变量 int m_B; // private: //静态成员函数也是有访问权限的 static void func2() &#123; cout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl; &#125;&#125;;int Person::m_A = 10;void test01()&#123; //静态成员变量两种访问方式 //1、通过对象 Person p1; p1.func(); //2、通过类名 Person::func(); //Person::func2(); //私有权限访问不到&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.3 C++对象模型和this指针4.3.1 成员变量和成员函数分开存储在C++中，类内的成员变量和成员函数分开存储 只有非静态成员变量才属于类的对象上 1234567891011121314151617181920212223242526class Person &#123;public: Person() &#123; mA = 0; &#125; //非静态成员变量占对象空间 int mA; //静态成员变量不占对象空间 static int mB; //函数也不占对象空间，所有函数共享一个函数实例 void func() &#123; cout &lt;&lt; &quot;mA:&quot; &lt;&lt; this-&gt;mA &lt;&lt; endl; &#125; //静态成员函数也不占对象空间 static void sfunc() &#123; &#125;&#125;;int main() &#123; cout &lt;&lt; sizeof(Person) &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 4.3.2 this指针概念通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的 每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码 那么问题是：这一块代码是如何区分那个对象调用自己的呢？ c++通过提供特殊的对象指针，this指针，解决上述问题。this指针指向被调用的成员函数所属的对象 this指针是隐含每一个非静态成员函数内的一种指针 this指针不需要定义，直接使用即可 this指针的用途： 当形参和成员变量同名时，可用this指针来区分 在类的非静态成员函数中返回对象本身，可使用return *this 1234567891011121314151617181920212223242526272829303132333435363738class Person&#123;public: Person(int age) &#123; //1、当形参和成员变量同名时，可用this指针来区分 this-&gt;age = age; &#125; Person&amp; PersonAddPerson(Person p) &#123; this-&gt;age += p.age; //返回对象本身 return *this; &#125; int age;&#125;;void test01()&#123; Person p1(10); cout &lt;&lt; &quot;p1.age = &quot; &lt;&lt; p1.age &lt;&lt; endl; Person p2(10); p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1); cout &lt;&lt; &quot;p2.age = &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.3.3 空指针访问成员函数C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针 如果用到this指针，需要加以判断保证代码的健壮性 示例： 12345678910111213141516171819202122232425262728293031323334//空指针访问成员函数class Person &#123;public: void ShowClassName() &#123; cout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl; &#125; void ShowPerson() &#123; if (this == NULL) &#123; return; &#125; cout &lt;&lt; mAge &lt;&lt; endl; &#125;public: int mAge;&#125;;void test01()&#123; Person * p = NULL; p-&gt;ShowClassName(); //空指针，可以调用成员函数 p-&gt;ShowPerson(); //但是如果成员函数中用到了this指针，就不可以了&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.3.4 const修饰成员函数常函数： 成员函数后加const后我们称为这个函数为常函数 常函数内不可以修改成员属性 成员属性声明时加关键字mutable后，在常函数中依然可以修改 常对象： 声明对象前加const称该对象为常对象 常对象只能调用常函数 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class Person &#123;public: Person() &#123; m_A = 0; m_B = 0; &#125; //this指针的本质是一个指针常量，指针的指向不可修改 //如果想让指针指向的值也不可以修改，需要声明常函数 void ShowPerson() const &#123; //const Type* const pointer; //this = NULL; //不能修改指针的指向 Person* const this; //this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的 //const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量 this-&gt;m_B = 100; &#125; void MyFunc() const &#123; //mA = 10000; &#125;public: int m_A; mutable int m_B; //可修改 可变的&#125;;//const修饰对象 常对象void test01() &#123; const Person person; //常量对象 cout &lt;&lt; person.m_A &lt;&lt; endl; //person.mA = 100; //常对象不能修改成员变量的值,但是可以访问 person.m_B = 100; //但是常对象可以修改mutable修饰成员变量 //常对象访问成员函数 person.MyFunc(); //常对象不能调用const的函数&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.4 友元生活中你的家有客厅(Public)，有你的卧室(Private) 客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去 但是呢，你也可以允许你的好闺蜜好基友进去。 在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术 友元的目的就是让一个函数或者类 访问另一个类中私有成员 友元的关键字为 &#x3D;&#x3D;friend&#x3D;&#x3D; 友元的三种实现 全局函数做友元 类做友元 成员函数做友元 4.4.1 全局函数做友元123456789101112131415161718192021222324252627282930313233343536373839404142class Building&#123; //告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容 friend void goodGay(Building * building);public: Building() &#123; this-&gt;m_SittingRoom = &quot;客厅&quot;; this-&gt;m_BedRoom = &quot;卧室&quot;; &#125;public: string m_SittingRoom; //客厅private: string m_BedRoom; //卧室&#125;;void goodGay(Building * building)&#123; cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl; cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123; Building b; goodGay(&amp;b);&#125;int main()&#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.4.2 类做友元12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758class Building;class goodGay&#123;public: goodGay(); void visit();private: Building *building;&#125;;class Building&#123; //告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容 friend class goodGay;public: Building();public: string m_SittingRoom; //客厅private: string m_BedRoom;//卧室&#125;;Building::Building()&#123; this-&gt;m_SittingRoom = &quot;客厅&quot;; this-&gt;m_BedRoom = &quot;卧室&quot;;&#125;goodGay::goodGay()&#123; building = new Building;&#125;void goodGay::visit()&#123; cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl; cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123; goodGay gg; gg.visit();&#125;int main()&#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.4.3 成员函数做友元123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class Building;class goodGay&#123;public: goodGay(); void visit(); //只让visit函数作为Building的好朋友，可以发访问Building中私有内容 void visit2(); private: Building *building;&#125;;class Building&#123; //告诉编译器 goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容 friend void goodGay::visit();public: Building();public: string m_SittingRoom; //客厅private: string m_BedRoom;//卧室&#125;;Building::Building()&#123; this-&gt;m_SittingRoom = &quot;客厅&quot;; this-&gt;m_BedRoom = &quot;卧室&quot;;&#125;goodGay::goodGay()&#123; building = new Building;&#125;void goodGay::visit()&#123; cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl; cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void goodGay::visit2()&#123; cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl; //cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123; goodGay gg; gg.visit();&#125;int main()&#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.5 运算符重载运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型 4.5.1 加号运算符重载作用：实现两个自定义数据类型相加的运算 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class Person &#123;public: Person() &#123;&#125;; Person(int a, int b) &#123; this-&gt;m_A = a; this-&gt;m_B = b; &#125; //成员函数实现 + 号运算符重载 Person operator+(const Person&amp; p) &#123; Person temp; temp.m_A = this-&gt;m_A + p.m_A; temp.m_B = this-&gt;m_B + p.m_B; return temp; &#125;public: int m_A; int m_B;&#125;;//全局函数实现 + 号运算符重载//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;// Person temp(0, 0);// temp.m_A = p1.m_A + p2.m_A;// temp.m_B = p1.m_B + p2.m_B;// return temp;//&#125;//运算符重载 可以发生函数重载 Person operator+(const Person&amp; p2, int val) &#123; Person temp; temp.m_A = p2.m_A + val; temp.m_B = p2.m_B + val; return temp;&#125;void test() &#123; Person p1(10, 10); Person p2(20, 20); //成员函数方式 Person p3 = p2 + p1; //相当于 p2.operaor+(p1) cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl; Person p4 = p3 + 10; //相当于 operator+(p3,10) cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;&#125;int main() &#123; test(); system(&quot;pause&quot;); return 0;&#125; 总结1：对于内置的数据类型的表达式的的运算符是不可能改变的 总结2：不要滥用运算符重载 4.5.2 左移运算符重载作用：可以输出自定义数据类型 123456789101112131415161718192021222324252627282930313233343536373839404142class Person &#123; friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);public: Person(int a, int b) &#123; this-&gt;m_A = a; this-&gt;m_B = b; &#125; //成员函数 实现不了 p &lt;&lt; cout 不是我们想要的效果 //void operator&lt;&lt;(Person&amp; p)&#123; //&#125;private: int m_A; int m_B;&#125;;//全局函数实现左移重载//ostream对象只能有一个ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123; out &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B; return out;&#125;void test() &#123; Person p1(10, 20); cout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; //链式编程&#125;int main() &#123; test(); system(&quot;pause&quot;); return 0;&#125; 总结：重载左移运算符配合友元可以实现输出自定义数据类型 4.5.3 递增运算符重载作用： 通过重载递增运算符，实现自己的整型数据 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960class MyInteger &#123; friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);public: MyInteger() &#123; m_Num = 0; &#125; //前置++ MyInteger&amp; operator++() &#123; //先++ m_Num++; //再返回 return *this; &#125; //后置++ MyInteger operator++(int) &#123; //先返回 MyInteger temp = *this; //记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++； m_Num++; return temp; &#125;private: int m_Num;&#125;;ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) &#123; out &lt;&lt; myint.m_Num; return out;&#125;//前置++ 先++ 再返回void test01() &#123; MyInteger myInt; cout &lt;&lt; ++myInt &lt;&lt; endl; cout &lt;&lt; myInt &lt;&lt; endl;&#125;//后置++ 先返回 再++void test02() &#123; MyInteger myInt; cout &lt;&lt; myInt++ &lt;&lt; endl; cout &lt;&lt; myInt &lt;&lt; endl;&#125;int main() &#123; test01(); //test02(); system(&quot;pause&quot;); return 0;&#125; 总结： 前置递增返回引用，后置递增返回值 4.5.4 赋值运算符重载c++编译器至少给一个类添加4个函数 默认构造函数(无参，函数体为空) 默认析构函数(无参，函数体为空) 默认拷贝构造函数，对属性进行值拷贝 赋值运算符 operator&#x3D;, 对属性进行值拷贝 如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778class Person&#123;public: Person(int age) &#123; //将年龄数据开辟到堆区 m_Age = new int(age); &#125; //重载赋值运算符 Person&amp; operator=(Person &amp;p) &#123; if (m_Age != NULL) &#123; delete m_Age; m_Age = NULL; &#125; //编译器提供的代码是浅拷贝 //m_Age = p.m_Age; //提供深拷贝 解决浅拷贝的问题 m_Age = new int(*p.m_Age); //返回自身 return *this; &#125; ~Person() &#123; if (m_Age != NULL) &#123; delete m_Age; m_Age = NULL; &#125; &#125; //年龄的指针 int *m_Age;&#125;;void test01()&#123; Person p1(18); Person p2(20); Person p3(30); p3 = p2 = p1; //赋值操作 cout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl; cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl; cout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;&#125;int main() &#123; test01(); //int a = 10; //int b = 20; //int c = 30; //c = b = a; //cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; //cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; //cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl; system(&quot;pause&quot;); return 0;&#125; 4.5.5 关系运算符重载作用：重载关系运算符，可以让两个自定义类型对象进行对比操作 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273class Person&#123;public: Person(string name, int age) &#123; this-&gt;m_Name = name; this-&gt;m_Age = age; &#125;; bool operator==(Person &amp; p) &#123; if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) &#123; return true; &#125; else &#123; return false; &#125; &#125; bool operator!=(Person &amp; p) &#123; if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age) &#123; return false; &#125; else &#123; return true; &#125; &#125; string m_Name; int m_Age;&#125;;void test01()&#123; //int a = 0; //int b = 0; Person a(&quot;孙悟空&quot;, 18); Person b(&quot;孙悟空&quot;, 18); if (a == b) &#123; cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl; &#125; if (a != b) &#123; cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl; &#125;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.5.6 函数调用运算符重载 函数调用运算符 () 也可以重载 由于重载后使用的方式非常像函数的调用，因此称为仿函数 仿函数没有固定写法，非常灵活 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445class MyPrint&#123;public: void operator()(string text) &#123; cout &lt;&lt; text &lt;&lt; endl; &#125;&#125;;void test01()&#123; //重载的（）操作符 也称为仿函数 MyPrint myFunc; myFunc(&quot;hello world&quot;);&#125;class MyAdd&#123;public: int operator()(int v1, int v2) &#123; return v1 + v2; &#125;&#125;;void test02()&#123; MyAdd add; int ret = add(10, 10); cout &lt;&lt; &quot;ret = &quot; &lt;&lt; ret &lt;&lt; endl; //匿名对象调用 cout &lt;&lt; &quot;MyAdd()(100,100) = &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;&#125;int main() &#123; test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 4.6 继承继承是面向对象三大特性之一 有些类与类之间存在特殊的关系，例如下图中： 我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。 这个时候我们就可以考虑利用继承的技术，减少重复代码 4.6.1 继承的基本语法例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同 接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处 普通实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102//Java页面class Java &#123;public: void header() &#123; cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl; &#125; void footer() &#123; cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl; &#125; void left() &#123; cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl; &#125; void content() &#123; cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl; &#125;&#125;;//Python页面class Python&#123;public: void header() &#123; cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl; &#125; void footer() &#123; cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl; &#125; void left() &#123; cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl; &#125; void content() &#123; cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl; &#125;&#125;;//C++页面class CPP &#123;public: void header() &#123; cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl; &#125; void footer() &#123; cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl; &#125; void left() &#123; cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl; &#125; void content() &#123; cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl; &#125;&#125;;void test01()&#123; //Java页面 cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl; Java ja; ja.header(); ja.footer(); ja.left(); ja.content(); cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl; //Python页面 cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl; Python py; py.header(); py.footer(); py.left(); py.content(); cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl; //C++页面 cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl; CPP cp; cp.header(); cp.footer(); cp.left(); cp.content();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 继承实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687//公共页面class BasePage&#123;public: void header() &#123; cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl; &#125; void footer() &#123; cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl; &#125; void left() &#123; cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl; &#125;&#125;;//Java页面class Java : public BasePage&#123;public: void content() &#123; cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl; &#125;&#125;;//Python页面class Python : public BasePage&#123;public: void content() &#123; cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl; &#125;&#125;;//C++页面class CPP : public BasePage&#123;public: void content() &#123; cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl; &#125;&#125;;void test01()&#123; //Java页面 cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl; Java ja; ja.header(); ja.footer(); ja.left(); ja.content(); cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl; //Python页面 cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl; Python py; py.header(); py.footer(); py.left(); py.content(); cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl; //C++页面 cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl; CPP cp; cp.header(); cp.footer(); cp.left(); cp.content();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 继承的好处：&#x3D;&#x3D;可以减少重复的代码&#x3D;&#x3D; class A : public B; A 类称为子类 或 派生类 B 类称为父类 或 基类 派生类中的成员，包含两大部分： 一类是从基类继承过来的，一类是自己增加的成员。 从基类继承过过来的表现其共性，而新增的成员体现了其个性。 4.6.2 继承方式继承的语法：class 子类 : 继承方式 父类 继承方式一共有三种： 公共继承 保护继承 私有继承 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485class Base1&#123;public: int m_A;protected: int m_B;private: int m_C;&#125;;//公共继承class Son1 :public Base1&#123;public: void func() &#123; m_A; //可访问 public权限 m_B; //可访问 protected权限 //m_C; //不可访问 &#125;&#125;;void myClass()&#123; Son1 s1; s1.m_A; //其他类只能访问到公共权限&#125;//保护继承class Base2&#123;public: int m_A;protected: int m_B;private: int m_C;&#125;;class Son2:protected Base2&#123;public: void func() &#123; m_A; //可访问 protected权限 m_B; //可访问 protected权限 //m_C; //不可访问 &#125;&#125;;void myClass2()&#123; Son2 s; //s.m_A; //不可访问&#125;//私有继承class Base3&#123;public: int m_A;protected: int m_B;private: int m_C;&#125;;class Son3:private Base3&#123;public: void func() &#123; m_A; //可访问 private权限 m_B; //可访问 private权限 //m_C; //不可访问 &#125;&#125;;class GrandSon3 :public Son3&#123;public: void func() &#123; //Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到 //m_A; //m_B; //m_C; &#125;&#125;; 4.6.3 继承中的对象模型问题：从父类继承过来的成员，哪些属于子类对象中？ 示例： 123456789101112131415161718192021222324252627282930class Base&#123;public: int m_A;protected: int m_B;private: int m_C; //私有成员只是被隐藏了，但是还是会继承下去&#125;;//公共继承class Son :public Base&#123;public: int m_D;&#125;;void test01()&#123; cout &lt;&lt; &quot;sizeof Son = &quot; &lt;&lt; sizeof(Son) &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 利用工具查看： 打开工具窗口后，定位到当前CPP文件的盘符 然后输入： cl &#x2F;d1 reportSingleClassLayout查看的类名 所属文件名 效果如下图： 结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到 4.6.4 继承中构造和析构顺序子类继承父类后，当创建子类对象，也会调用父类的构造函数 问题：父类和子类的构造和析构顺序是谁先谁后？ 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142class Base &#123;public: Base() &#123; cout &lt;&lt; &quot;Base构造函数!&quot; &lt;&lt; endl; &#125; ~Base() &#123; cout &lt;&lt; &quot;Base析构函数!&quot; &lt;&lt; endl; &#125;&#125;;class Son : public Base&#123;public: Son() &#123; cout &lt;&lt; &quot;Son构造函数!&quot; &lt;&lt; endl; &#125; ~Son() &#123; cout &lt;&lt; &quot;Son析构函数!&quot; &lt;&lt; endl; &#125;&#125;;void test01()&#123; //继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反 Son s;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反 4.6.5 继承同名成员处理方式问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？ 访问子类同名成员 直接访问即可 访问父类同名成员 需要加作用域 示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758class Base &#123;public: Base() &#123; m_A = 100; &#125; void func() &#123; cout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl; &#125; void func(int a) &#123; cout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl; &#125;public: int m_A;&#125;;class Son : public Base &#123;public: Son() &#123; m_A = 200; &#125; //当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数 //如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域 void func() &#123; cout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl; &#125;public: int m_A;&#125;;void test01()&#123; Son s; cout &lt;&lt; &quot;Son下的m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl; cout &lt;&lt; &quot;Base下的m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl; s.func(); s.Base::func(); s.Base::func(10);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return EXIT_SUCCESS;&#125; 总结： 子类对象可以直接访问到子类中同名成员 子类对象加作用域可以访问到父类同名成员 当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数 4.6.6 继承同名静态成员处理方式问题：继承中同名的静态成员在子类对象上如何进行访问？ 静态成员和非静态成员出现同名，处理方式一致 访问子类同名成员 直接访问即可 访问父类同名成员 需要加作用域 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class Base &#123;public: static void func() &#123; cout &lt;&lt; &quot;Base - static void func()&quot; &lt;&lt; endl; &#125; static void func(int a) &#123; cout &lt;&lt; &quot;Base - static void func(int a)&quot; &lt;&lt; endl; &#125; static int m_A;&#125;;int Base::m_A = 100;class Son : public Base &#123;public: static void func() &#123; cout &lt;&lt; &quot;Son - static void func()&quot; &lt;&lt; endl; &#125; static int m_A;&#125;;int Son::m_A = 200;//同名成员属性void test01()&#123; //通过对象访问 cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl; Son s; cout &lt;&lt; &quot;Son 下 m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl; cout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl; //通过类名访问 cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl; cout &lt;&lt; &quot;Son 下 m_A = &quot; &lt;&lt; Son::m_A &lt;&lt; endl; cout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;&#125;//同名成员函数void test02()&#123; //通过对象访问 cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl; Son s; s.func(); s.Base::func(); cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl; Son::func(); Son::Base::func(); //出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问 Son::Base::func(100);&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名） 4.6.7 多继承语法C++允许一个类继承多个类 语法： class 子类 ：继承方式 父类1 ， 继承方式 父类2... 多继承可能会引发父类中有同名成员出现，需要加作用域区分 C++实际开发中不建议用多继承 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class Base1 &#123;public: Base1() &#123; m_A = 100; &#125;public: int m_A;&#125;;class Base2 &#123;public: Base2() &#123; m_A = 200; //开始是m_B 不会出问题，但是改为mA就会出现不明确 &#125;public: int m_A;&#125;;//语法：class 子类：继承方式 父类1 ，继承方式 父类2 class Son : public Base2, public Base1 &#123;public: Son() &#123; m_C = 300; m_D = 400; &#125;public: int m_C; int m_D;&#125;;//多继承容易产生成员同名的情况//通过使用类名作用域可以区分调用哪一个基类的成员void test01()&#123; Son s; cout &lt;&lt; &quot;sizeof Son = &quot; &lt;&lt; sizeof(s) &lt;&lt; endl; cout &lt;&lt; s.Base1::m_A &lt;&lt; endl; cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域 4.6.8 菱形继承菱形继承概念： ​ 两个派生类继承同一个基类 ​ 又有某个类同时继承者两个派生类 ​ 这种继承被称为菱形继承，或者钻石继承 典型的菱形继承案例： 菱形继承问题： 羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。 草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。 示例： 1234567891011121314151617181920212223242526272829303132class Animal&#123;public: int m_Age;&#125;;//继承前加virtual关键字后，变为虚继承//此时公共的父类Animal称为虚基类class Sheep : virtual public Animal &#123;&#125;;class Tuo : virtual public Animal &#123;&#125;;class SheepTuo : public Sheep, public Tuo &#123;&#125;;void test01()&#123; SheepTuo st; st.Sheep::m_Age = 100; st.Tuo::m_Age = 200; cout &lt;&lt; &quot;st.Sheep::m_Age = &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl; cout &lt;&lt; &quot;st.Tuo::m_Age = &quot; &lt;&lt; st.Tuo::m_Age &lt;&lt; endl; cout &lt;&lt; &quot;st.m_Age = &quot; &lt;&lt; st.m_Age &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义 利用虚继承可以解决菱形继承问题 4.7 多态4.7.1 多态的基本概念多态是C++面向对象三大特性之一 多态分为两类 静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名 动态多态: 派生类和虚函数实现运行时多态 静态多态和动态多态区别： 静态多态的函数地址早绑定 - 编译阶段确定函数地址 动态多态的函数地址晚绑定 - 运行阶段确定函数地址 下面通过案例进行讲解多态 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364class Animal&#123;public: //Speak函数就是虚函数 //函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。 virtual void speak() &#123; cout &lt;&lt; &quot;动物在说话&quot; &lt;&lt; endl; &#125;&#125;;class Cat :public Animal&#123;public: void speak() &#123; cout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl; &#125;&#125;;class Dog :public Animal&#123;public: void speak() &#123; cout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl; &#125;&#125;;//我们希望传入什么对象，那么就调用什么对象的函数//如果函数地址在编译阶段就能确定，那么静态联编//如果函数地址在运行阶段才能确定，就是动态联编void DoSpeak(Animal &amp; animal)&#123; animal.speak();&#125;////多态满足条件： //1、有继承关系//2、子类重写父类中的虚函数//多态使用：//父类指针或引用指向子类对象void test01()&#123; Cat cat; DoSpeak(cat); Dog dog; DoSpeak(dog);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 多态满足条件 有继承关系 子类重写父类中的虚函数 多态使用条件 父类指针或引用指向子类对象 重写：函数返回值类型 函数名 参数列表 完全一致称为重写 4.7.2 多态案例一-计算器类案例描述： 分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类 多态的优点： 代码组织结构清晰 可读性强 利于前期和后期的扩展以及维护 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117//普通实现class Calculator &#123;public: int getResult(string oper) &#123; if (oper == &quot;+&quot;) &#123; return m_Num1 + m_Num2; &#125; else if (oper == &quot;-&quot;) &#123; return m_Num1 - m_Num2; &#125; else if (oper == &quot;*&quot;) &#123; return m_Num1 * m_Num2; &#125; //如果要提供新的运算，需要修改源码 &#125;public: int m_Num1; int m_Num2;&#125;;void test01()&#123; //普通实现测试 Calculator c; c.m_Num1 = 10; c.m_Num2 = 10; cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;+&quot;) &lt;&lt; endl; cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl; cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;&#125;//多态实现//抽象计算器类//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护class AbstractCalculator&#123;public : virtual int getResult() &#123; return 0; &#125; int m_Num1; int m_Num2;&#125;;//加法计算器class AddCalculator :public AbstractCalculator&#123;public: int getResult() &#123; return m_Num1 + m_Num2; &#125;&#125;;//减法计算器class SubCalculator :public AbstractCalculator&#123;public: int getResult() &#123; return m_Num1 - m_Num2; &#125;&#125;;//乘法计算器class MulCalculator :public AbstractCalculator&#123;public: int getResult() &#123; return m_Num1 * m_Num2; &#125;&#125;;void test02()&#123; //创建加法计算器 AbstractCalculator *abc = new AddCalculator; abc-&gt;m_Num1 = 10; abc-&gt;m_Num2 = 10; cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl; delete abc; //用完了记得销毁 //创建减法计算器 abc = new SubCalculator; abc-&gt;m_Num1 = 10; abc-&gt;m_Num2 = 10; cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl; delete abc; //创建乘法计算器 abc = new MulCalculator; abc-&gt;m_Num1 = 10; abc-&gt;m_Num2 = 10; cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl; delete abc;&#125;int main() &#123; //test01(); test02(); system(&quot;pause&quot;); return 0;&#125; 总结：C++开发提倡利用多态设计程序架构，因为多态优点很多 4.7.3 纯虚函数和抽象类在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容 因此可以将虚函数改为纯虚函数 纯虚函数语法：virtual 返回值类型 函数名 （参数列表）= 0 ; 当类中有了纯虚函数，这个类也称为&#x3D;&#x3D;抽象类&#x3D;&#x3D; 抽象类特点： 无法实例化对象 子类必须重写抽象类中的纯虚函数，否则也属于抽象类 示例： 123456789101112131415161718192021222324252627282930313233343536class Base&#123;public: //纯虚函数 //类中只要有一个纯虚函数就称为抽象类 //抽象类无法实例化对象 //子类必须重写父类中的纯虚函数，否则也属于抽象类 virtual void func() = 0;&#125;;class Son :public Base&#123;public: virtual void func() &#123; cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl; &#125;;&#125;;void test01()&#123; Base * base = NULL; //base = new Base; // 错误，抽象类无法实例化对象 base = new Son; base-&gt;func(); delete base;//记得销毁&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.7.4 多态案例二-制作饮品案例描述： 制作饮品的大致流程为：煮水 - 冲泡 - 倒入杯中 - 加入辅料 利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283//抽象制作饮品class AbstractDrinking &#123;public: //烧水 virtual void Boil() = 0; //冲泡 virtual void Brew() = 0; //倒入杯中 virtual void PourInCup() = 0; //加入辅料 virtual void PutSomething() = 0; //规定流程 void MakeDrink() &#123; Boil(); Brew(); PourInCup(); PutSomething(); &#125;&#125;;//制作咖啡class Coffee : public AbstractDrinking &#123;public: //烧水 virtual void Boil() &#123; cout &lt;&lt; &quot;煮农夫山泉!&quot; &lt;&lt; endl; &#125; //冲泡 virtual void Brew() &#123; cout &lt;&lt; &quot;冲泡咖啡!&quot; &lt;&lt; endl; &#125; //倒入杯中 virtual void PourInCup() &#123; cout &lt;&lt; &quot;将咖啡倒入杯中!&quot; &lt;&lt; endl; &#125; //加入辅料 virtual void PutSomething() &#123; cout &lt;&lt; &quot;加入牛奶!&quot; &lt;&lt; endl; &#125;&#125;;//制作茶水class Tea : public AbstractDrinking &#123;public: //烧水 virtual void Boil() &#123; cout &lt;&lt; &quot;煮自来水!&quot; &lt;&lt; endl; &#125; //冲泡 virtual void Brew() &#123; cout &lt;&lt; &quot;冲泡茶叶!&quot; &lt;&lt; endl; &#125; //倒入杯中 virtual void PourInCup() &#123; cout &lt;&lt; &quot;将茶水倒入杯中!&quot; &lt;&lt; endl; &#125; //加入辅料 virtual void PutSomething() &#123; cout &lt;&lt; &quot;加入枸杞!&quot; &lt;&lt; endl; &#125;&#125;;//业务函数void DoWork(AbstractDrinking* drink) &#123; drink-&gt;MakeDrink(); delete drink;&#125;void test01() &#123; DoWork(new Coffee); cout &lt;&lt; &quot;--------------&quot; &lt;&lt; endl; DoWork(new Tea);&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 4.7.5 虚析构和纯虚析构多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码 解决方式：将父类中的析构函数改为虚析构或者纯虚析构 虚析构和纯虚析构共性： 可以解决父类指针释放子类对象 都需要有具体的函数实现 虚析构和纯虚析构区别： 如果是纯虚析构，该类属于抽象类，无法实例化对象 虚析构语法： virtual ~类名()&#123;&#125; 纯虚析构语法： virtual ~类名() = 0; 类名::~类名()&#123;&#125; 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869class Animal &#123;public: Animal() &#123; cout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl; &#125; virtual void Speak() = 0; //析构函数加上virtual关键字，变成虚析构函数 //virtual ~Animal() //&#123; // cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl; //&#125; virtual ~Animal() = 0;&#125;;Animal::~Animal()&#123; cout &lt;&lt; &quot;Animal 纯虚析构函数调用！&quot; &lt;&lt; endl;&#125;//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。class Cat : public Animal &#123;public: Cat(string name) &#123; cout &lt;&lt; &quot;Cat构造函数调用！&quot; &lt;&lt; endl; m_Name = new string(name); &#125; virtual void Speak() &#123; cout &lt;&lt; *m_Name &lt;&lt; &quot;小猫在说话!&quot; &lt;&lt; endl; &#125; ~Cat() &#123; cout &lt;&lt; &quot;Cat析构函数调用!&quot; &lt;&lt; endl; if (this-&gt;m_Name != NULL) &#123; delete m_Name; m_Name = NULL; &#125; &#125;public: string *m_Name;&#125;;void test01()&#123; Animal *animal = new Cat(&quot;Tom&quot;); animal-&gt;Speak(); //通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏 //怎么解决？给基类增加一个虚析构函数 //虚析构函数就是用来解决通过父类指针释放子类对象 delete animal;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： ​ 1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象 ​ 2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构 ​ 3. 拥有纯虚析构函数的类也属于抽象类 4.7.6 多态案例三-电脑组装案例描述： 电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储） 将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商 创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口 测试时组装三台不同的电脑进行工作 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168#include&lt;iostream&gt;using namespace std;//抽象CPU类class CPU&#123;public: //抽象的计算函数 virtual void calculate() = 0;&#125;;//抽象显卡类class VideoCard&#123;public: //抽象的显示函数 virtual void display() = 0;&#125;;//抽象内存条类class Memory&#123;public: //抽象的存储函数 virtual void storage() = 0;&#125;;//电脑类class Computer&#123;public: Computer(CPU * cpu, VideoCard * vc, Memory * mem) &#123; m_cpu = cpu; m_vc = vc; m_mem = mem; &#125; //提供工作的函数 void work() &#123; //让零件工作起来，调用接口 m_cpu-&gt;calculate(); m_vc-&gt;display(); m_mem-&gt;storage(); &#125; //提供析构函数 释放3个电脑零件 ~Computer() &#123; //释放CPU零件 if (m_cpu != NULL) &#123; delete m_cpu; m_cpu = NULL; &#125; //释放显卡零件 if (m_vc != NULL) &#123; delete m_vc; m_vc = NULL; &#125; //释放内存条零件 if (m_mem != NULL) &#123; delete m_mem; m_mem = NULL; &#125; &#125;private: CPU * m_cpu; //CPU的零件指针 VideoCard * m_vc; //显卡零件指针 Memory * m_mem; //内存条零件指针&#125;;//具体厂商//Intel厂商class IntelCPU :public CPU&#123;public: virtual void calculate() &#123; cout &lt;&lt; &quot;Intel的CPU开始计算了！&quot; &lt;&lt; endl; &#125;&#125;;class IntelVideoCard :public VideoCard&#123;public: virtual void display() &#123; cout &lt;&lt; &quot;Intel的显卡开始显示了！&quot; &lt;&lt; endl; &#125;&#125;;class IntelMemory :public Memory&#123;public: virtual void storage() &#123; cout &lt;&lt; &quot;Intel的内存条开始存储了！&quot; &lt;&lt; endl; &#125;&#125;;//Lenovo厂商class LenovoCPU :public CPU&#123;public: virtual void calculate() &#123; cout &lt;&lt; &quot;Lenovo的CPU开始计算了！&quot; &lt;&lt; endl; &#125;&#125;;class LenovoVideoCard :public VideoCard&#123;public: virtual void display() &#123; cout &lt;&lt; &quot;Lenovo的显卡开始显示了！&quot; &lt;&lt; endl; &#125;&#125;;class LenovoMemory :public Memory&#123;public: virtual void storage() &#123; cout &lt;&lt; &quot;Lenovo的内存条开始存储了！&quot; &lt;&lt; endl; &#125;&#125;;void test01()&#123; //第一台电脑零件 CPU * intelCpu = new IntelCPU; VideoCard * intelCard = new IntelVideoCard; Memory * intelMem = new IntelMemory; cout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl; //创建第一台电脑 Computer * computer1 = new Computer(intelCpu, intelCard, intelMem); computer1-&gt;work(); delete computer1; cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl; cout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl; //第二台电脑组装 Computer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);; computer2-&gt;work(); delete computer2; cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl; cout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl; //第三台电脑组装 Computer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);; computer3-&gt;work(); delete computer3;&#125; 5 文件操作程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放 通过文件可以将数据持久化 C++中对文件操作需要包含头文件 &#x3D;&#x3D;&lt; fstream &gt;&#x3D;&#x3D; 文件类型分为两种： 文本文件 - 文件以文本的ASCII码形式存储在计算机中 二进制文件 - 文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂它们 操作文件的三大类: ofstream：写操作 ifstream： 读操作 fstream ： 读写操作 5.1文本文件5.1.1写文件 写文件步骤如下： 包含头文件 #include &lt;fstream&gt; 创建流对象 ofstream ofs; 打开文件 ofs.open(“文件路径”,打开方式); 写数据 ofs &lt;&lt; “写入的数据”; 关闭文件 ofs.close(); 文件打开方式： 打开方式 解释 ios::in 为读文件而打开文件 ios::out 为写文件而打开文件 ios::ate 初始位置：文件尾 ios::app 追加方式写文件 ios::trunc 如果文件存在先删除，再创建 ios::binary 二进制方式 注意： 文件打开方式可以配合使用，利用|操作符 例如：用二进制方式写文件 ios::binary | ios:: out 示例： 12345678910111213141516171819202122#include &lt;fstream&gt;void test01()&#123; ofstream ofs; ofs.open(&quot;test.txt&quot;, ios::out); ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl; ofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl; ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl; ofs.close();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 文件操作必须包含头文件 fstream 读文件可以利用 ofstream ，或者fstream类 打开文件时候需要指定操作文件的路径，以及打开方式 利用&lt;&lt;可以向文件中写数据 操作完毕，要关闭文件 5.1.2读文件读文件与写文件步骤相似，但是读取方式相对于比较多 读文件步骤如下： 包含头文件 #include &lt;fstream&gt; 创建流对象 ifstream ifs; 打开文件并判断文件是否打开成功 ifs.open(“文件路径”,打开方式); 读数据 四种方式读取 关闭文件 ifs.close(); 示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;fstream&gt;#include &lt;string&gt;void test01()&#123; ifstream ifs; ifs.open(&quot;test.txt&quot;, ios::in); if (!ifs.is_open()) &#123; cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl; return; &#125; //第一种方式 //char buf[1024] = &#123; 0 &#125;; //while (ifs &gt;&gt; buf) //&#123; // cout &lt;&lt; buf &lt;&lt; endl; //&#125; //第二种 //char buf[1024] = &#123; 0 &#125;; //while (ifs.getline(buf,sizeof(buf))) //&#123; // cout &lt;&lt; buf &lt;&lt; endl; //&#125; //第三种 //string buf; //while (getline(ifs, buf)) //&#123; // cout &lt;&lt; buf &lt;&lt; endl; //&#125; char c; while ((c = ifs.get()) != EOF) &#123; cout &lt;&lt; c; &#125; ifs.close();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 读文件可以利用 ifstream ，或者fstream类 利用is_open函数可以判断文件是否打开成功 close 关闭文件 5.2 二进制文件以二进制的方式对文件进行读写操作 打开方式要指定为 &#x3D;&#x3D;ios::binary&#x3D;&#x3D; 5.2.1 写文件二进制方式写文件主要利用流对象调用成员函数write 函数原型 ：ostream&amp; write(const char * buffer,int len); 参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数 示例： 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;fstream&gt;#include &lt;string&gt;class Person&#123;public: char m_Name[64]; int m_Age;&#125;;//二进制文件 写文件void test01()&#123; //1、包含头文件 //2、创建输出流对象 ofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary); //3、打开文件 //ofs.open(&quot;person.txt&quot;, ios::out | ios::binary); Person p = &#123;&quot;张三&quot; , 18&#125;; //4、写文件 ofs.write((const char *)&amp;p, sizeof(p)); //5、关闭文件 ofs.close();&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 总结： 文件输出流对象 可以通过write函数，以二进制方式写数据 5.2.2 读文件二进制方式读文件主要利用流对象调用成员函数read 函数原型：istream&amp; read(char *buffer,int len); 参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数 示例： 1234567891011121314151617181920212223242526272829303132#include &lt;fstream&gt;#include &lt;string&gt;class Person&#123;public: char m_Name[64]; int m_Age;&#125;;void test01()&#123; ifstream ifs(&quot;person.txt&quot;, ios::in | ios::binary); if (!ifs.is_open()) &#123; cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl; &#125; Person p; ifs.read((char *)&amp;p, sizeof(p)); cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;&#125;int main() &#123; test01(); system(&quot;pause&quot;); return 0;&#125; 文件输入流对象 可以通过read函数，以二进制方式读数据","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]}],"categories":[{"name":"速查手册","slug":"速查手册","permalink":"http://example.com/categories/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"},{"name":"工作日志","slug":"工作日志","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"},{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"},{"name":"读书笔记","slug":"读书笔记","permalink":"http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"404实验室","slug":"404实验室","permalink":"http://example.com/tags/404%E5%AE%9E%E9%AA%8C%E5%AE%A4/"},{"name":"blender","slug":"blender","permalink":"http://example.com/tags/blender/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"WSL","slug":"WSL","permalink":"http://example.com/tags/WSL/"},{"name":"Rasberry Pi","slug":"Rasberry-Pi","permalink":"http://example.com/tags/Rasberry-Pi/"},{"name":"Lenet","slug":"Lenet","permalink":"http://example.com/tags/Lenet/"},{"name":"Alexnet","slug":"Alexnet","permalink":"http://example.com/tags/Alexnet/"},{"name":"VGG","slug":"VGG","permalink":"http://example.com/tags/VGG/"},{"name":"GoogleNet","slug":"GoogleNet","permalink":"http://example.com/tags/GoogleNet/"},{"name":"ResNet","slug":"ResNet","permalink":"http://example.com/tags/ResNet/"},{"name":"机器学习","slug":"机器学习","permalink":"http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"感悟","slug":"感悟","permalink":"http://example.com/tags/%E6%84%9F%E6%82%9F/"},{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"latex","slug":"latex","permalink":"http://example.com/tags/latex/"},{"name":"DuckX","slug":"DuckX","permalink":"http://example.com/tags/DuckX/"},{"name":"minidocx","slug":"minidocx","permalink":"http://example.com/tags/minidocx/"},{"name":"Python-docx","slug":"Python-docx","permalink":"http://example.com/tags/Python-docx/"},{"name":"Qt","slug":"Qt","permalink":"http://example.com/tags/Qt/"},{"name":"Qxlnt","slug":"Qxlnt","permalink":"http://example.com/tags/Qxlnt/"},{"name":"xlnt","slug":"xlnt","permalink":"http://example.com/tags/xlnt/"},{"name":"多线程","slug":"多线程","permalink":"http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"Qxlsx","slug":"Qxlsx","permalink":"http://example.com/tags/Qxlsx/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"},{"name":"Volantis","slug":"Volantis","permalink":"http://example.com/tags/Volantis/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"books","slug":"books","permalink":"http://example.com/tags/books/"}]}